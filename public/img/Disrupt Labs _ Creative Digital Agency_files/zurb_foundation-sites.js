//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var ECMAScript = Package.ecmascript.ECMAScript;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;
var babelHelpers = Package['babel-runtime'].babelHelpers;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var Promise = Package.promise.Promise;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/zurb_foundation-sites/dist/foundation.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!(function ($) {                                                                                                       // 1
                                                                                                                       //
  "use strict";                                                                                                        // 3
                                                                                                                       //
  var FOUNDATION_VERSION = '6.2.0';                                                                                    // 5
                                                                                                                       //
  // Global Foundation object                                                                                          //
  // This is attached to the window, or used as a module for AMD/Browserify                                            //
  var Foundation = {                                                                                                   // 9
    version: FOUNDATION_VERSION,                                                                                       // 10
                                                                                                                       //
    /**                                                                                                                //
     * Stores initialized plugins.                                                                                     //
     */                                                                                                                //
    _plugins: {},                                                                                                      // 15
                                                                                                                       //
    /**                                                                                                                //
     * Stores generated unique ids for plugin instances                                                                //
     */                                                                                                                //
    _uuids: [],                                                                                                        // 20
                                                                                                                       //
    /**                                                                                                                //
     * Returns a boolean for RTL support                                                                               //
     */                                                                                                                //
    rtl: function () {                                                                                                 // 25
      return $('html').attr('dir') === 'rtl';                                                                          // 26
    },                                                                                                                 //
    /**                                                                                                                //
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.                                                         //
     */                                                                                                                //
    plugin: function (plugin, name) {                                                                                  // 32
      // Object key to use when adding to global Foundation object                                                     //
      // Examples: Foundation.Reveal, Foundation.OffCanvas                                                             //
      var className = name || functionName(plugin);                                                                    // 35
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin  //
      // Examples: data-reveal, data-off-canvas                                                                        //
      var attrName = hyphenate(className);                                                                             // 38
                                                                                                                       //
      // Add to the Foundation object and the plugins list (for reflowing)                                             //
      this._plugins[attrName] = this[className] = plugin;                                                              // 41
    },                                                                                                                 //
    /**                                                                                                                //
     * @function                                                                                                       //
     * Populates the _uuids array with pointers to each individual plugin instance.                                    //
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repeditive code.                             //
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.                                    //
     * @param {String} name - the name of the plugin, passed as a camelCased string.                                   //
     * @fires Plugin#init                                                                                              //
     */                                                                                                                //
    registerPlugin: function (plugin, name) {                                                                          // 52
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();                        // 53
      plugin.uuid = this.GetYoDigits(6, pluginName);                                                                   // 54
                                                                                                                       //
      if (!plugin.$element.attr('data-' + pluginName)) {                                                               // 56
        plugin.$element.attr('data-' + pluginName, plugin.uuid);                                                       // 57
      }                                                                                                                //
      if (!plugin.$element.data('zfPlugin')) {                                                                         // 59
        plugin.$element.data('zfPlugin', plugin);                                                                      // 60
      }                                                                                                                //
      /**                                                                                                              //
       * Fires when the plugin has initialized.                                                                        //
       * @event Plugin#init                                                                                            //
       */                                                                                                              //
      plugin.$element.trigger('init.zf.' + pluginName);                                                                // 66
                                                                                                                       //
      this._uuids.push(plugin.uuid);                                                                                   // 68
                                                                                                                       //
      return;                                                                                                          // 70
    },                                                                                                                 //
    /**                                                                                                                //
     * @function                                                                                                       //
     * Removes the plugins uuid from the _uuids array.                                                                 //
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.                                 //
     * Also fires the destroyed event for the plugin, consolidating repeditive code.                                   //
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.                                    //
     * @fires Plugin#destroyed                                                                                         //
     */                                                                                                                //
    unregisterPlugin: function (plugin) {                                                                              // 80
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));                          // 81
                                                                                                                       //
      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);                                                         // 83
      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')                                          // 84
      /**                                                                                                              //
       * Fires when the plugin has been destroyed.                                                                     //
       * @event Plugin#destroyed                                                                                       //
       */                                                                                                              //
      .trigger('destroyed.zf.' + pluginName);                                                                          //
      for (var prop in babelHelpers.sanitizeForInObject(plugin)) {                                                     // 90
        plugin[prop] = null; //clean up script to prep for garbage collection.                                         // 91
      }                                                                                                                //
      return;                                                                                                          // 93
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * @function                                                                                                       //
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.    //
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.                                         //
     */                                                                                                                //
    reInit: function (plugins) {                                                                                       // 102
      var isJQ = plugins instanceof $;                                                                                 // 103
      try {                                                                                                            // 104
        if (isJQ) {                                                                                                    // 105
          plugins.each(function () {                                                                                   // 106
            $(this).data('zfPlugin')._init();                                                                          // 107
          });                                                                                                          //
        } else {                                                                                                       //
          var type = typeof plugins,                                                                                   // 110
              _this = this,                                                                                            //
              fns = {                                                                                                  //
            'object': function (plgs) {                                                                                // 113
              plgs.forEach(function (p) {                                                                              // 114
                p = hyphenate(p);                                                                                      // 115
                $('[data-' + p + ']').foundation('_init');                                                             // 116
              });                                                                                                      //
            },                                                                                                         //
            'string': function () {                                                                                    // 119
              plugins = hyphenate(plugins);                                                                            // 120
              $('[data-' + plugins + ']').foundation('_init');                                                         // 121
            },                                                                                                         //
            'undefined': function () {                                                                                 // 123
              this['object'](Object.keys(_this._plugins));                                                             // 124
            }                                                                                                          //
          };                                                                                                           //
          fns[type](plugins);                                                                                          // 127
        }                                                                                                              //
      } catch (err) {                                                                                                  //
        console.error(err);                                                                                            // 130
      } finally {                                                                                                      //
        return plugins;                                                                                                // 132
      }                                                                                                                //
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * returns a random base-36 uid with namespacing                                                                   //
     * @function                                                                                                       //
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.             //
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.                                 //
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.                           //
     * @returns {String} - unique id                                                                                   //
     */                                                                                                                //
    GetYoDigits: function (length, namespace) {                                                                        // 144
      length = length || 6;                                                                                            // 145
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
    },                                                                                                                 //
    /**                                                                                                                //
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.           //
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.       //
     */                                                                                                                //
    reflow: function (elem, plugins) {                                                                                 // 153
                                                                                                                       //
      // If plugins is undefined, just grab everything                                                                 //
      if (typeof plugins === 'undefined') {                                                                            // 156
        plugins = Object.keys(this._plugins);                                                                          // 157
      }                                                                                                                //
      // If plugins is a string, convert it to an array with one item                                                  //
      else if (typeof plugins === 'string') {                                                                          //
          plugins = [plugins];                                                                                         // 161
        }                                                                                                              //
                                                                                                                       //
      var _this = this;                                                                                                // 164
                                                                                                                       //
      // Iterate through each plugin                                                                                   //
      $.each(plugins, function (i, name) {                                                                             // 167
        // Get the current plugin                                                                                      //
        var plugin = _this._plugins[name];                                                                             // 169
                                                                                                                       //
        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document           //
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');                                // 172
                                                                                                                       //
        // For each plugin found, initialize it                                                                        //
        $elem.each(function () {                                                                                       // 175
          var $el = $(this),                                                                                           // 176
              opts = {};                                                                                               //
          // Don't double-dip on plugins                                                                               //
          if ($el.data('zfPlugin')) {                                                                                  // 179
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");      // 180
            return;                                                                                                    // 181
          }                                                                                                            //
                                                                                                                       //
          if ($el.attr('data-options')) {                                                                              // 184
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {                                  // 185
              var opt = e.split(':').map(function (el) {                                                               // 186
                return el.trim();                                                                                      // 187
              });                                                                                                      //
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);                                                           // 189
            });                                                                                                        //
          }                                                                                                            //
          try {                                                                                                        // 192
            $el.data('zfPlugin', new plugin($(this), opts));                                                           // 193
          } catch (er) {                                                                                               //
            console.error(er);                                                                                         // 195
          } finally {                                                                                                  //
            return;                                                                                                    // 197
          }                                                                                                            //
        });                                                                                                            //
      });                                                                                                              //
    },                                                                                                                 //
    getFnName: functionName,                                                                                           // 202
    transitionend: function ($elem) {                                                                                  // 203
      var transitions = {                                                                                              // 204
        'transition': 'transitionend',                                                                                 // 205
        'WebkitTransition': 'webkitTransitionEnd',                                                                     // 206
        'MozTransition': 'transitionend',                                                                              // 207
        'OTransition': 'otransitionend'                                                                                // 208
      };                                                                                                               //
      var elem = document.createElement('div'),                                                                        // 210
          end;                                                                                                         //
                                                                                                                       //
      for (var t in babelHelpers.sanitizeForInObject(transitions)) {                                                   // 213
        if (typeof elem.style[t] !== 'undefined') {                                                                    // 214
          end = transitions[t];                                                                                        // 215
        }                                                                                                              //
      }                                                                                                                //
      if (end) {                                                                                                       // 218
        return end;                                                                                                    // 219
      } else {                                                                                                         //
        end = setTimeout(function () {                                                                                 // 221
          $elem.triggerHandler('transitionend', [$elem]);                                                              // 222
        }, 1);                                                                                                         //
        return 'transitionend';                                                                                        // 224
      }                                                                                                                //
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  Foundation.util = {                                                                                                  // 229
    /**                                                                                                                //
     * Function for applying a debounce effect to a function call.                                                     //
     * @function                                                                                                       //
     * @param {Function} func - Function to be called at end of timeout.                                               //
     * @param {Number} delay - Time in ms to delay the call of `func`.                                                 //
     * @returns function                                                                                               //
     */                                                                                                                //
    throttle: function (func, delay) {                                                                                 // 237
      var timer = null;                                                                                                // 238
                                                                                                                       //
      return function () {                                                                                             // 240
        var context = this,                                                                                            // 241
            args = arguments;                                                                                          //
                                                                                                                       //
        if (timer === null) {                                                                                          // 244
          timer = setTimeout(function () {                                                                             // 245
            func.apply(context, args);                                                                                 // 246
            timer = null;                                                                                              // 247
          }, delay);                                                                                                   //
        }                                                                                                              //
      };                                                                                                               //
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  // TODO: consider not making this a jQuery function                                                                  //
  // TODO: need way to reflow vs. re-initialize                                                                        //
  /**                                                                                                                  //
   * The Foundation jQuery method.                                                                                     //
   * @param {String|Array} method - An action to perform on the current jQuery object.                                 //
   */                                                                                                                  //
  var foundation = function (method) {                                                                                 // 260
    var type = typeof method,                                                                                          // 261
        $meta = $('meta.foundation-mq'),                                                                               //
        $noJS = $('.no-js');                                                                                           //
                                                                                                                       //
    if (!$meta.length) {                                                                                               // 265
      $('<meta class="foundation-mq">').appendTo(document.head);                                                       // 266
    }                                                                                                                  //
    if ($noJS.length) {                                                                                                // 268
      $noJS.removeClass('no-js');                                                                                      // 269
    }                                                                                                                  //
                                                                                                                       //
    if (type === 'undefined') {                                                                                        // 272
      //needs to initialize the Foundation object, or an individual plugin.                                            //
      Foundation.MediaQuery._init();                                                                                   // 274
      Foundation.reflow(this);                                                                                         // 275
    } else if (type === 'string') {                                                                                    //
      //an individual method to invoke on a plugin or group of plugins                                                 //
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary                   // 278
      var plugClass = this.data('zfPlugin'); //determine the class of plugin                                           // 279
                                                                                                                       //
      if (plugClass !== undefined && plugClass[method] !== undefined) {                                                // 281
        //make sure both the class and method exist                                                                    //
        if (this.length === 1) {                                                                                       // 283
          //if there's only one, call it directly.                                                                     //
          plugClass[method].apply(plugClass, args);                                                                    // 285
        } else {                                                                                                       //
          this.each(function (i, el) {                                                                                 // 287
            //otherwise loop through the jQuery collection and invoke the method on each                               //
            plugClass[method].apply($(el).data('zfPlugin'), args);                                                     // 289
          });                                                                                                          //
        }                                                                                                              //
      } else {                                                                                                         //
        //error for no class or no method                                                                              //
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }                                                                                                                //
    } else {                                                                                                           //
      //error for invalid argument type                                                                                //
      throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
    }                                                                                                                  //
    return this;                                                                                                       // 300
  };                                                                                                                   //
                                                                                                                       //
  window.Foundation = Foundation;                                                                                      // 303
  $.fn.foundation = foundation;                                                                                        // 304
                                                                                                                       //
  // Polyfill for requestAnimationFrame                                                                                //
  (function () {                                                                                                       // 307
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {                                      // 308
      return new Date().getTime();                                                                                     // 309
    };                                                                                                                 //
                                                                                                                       //
    var vendors = ['webkit', 'moz'];                                                                                   // 312
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {                                        // 313
      var vp = vendors[i];                                                                                             // 314
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];                                             // 315
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }                                                                                                                  //
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;                                                                                                // 319
      window.requestAnimationFrame = function (callback) {                                                             // 320
        var now = Date.now();                                                                                          // 321
        var nextTime = Math.max(lastTime + 16, now);                                                                   // 322
        return setTimeout(function () {                                                                                // 323
          callback(lastTime = nextTime);                                                                               // 324
        }, nextTime - now);                                                                                            //
      };                                                                                                               //
      window.cancelAnimationFrame = clearTimeout;                                                                      // 327
    }                                                                                                                  //
    /**                                                                                                                //
     * Polyfill for performance.now, required by rAF                                                                   //
     */                                                                                                                //
    if (!window.performance || !window.performance.now) {                                                              // 332
      window.performance = {                                                                                           // 333
        start: Date.now(),                                                                                             // 334
        now: function () {                                                                                             // 335
          return Date.now() - this.start;                                                                              // 336
        }                                                                                                              //
      };                                                                                                               //
    }                                                                                                                  //
  })();                                                                                                                //
  if (!Function.prototype.bind) {                                                                                      // 341
    Function.prototype.bind = function (oThis) {                                                                       // 342
      if (typeof this !== 'function') {                                                                                // 343
        // closest thing possible to the ECMAScript 5                                                                  //
        // internal IsCallable function                                                                                //
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');                   // 346
      }                                                                                                                //
                                                                                                                       //
      var aArgs = Array.prototype.slice.call(arguments, 1),                                                            // 349
          fToBind = this,                                                                                              //
          fNOP = function () {},                                                                                       //
          fBound = function () {                                                                                       //
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };                                                                                                               //
                                                                                                                       //
      if (this.prototype) {                                                                                            // 356
        // native functions don't have a prototype                                                                     //
        fNOP.prototype = this.prototype;                                                                               // 358
      }                                                                                                                //
      fBound.prototype = new fNOP();                                                                                   // 360
                                                                                                                       //
      return fBound;                                                                                                   // 362
    };                                                                                                                 //
  }                                                                                                                    //
  // Polyfill to get the name of a function in IE9                                                                     //
  function functionName(fn) {                                                                                          // 366
    if (Function.prototype.name === undefined) {                                                                       // 367
      var funcNameRegex = /function\s([^(]{1,})\(/;                                                                    // 368
      var results = funcNameRegex.exec(fn.toString());                                                                 // 369
      return results && results.length > 1 ? results[1].trim() : "";                                                   // 370
    } else if (fn.prototype === undefined) {                                                                           //
      return fn.constructor.name;                                                                                      // 372
    } else {                                                                                                           //
      return fn.prototype.constructor.name;                                                                            // 374
    }                                                                                                                  //
  }                                                                                                                    //
  function parseValue(str) {                                                                                           // 377
    if (/true/.test(str)) return true;else if (/false/.test(str)) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;                                                                                                        // 379
  }                                                                                                                    //
  // Convert PascalCase to kebab-case                                                                                  //
  // Thank you: http://stackoverflow.com/a/8955580                                                                     //
  function hyphenate(str) {                                                                                            // 383
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();                                                      // 384
  }                                                                                                                    //
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 387
                                                                                                                       //
!(function ($) {                                                                                                       // 389
                                                                                                                       //
  Foundation.Box = {                                                                                                   // 391
    ImNotTouchingYou: ImNotTouchingYou,                                                                                // 392
    GetDimensions: GetDimensions,                                                                                      // 393
    GetOffsets: GetOffsets                                                                                             // 394
  };                                                                                                                   //
                                                                                                                       //
  /**                                                                                                                  //
   * Compares the dimensions of an element to a container and determines collision events with container.              //
   * @function                                                                                                         //
   * @param {jQuery} element - jQuery object to test for collisions.                                                   //
   * @param {jQuery} parent - jQuery object to use as bounding container.                                              //
   * @param {Boolean} lrOnly - set to true to check left and right values only.                                        //
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.                                        //
   * @default if no parent object passed, detects collisions with `window`.                                            //
   * @returns {Boolean} - true if collision free, false if a collision in any direction.                               //
   */                                                                                                                  //
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {                                                         // 407
    var eleDims = GetDimensions(element),                                                                              // 408
        top,                                                                                                           //
        bottom,                                                                                                        //
        left,                                                                                                          //
        right;                                                                                                         //
                                                                                                                       //
    if (parent) {                                                                                                      // 414
      var parDims = GetDimensions(parent);                                                                             // 415
                                                                                                                       //
      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;                             // 417
      top = eleDims.offset.top >= parDims.offset.top;                                                                  // 418
      left = eleDims.offset.left >= parDims.offset.left;                                                               // 419
      right = eleDims.offset.left + eleDims.width <= parDims.width;                                                    // 420
    } else {                                                                                                           //
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;       // 422
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;                                                       // 423
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;                                                    // 424
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;                                         // 425
    }                                                                                                                  //
                                                                                                                       //
    var allDirs = [bottom, top, left, right];                                                                          // 428
                                                                                                                       //
    if (lrOnly) {                                                                                                      // 430
      return left === right === true;                                                                                  // 431
    }                                                                                                                  //
                                                                                                                       //
    if (tbOnly) {                                                                                                      // 434
      return top === bottom === true;                                                                                  // 435
    }                                                                                                                  //
                                                                                                                       //
    return allDirs.indexOf(false) === -1;                                                                              // 438
  };                                                                                                                   //
                                                                                                                       //
  /**                                                                                                                  //
   * Uses native methods to return an object of dimension values.                                                      //
   * @function                                                                                                         //
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values                                                         //
   * TODO - if element is window, return only those values.                                                            //
   */                                                                                                                  //
  function GetDimensions(elem, test) {                                                                                 // 448
    elem = elem.length ? elem[0] : elem;                                                                               // 449
                                                                                                                       //
    if (elem === window || elem === document) {                                                                        // 451
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");                                                 // 452
    }                                                                                                                  //
                                                                                                                       //
    var rect = elem.getBoundingClientRect(),                                                                           // 455
        parRect = elem.parentNode.getBoundingClientRect(),                                                             //
        winRect = document.body.getBoundingClientRect(),                                                               //
        winY = window.pageYOffset,                                                                                     //
        winX = window.pageXOffset;                                                                                     //
                                                                                                                       //
    return {                                                                                                           // 461
      width: rect.width,                                                                                               // 462
      height: rect.height,                                                                                             // 463
      offset: {                                                                                                        // 464
        top: rect.top + winY,                                                                                          // 465
        left: rect.left + winX                                                                                         // 466
      },                                                                                                               //
      parentDims: {                                                                                                    // 468
        width: parRect.width,                                                                                          // 469
        height: parRect.height,                                                                                        // 470
        offset: {                                                                                                      // 471
          top: parRect.top + winY,                                                                                     // 472
          left: parRect.left + winX                                                                                    // 473
        }                                                                                                              //
      },                                                                                                               //
      windowDims: {                                                                                                    // 476
        width: winRect.width,                                                                                          // 477
        height: winRect.height,                                                                                        // 478
        offset: {                                                                                                      // 479
          top: winY,                                                                                                   // 480
          left: winX                                                                                                   // 481
        }                                                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
  }                                                                                                                    //
                                                                                                                       //
  /**                                                                                                                  //
   * Returns an object of top and left integer pixel values for dynamically rendered elements,                         //
   * such as: Tooltip, Reveal, and Dropdown                                                                            //
   * @function                                                                                                         //
   * @param {jQuery} element - jQuery object for the element being positioned.                                         //
   * @param {jQuery} anchor - jQuery object for the element's anchor point.                                            //
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor      //
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.          //
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.        //
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels                                             //
   */                                                                                                                  //
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {                                       // 499
    var $eleDims = GetDimensions(element),                                                                             // 500
        $anchorDims = anchor ? GetDimensions(anchor) : null;                                                           //
                                                                                                                       //
    switch (position) {                                                                                                // 503
      case 'top':                                                                                                      // 504
        return {                                                                                                       // 505
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)                                                    // 507
        };                                                                                                             //
        break;                                                                                                         // 509
      case 'left':                                                                                                     // 509
        return {                                                                                                       // 511
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),                                                  // 512
          top: $anchorDims.offset.top                                                                                  // 513
        };                                                                                                             //
        break;                                                                                                         // 515
      case 'right':                                                                                                    // 516
        return {                                                                                                       // 517
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,                                                 // 518
          top: $anchorDims.offset.top                                                                                  // 519
        };                                                                                                             //
        break;                                                                                                         // 521
      case 'center top':                                                                                               // 522
        return {                                                                                                       // 523
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,                                  // 524
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)                                                    // 525
        };                                                                                                             //
        break;                                                                                                         // 527
      case 'center bottom':                                                                                            // 528
        return {                                                                                                       // 529
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,           // 530
          top: $anchorDims.offset.top + $anchorDims.height + vOffset                                                   // 531
        };                                                                                                             //
        break;                                                                                                         // 533
      case 'center left':                                                                                              // 534
        return {                                                                                                       // 535
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),                                                  // 536
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2                                   // 537
        };                                                                                                             //
        break;                                                                                                         // 539
      case 'center right':                                                                                             // 540
        return {                                                                                                       // 541
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,                                             // 542
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2                                   // 543
        };                                                                                                             //
        break;                                                                                                         // 545
      case 'center':                                                                                                   // 546
        return {                                                                                                       // 547
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,                  // 548
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2                   // 549
        };                                                                                                             //
        break;                                                                                                         // 551
      case 'reveal':                                                                                                   // 551
        return {                                                                                                       // 553
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,                                                      // 554
          top: $eleDims.windowDims.offset.top + vOffset                                                                // 555
        };                                                                                                             //
      case 'reveal full':                                                                                              // 557
        return {                                                                                                       // 558
          left: $eleDims.windowDims.offset.left,                                                                       // 559
          top: $eleDims.windowDims.offset.top                                                                          // 560
        };                                                                                                             //
        break;                                                                                                         // 562
      default:                                                                                                         // 562
        return {                                                                                                       // 564
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset                                                   // 566
        };                                                                                                             //
    }                                                                                                                  // 567
  }                                                                                                                    //
})(jQuery);                                                                                                            //
/*******************************************                                                                           //
 *                                         *                                                                           //
 * This util was created by Marius Olbertz *                                                                           //
 * Please thank Marius on GitHub /owlbertz *                                                                           //
 * or the web http://www.mariusolbertz.de/ *                                                                           //
 *                                         *                                                                           //
 ******************************************/                                                                           //
                                                                                                                       //
'use strict';                                                                                                          // 579
                                                                                                                       //
!(function ($) {                                                                                                       // 581
                                                                                                                       //
  var keyCodes = {                                                                                                     // 583
    9: 'TAB',                                                                                                          // 584
    13: 'ENTER',                                                                                                       // 585
    27: 'ESCAPE',                                                                                                      // 586
    32: 'SPACE',                                                                                                       // 587
    37: 'ARROW_LEFT',                                                                                                  // 588
    38: 'ARROW_UP',                                                                                                    // 589
    39: 'ARROW_RIGHT',                                                                                                 // 590
    40: 'ARROW_DOWN'                                                                                                   // 591
  };                                                                                                                   //
                                                                                                                       //
  var commands = {};                                                                                                   // 594
                                                                                                                       //
  var Keyboard = {                                                                                                     // 596
    keys: getKeyCodes(keyCodes),                                                                                       // 597
                                                                                                                       //
    /**                                                                                                                //
     * Parses the (keyboard) event and returns a String that represents its key                                        //
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE                                           //
     * @param {Event} event - the event generated by the event handler                                                 //
     * @return String key - String that represents the key pressed                                                     //
     */                                                                                                                //
    parseKey: function (event) {                                                                                       // 605
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();              // 606
      if (event.shiftKey) key = 'SHIFT_' + key;                                                                        // 607
      if (event.ctrlKey) key = 'CTRL_' + key;                                                                          // 608
      if (event.altKey) key = 'ALT_' + key;                                                                            // 609
      return key;                                                                                                      // 610
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * Handles the given (keyboard) event                                                                              //
     * @param {Event} event - the event generated by the event handler                                                 //
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal                                  //
     * @param {Objects} functions - collection of functions that are to be executed                                    //
     */                                                                                                                //
    handleKey: function (event, component, functions) {                                                                // 620
      var commandList = commands[component],                                                                           // 621
          keyCode = this.parseKey(event),                                                                              //
          cmds,                                                                                                        //
          command,                                                                                                     //
          fn;                                                                                                          //
                                                                                                                       //
      if (!commandList) return console.warn('Component not defined!');                                                 // 627
                                                                                                                       //
      if (typeof commandList.ltr === 'undefined') {                                                                    // 629
        // this component does not differentiate between ltr and rtl                                                   //
        cmds = commandList; // use plain list                                                                          // 631
      } else {                                                                                                         //
          // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa                                  //
          if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
        }                                                                                                              //
      command = cmds[keyCode];                                                                                         // 636
                                                                                                                       //
      fn = functions[command];                                                                                         // 638
      if (fn && typeof fn === 'function') {                                                                            // 639
        // execute function  if exists                                                                                 //
        fn.apply();                                                                                                    // 641
        if (functions.handled || typeof functions.handled === 'function') {                                            // 642
          // execute function when event was handled                                                                   //
          functions.handled.apply();                                                                                   // 644
        }                                                                                                              //
      } else {                                                                                                         //
        if (functions.unhandled || typeof functions.unhandled === 'function') {                                        // 647
          // execute function when event was not handled                                                               //
          functions.unhandled.apply();                                                                                 // 649
        }                                                                                                              //
      }                                                                                                                //
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * Finds all focusable elements within the given `$element`                                                        //
     * @param {jQuery} $element - jQuery object to search within                                                       //
     * @return {jQuery} $focusable - all focusable elements within `$element`                                          //
     */                                                                                                                //
    findFocusable: function ($element) {                                                                               // 660
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {                                                 // 662
          return false;                                                                                                // 663
        } //only have visible elements and those that have a tabindex greater or equal 0                               //
        return true;                                                                                                   // 665
      });                                                                                                              //
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * Returns the component name name                                                                                 //
     * @param {Object} component - Foundation component, e.g. Slider or Reveal                                         //
     * @return String componentName                                                                                    //
     */                                                                                                                //
                                                                                                                       //
    register: function (componentName, cmds) {                                                                         // 676
      commands[componentName] = cmds;                                                                                  // 677
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  /*                                                                                                                   //
   * Constants for easier comparing.                                                                                   //
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE                                             //
   */                                                                                                                  //
  function getKeyCodes(kcs) {                                                                                          // 685
    var k = {};                                                                                                        // 686
    for (var kc in babelHelpers.sanitizeForInObject(kcs)) {                                                            // 687
      k[kcs[kc]] = kcs[kc];                                                                                            // 688
    }return k;                                                                                                         //
  }                                                                                                                    //
                                                                                                                       //
  Foundation.Keyboard = Keyboard;                                                                                      // 692
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 694
                                                                                                                       //
!(function ($) {                                                                                                       // 696
                                                                                                                       //
  // Default set of media queries                                                                                      //
  var defaultQueries = {                                                                                               // 699
    'default': 'only screen',                                                                                          // 700
    landscape: 'only screen and (orientation: landscape)',                                                             // 701
    portrait: 'only screen and (orientation: portrait)',                                                               // 702
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };                                                                                                                   //
                                                                                                                       //
  var MediaQuery = {                                                                                                   // 706
    queries: [],                                                                                                       // 707
                                                                                                                       //
    current: '',                                                                                                       // 709
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
    _init: function () {                                                                                               // 716
      var self = this;                                                                                                 // 717
      var extractedStyles = $('.foundation-mq').css('font-family');                                                    // 718
      var namedQueries;                                                                                                // 719
                                                                                                                       //
      namedQueries = parseStyleToObject(extractedStyles);                                                              // 721
                                                                                                                       //
      for (var key in babelHelpers.sanitizeForInObject(namedQueries)) {                                                // 723
        self.queries.push({                                                                                            // 724
          name: key,                                                                                                   // 725
          value: 'only screen and (min-width: ' + namedQueries[key] + ')'                                              // 726
        });                                                                                                            //
      }                                                                                                                //
                                                                                                                       //
      this.current = this._getCurrentSize();                                                                           // 730
                                                                                                                       //
      this._watcher();                                                                                                 // 732
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * Checks if the screen is at least as wide as a breakpoint.                                                       //
     * @function                                                                                                       //
     * @param {String} size - Name of the breakpoint to check.                                                         //
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.                                   //
     */                                                                                                                //
    atLeast: function (size) {                                                                                         // 742
      var query = this.get(size);                                                                                      // 743
                                                                                                                       //
      if (query) {                                                                                                     // 745
        return window.matchMedia(query).matches;                                                                       // 746
      }                                                                                                                //
                                                                                                                       //
      return false;                                                                                                    // 749
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * Gets the media query of a breakpoint.                                                                           //
     * @function                                                                                                       //
     * @param {String} size - Name of the breakpoint to get.                                                           //
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.          //
     */                                                                                                                //
    get: function (size) {                                                                                             // 759
      for (var i in babelHelpers.sanitizeForInObject(this.queries)) {                                                  // 760
        var query = this.queries[i];                                                                                   // 761
        if (size === query.name) return query.value;                                                                   // 762
      }                                                                                                                //
                                                                                                                       //
      return null;                                                                                                     // 765
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function                                                                                                       //
     * @private                                                                                                        //
     * @returns {String} Name of the current breakpoint.                                                               //
     */                                                                                                                //
    _getCurrentSize: function () {                                                                                     // 775
      var matched;                                                                                                     // 776
                                                                                                                       //
      for (var i in babelHelpers.sanitizeForInObject(this.queries)) {                                                  // 778
        var query = this.queries[i];                                                                                   // 779
                                                                                                                       //
        if (window.matchMedia(query.value).matches) {                                                                  // 781
          matched = query;                                                                                             // 782
        }                                                                                                              //
      }                                                                                                                //
                                                                                                                       //
      if (typeof matched === 'object') {                                                                               // 786
        return matched.name;                                                                                           // 787
      } else {                                                                                                         //
        return matched;                                                                                                // 789
      }                                                                                                                //
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.           //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
    _watcher: function () {                                                                                            // 799
      var _this = this;                                                                                                // 800
                                                                                                                       //
      $(window).on('resize.zf.mediaquery', function () {                                                               // 802
        var newSize = _this._getCurrentSize();                                                                         // 803
                                                                                                                       //
        if (newSize !== _this.current) {                                                                               // 805
          // Broadcast the media query change on the window                                                            //
          $(window).trigger('changed.zf.mediaquery', [newSize, _this.current]);                                        // 807
                                                                                                                       //
          // Change the current media query                                                                            //
          _this.current = newSize;                                                                                     // 810
        }                                                                                                              //
      });                                                                                                              //
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  Foundation.MediaQuery = MediaQuery;                                                                                  // 816
                                                                                                                       //
  // matchMedia() polyfill - Test a CSS media type/query in JS.                                                        //
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license          //
  window.matchMedia || (window.matchMedia = (function () {                                                             // 820
    'use strict';                                                                                                      // 821
                                                                                                                       //
    // For browsers that support matchMedium api such as IE 9 and webkit                                               //
                                                                                                                       //
    var styleMedia = window.styleMedia || window.media;                                                                // 825
                                                                                                                       //
    // For those that don't support matchMedium                                                                        //
    if (!styleMedia) {                                                                                                 // 828
      var style = document.createElement('style'),                                                                     // 829
          script = document.getElementsByTagName('script')[0],                                                         //
          info = null;                                                                                                 //
                                                                                                                       //
      style.type = 'text/css';                                                                                         // 833
      style.id = 'matchmediajs-test';                                                                                  // 834
                                                                                                                       //
      script.parentNode.insertBefore(style, script);                                                                   // 836
                                                                                                                       //
      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers                  //
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;               // 839
                                                                                                                       //
      styleMedia = {                                                                                                   // 841
        matchMedium: function (media) {                                                                                // 842
          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';                                     // 843
                                                                                                                       //
          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers                      //
          if (style.styleSheet) {                                                                                      // 846
            style.styleSheet.cssText = text;                                                                           // 847
          } else {                                                                                                     //
            style.textContent = text;                                                                                  // 849
          }                                                                                                            //
                                                                                                                       //
          // Test if media query is true or false                                                                      //
          return info.width === '1px';                                                                                 // 853
        }                                                                                                              //
      };                                                                                                               //
    }                                                                                                                  //
                                                                                                                       //
    return function (media) {                                                                                          // 858
      return {                                                                                                         // 859
        matches: styleMedia.matchMedium(media || 'all'),                                                               // 860
        media: media || 'all'                                                                                          // 861
      };                                                                                                               //
    };                                                                                                                 //
  })());                                                                                                               //
                                                                                                                       //
  // Thank you: https://github.com/sindresorhus/query-string                                                           //
  function parseStyleToObject(str) {                                                                                   // 867
    var styleObject = {};                                                                                              // 868
                                                                                                                       //
    if (typeof str !== 'string') {                                                                                     // 870
      return styleObject;                                                                                              // 871
    }                                                                                                                  //
                                                                                                                       //
    str = str.trim().slice(1, -1); // browsers re-quote string style values                                            // 874
                                                                                                                       //
    if (!str) {                                                                                                        // 876
      return styleObject;                                                                                              // 877
    }                                                                                                                  //
                                                                                                                       //
    styleObject = str.split('&').reduce(function (ret, param) {                                                        // 880
      var parts = param.replace(/\+/g, ' ').split('=');                                                                // 881
      var key = parts[0];                                                                                              // 882
      var val = parts[1];                                                                                              // 883
      key = decodeURIComponent(key);                                                                                   // 884
                                                                                                                       //
      // missing `=` should be `null`:                                                                                 //
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters                                                 //
      val = val === undefined ? null : decodeURIComponent(val);                                                        // 888
                                                                                                                       //
      if (!ret.hasOwnProperty(key)) {                                                                                  // 890
        ret[key] = val;                                                                                                // 891
      } else if (Array.isArray(ret[key])) {                                                                            //
        ret[key].push(val);                                                                                            // 893
      } else {                                                                                                         //
        ret[key] = [ret[key], val];                                                                                    // 895
      }                                                                                                                //
      return ret;                                                                                                      // 897
    }, {});                                                                                                            //
                                                                                                                       //
    return styleObject;                                                                                                // 900
  }                                                                                                                    //
                                                                                                                       //
  Foundation.MediaQuery = MediaQuery;                                                                                  // 903
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 905
                                                                                                                       //
!(function ($) {                                                                                                       // 907
                                                                                                                       //
  /**                                                                                                                  //
   * Motion module.                                                                                                    //
   * @module foundation.motion                                                                                         //
   */                                                                                                                  //
                                                                                                                       //
  var initClasses = ['mui-enter', 'mui-leave'];                                                                        // 914
  var activeClasses = ['mui-enter-active', 'mui-leave-active'];                                                        // 915
                                                                                                                       //
  var Motion = {                                                                                                       // 917
    animateIn: function (element, animation, cb) {                                                                     // 918
      animate(true, element, animation, cb);                                                                           // 919
    },                                                                                                                 //
                                                                                                                       //
    animateOut: function (element, animation, cb) {                                                                    // 922
      animate(false, element, animation, cb);                                                                          // 923
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  function Move(duration, elem, fn) {                                                                                  // 927
    var anim,                                                                                                          // 928
        prog,                                                                                                          //
        start = null;                                                                                                  //
    // console.log('called');                                                                                          //
                                                                                                                       //
    function move(ts) {                                                                                                // 933
      if (!start) start = window.performance.now();                                                                    // 934
      // console.log(start, ts);                                                                                       //
      prog = ts - start;                                                                                               // 936
      fn.apply(elem);                                                                                                  // 937
                                                                                                                       //
      if (prog < duration) {                                                                                           // 939
        anim = window.requestAnimationFrame(move, elem);                                                               // 940
      } else {                                                                                                         //
        window.cancelAnimationFrame(anim);                                                                             // 942
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);                     // 943
      }                                                                                                                //
    }                                                                                                                  //
    anim = window.requestAnimationFrame(move);                                                                         // 946
  }                                                                                                                    //
                                                                                                                       //
  /**                                                                                                                  //
   * Animates an element in or out using a CSS transition class.                                                       //
   * @function                                                                                                         //
   * @private                                                                                                          //
   * @param {Boolean} isIn - Defines if the animation is in or out.                                                    //
   * @param {Object} element - jQuery or HTML object to animate.                                                       //
   * @param {String} animation - CSS class to use.                                                                     //
   * @param {Function} cb - Callback to run when animation is finished.                                                //
   */                                                                                                                  //
  function animate(isIn, element, animation, cb) {                                                                     // 958
    element = $(element).eq(0);                                                                                        // 959
                                                                                                                       //
    if (!element.length) return;                                                                                       // 961
                                                                                                                       //
    var initClass = isIn ? initClasses[0] : initClasses[1];                                                            // 963
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];                                                      // 964
                                                                                                                       //
    // Set up the animation                                                                                            //
    reset();                                                                                                           // 967
                                                                                                                       //
    element.addClass(animation).css('transition', 'none');                                                             // 969
                                                                                                                       //
    requestAnimationFrame(function () {                                                                                // 971
      element.addClass(initClass);                                                                                     // 972
      if (isIn) element.show();                                                                                        // 973
    });                                                                                                                //
                                                                                                                       //
    // Start the animation                                                                                             //
    requestAnimationFrame(function () {                                                                                // 977
      element[0].offsetWidth;                                                                                          // 978
      element.css('transition', '').addClass(activeClass);                                                             // 979
    });                                                                                                                //
                                                                                                                       //
    // Clean up the animation when it finishes                                                                         //
    element.one(Foundation.transitionend(element), finish);                                                            // 983
                                                                                                                       //
    // Hides the element (for out animations), resets the element, and runs a callback                                 //
    function finish() {                                                                                                // 986
      if (!isIn) element.hide();                                                                                       // 987
      reset();                                                                                                         // 988
      if (cb) cb.apply(element);                                                                                       // 989
    }                                                                                                                  //
                                                                                                                       //
    // Resets transitions and removes motion-specific classes                                                          //
    function reset() {                                                                                                 // 993
      element[0].style.transitionDuration = 0;                                                                         // 994
      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);                                            // 995
    }                                                                                                                  //
  }                                                                                                                    //
                                                                                                                       //
  Foundation.Move = Move;                                                                                              // 999
  Foundation.Motion = Motion;                                                                                          // 1000
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 1002
                                                                                                                       //
!(function ($) {                                                                                                       // 1004
                                                                                                                       //
  var Nest = {                                                                                                         // 1006
    Feather: function (menu) {                                                                                         // 1007
      var type = arguments.length <= 1 || arguments[1] === undefined ? 'zf' : arguments[1];                            // 1008
                                                                                                                       //
      menu.attr('role', 'menubar');                                                                                    // 1010
                                                                                                                       //
      var items = menu.find('li').attr({ 'role': 'menuitem' }),                                                        // 1012
          subMenuClass = 'is-' + type + '-submenu',                                                                    //
          subItemClass = subMenuClass + '-item',                                                                       //
          hasSubClass = 'is-' + type + '-submenu-parent';                                                              //
                                                                                                                       //
      menu.find('a:first').attr('tabindex', 0);                                                                        // 1017
                                                                                                                       //
      items.each(function () {                                                                                         // 1019
        var $item = $(this),                                                                                           // 1020
            $sub = $item.children('ul');                                                                               //
                                                                                                                       //
        if ($sub.length) {                                                                                             // 1023
          $item.addClass(hasSubClass).attr({                                                                           // 1024
            'aria-haspopup': true,                                                                                     // 1025
            'aria-expanded': false,                                                                                    // 1026
            'aria-label': $item.children('a:first').text()                                                             // 1027
          });                                                                                                          //
                                                                                                                       //
          $sub.addClass('submenu ' + subMenuClass).attr({                                                              // 1030
            'data-submenu': '',                                                                                        // 1031
            'aria-hidden': true,                                                                                       // 1032
            'role': 'menu'                                                                                             // 1033
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        if ($item.parent('[data-submenu]').length) {                                                                   // 1037
          $item.addClass('is-submenu-item ' + subItemClass);                                                           // 1038
        }                                                                                                              //
      });                                                                                                              //
                                                                                                                       //
      return;                                                                                                          // 1042
    },                                                                                                                 //
    Burn: function (menu, type) {                                                                                      // 1044
      var items = menu.find('li').removeAttr('tabindex'),                                                              // 1045
          subMenuClass = 'is-' + type + '-submenu',                                                                    //
          subItemClass = subMenuClass + '-item',                                                                       //
          hasSubClass = 'is-' + type + '-submenu-parent';                                                              //
                                                                                                                       //
      menu.find('*').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');
                                                                                                                       //
      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')            //
      //           .removeAttr('data-submenu'));                                                                       //
      // items.each(function(){                                                                                        //
      //   var $item = $(this),                                                                                        //
      //       $sub = $item.children('ul');                                                                            //
      //   if($item.parent('[data-submenu]').length){                                                                  //
      //     $item.removeClass('is-submenu-item ' + subItemClass);                                                     //
      //   }                                                                                                           //
      //   if($sub.length){                                                                                            //
      //     $item.removeClass('has-submenu');                                                                         //
      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');                                   //
      //   }                                                                                                           //
      // });                                                                                                           //
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  Foundation.Nest = Nest;                                                                                              // 1069
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 1071
                                                                                                                       //
!(function ($) {                                                                                                       // 1073
                                                                                                                       //
  function Timer(elem, options, cb) {                                                                                  // 1075
    var _this = this,                                                                                                  // 1076
        duration = options.duration,                                                                                   //
                                                                                                                       //
    //options is an object for easily adding features later.                                                           //
    nameSpace = Object.keys(elem.data())[0] || 'timer',                                                                // 1079
        remain = -1,                                                                                                   //
        start,                                                                                                         //
        timer;                                                                                                         //
                                                                                                                       //
    this.isPaused = false;                                                                                             // 1084
                                                                                                                       //
    this.restart = function () {                                                                                       // 1086
      remain = -1;                                                                                                     // 1087
      clearTimeout(timer);                                                                                             // 1088
      this.start();                                                                                                    // 1089
    };                                                                                                                 //
                                                                                                                       //
    this.start = function () {                                                                                         // 1092
      this.isPaused = false;                                                                                           // 1093
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.        //
      clearTimeout(timer);                                                                                             // 1095
      remain = remain <= 0 ? duration : remain;                                                                        // 1096
      elem.data('paused', false);                                                                                      // 1097
      start = Date.now();                                                                                              // 1098
      timer = setTimeout(function () {                                                                                 // 1099
        if (options.infinite) {                                                                                        // 1100
          _this.restart(); //rerun the timer.                                                                          // 1101
        }                                                                                                              //
        cb();                                                                                                          // 1103
      }, remain);                                                                                                      //
      elem.trigger('timerstart.zf.' + nameSpace);                                                                      // 1105
    };                                                                                                                 //
                                                                                                                       //
    this.pause = function () {                                                                                         // 1108
      this.isPaused = true;                                                                                            // 1109
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.          //
      clearTimeout(timer);                                                                                             // 1111
      elem.data('paused', true);                                                                                       // 1112
      var end = Date.now();                                                                                            // 1113
      remain = remain - (end - start);                                                                                 // 1114
      elem.trigger('timerpaused.zf.' + nameSpace);                                                                     // 1115
    };                                                                                                                 //
  }                                                                                                                    //
                                                                                                                       //
  /**                                                                                                                  //
   * Runs a callback function when images are fully loaded.                                                            //
   * @param {Object} images - Image(s) to check if loaded.                                                             //
   * @param {Func} callback - Function to execute when image is fully loaded.                                          //
   */                                                                                                                  //
  function onImagesLoaded(images, callback) {                                                                          // 1124
    var self = this,                                                                                                   // 1125
        unloaded = images.length;                                                                                      //
                                                                                                                       //
    if (unloaded === 0) {                                                                                              // 1128
      callback();                                                                                                      // 1129
    }                                                                                                                  //
                                                                                                                       //
    images.each(function () {                                                                                          // 1132
      if (this.complete) {                                                                                             // 1133
        singleImageLoaded();                                                                                           // 1134
      } else if (typeof this.naturalWidth !== 'undefined' && this.naturalWidth > 0) {                                  //
        singleImageLoaded();                                                                                           // 1136
      } else {                                                                                                         //
        $(this).one('load', function () {                                                                              // 1138
          singleImageLoaded();                                                                                         // 1139
        });                                                                                                            //
      }                                                                                                                //
    });                                                                                                                //
                                                                                                                       //
    function singleImageLoaded() {                                                                                     // 1144
      unloaded--;                                                                                                      // 1145
      if (unloaded === 0) {                                                                                            // 1146
        callback();                                                                                                    // 1147
      }                                                                                                                //
    }                                                                                                                  //
  }                                                                                                                    //
                                                                                                                       //
  Foundation.Timer = Timer;                                                                                            // 1152
  Foundation.onImagesLoaded = onImagesLoaded;                                                                          // 1153
})(jQuery);                                                                                                            //
//**************************************************                                                                   //
//**Work inspired by multiple jquery swipe plugins**                                                                   //
//**Done by Yohai Ararat ***************************                                                                   //
//**************************************************                                                                   //
(function ($) {                                                                                                        // 1159
                                                                                                                       //
  $.spotSwipe = {                                                                                                      // 1161
    version: '1.0.0',                                                                                                  // 1162
    enabled: 'ontouchstart' in document.documentElement,                                                               // 1163
    preventDefault: false,                                                                                             // 1164
    moveThreshold: 75,                                                                                                 // 1165
    timeThreshold: 200                                                                                                 // 1166
  };                                                                                                                   //
                                                                                                                       //
  var startPosX,                                                                                                       // 1169
      startPosY,                                                                                                       //
      startTime,                                                                                                       //
      elapsedTime,                                                                                                     //
      isMoving = false;                                                                                                //
                                                                                                                       //
  function onTouchEnd() {                                                                                              // 1175
    //  alert(this);                                                                                                   //
    this.removeEventListener('touchmove', onTouchMove);                                                                // 1177
    this.removeEventListener('touchend', onTouchEnd);                                                                  // 1178
    isMoving = false;                                                                                                  // 1179
  }                                                                                                                    //
                                                                                                                       //
  function onTouchMove(e) {                                                                                            // 1182
    if ($.spotSwipe.preventDefault) {                                                                                  // 1183
      e.preventDefault();                                                                                              // 1184
    }                                                                                                                  //
    if (isMoving) {                                                                                                    // 1186
      var x = e.touches[0].pageX;                                                                                      // 1187
      var y = e.touches[0].pageY;                                                                                      // 1188
      var dx = startPosX - x;                                                                                          // 1189
      var dy = startPosY - y;                                                                                          // 1190
      var dir;                                                                                                         // 1191
      elapsedTime = new Date().getTime() - startTime;                                                                  // 1192
      if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {                     // 1193
        dir = dx > 0 ? 'left' : 'right';                                                                               // 1194
      }                                                                                                                //
      // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {              //
      //   dir = dy > 0 ? 'down' : 'up';                                                                               //
      // }                                                                                                             //
      if (dir) {                                                                                                       // 1199
        e.preventDefault();                                                                                            // 1200
        onTouchEnd.call(this);                                                                                         // 1201
        $(this).trigger('swipe', dir).trigger('swipe' + dir);                                                          // 1202
      }                                                                                                                //
    }                                                                                                                  //
  }                                                                                                                    //
                                                                                                                       //
  function onTouchStart(e) {                                                                                           // 1207
    if (e.touches.length == 1) {                                                                                       // 1208
      startPosX = e.touches[0].pageX;                                                                                  // 1209
      startPosY = e.touches[0].pageY;                                                                                  // 1210
      isMoving = true;                                                                                                 // 1211
      startTime = new Date().getTime();                                                                                // 1212
      this.addEventListener('touchmove', onTouchMove, false);                                                          // 1213
      this.addEventListener('touchend', onTouchEnd, false);                                                            // 1214
    }                                                                                                                  //
  }                                                                                                                    //
                                                                                                                       //
  function init() {                                                                                                    // 1218
    this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);                                 // 1219
  }                                                                                                                    //
                                                                                                                       //
  function teardown() {                                                                                                // 1222
    this.removeEventListener('touchstart', onTouchStart);                                                              // 1223
  }                                                                                                                    //
                                                                                                                       //
  $.event.special.swipe = { setup: init };                                                                             // 1226
                                                                                                                       //
  $.each(['left', 'up', 'down', 'right'], function () {                                                                // 1228
    $.event.special['swipe' + this] = { setup: function () {                                                           // 1229
        $(this).on('swipe', $.noop);                                                                                   // 1230
      } };                                                                                                             //
  });                                                                                                                  //
})(jQuery);                                                                                                            //
/****************************************************                                                                  //
 * Method for adding psuedo drag events to elements *                                                                  //
 ***************************************************/                                                                  //
!(function ($) {                                                                                                       // 1237
  $.fn.addTouch = function () {                                                                                        // 1238
    this.each(function (i, el) {                                                                                       // 1239
      $(el).bind('touchstart touchmove touchend touchcancel', function () {                                            // 1240
        //we pass the original event object because the jQuery event                                                   //
        //object is normalized to w3c specs and does not provide the TouchList                                         //
        handleTouch(event);                                                                                            // 1243
      });                                                                                                              //
    });                                                                                                                //
                                                                                                                       //
    var handleTouch = function (event) {                                                                               // 1247
      var touches = event.changedTouches,                                                                              // 1248
          first = touches[0],                                                                                          //
          eventTypes = {                                                                                               //
        touchstart: 'mousedown',                                                                                       // 1251
        touchmove: 'mousemove',                                                                                        // 1252
        touchend: 'mouseup'                                                                                            // 1253
      },                                                                                                               //
          type = eventTypes[event.type],                                                                               //
          simulatedEvent;                                                                                              //
                                                                                                                       //
      if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {                                         // 1258
        simulatedEvent = window.MouseEvent(type, {                                                                     // 1259
          'bubbles': true,                                                                                             // 1260
          'cancelable': true,                                                                                          // 1261
          'screenX': first.screenX,                                                                                    // 1262
          'screenY': first.screenY,                                                                                    // 1263
          'clientX': first.clientX,                                                                                    // 1264
          'clientY': first.clientY                                                                                     // 1265
        });                                                                                                            //
      } else {                                                                                                         //
        simulatedEvent = document.createEvent('MouseEvent');                                                           // 1268
        simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0, /*left*/null);
      }                                                                                                                //
      first.target.dispatchEvent(simulatedEvent);                                                                      // 1271
    };                                                                                                                 //
  };                                                                                                                   //
})(jQuery);                                                                                                            //
                                                                                                                       //
//**********************************                                                                                   //
//**From the jQuery Mobile Library**                                                                                   //
//**need to recreate functionality**                                                                                   //
//**and try to improve if possible**                                                                                   //
//**********************************                                                                                   //
                                                                                                                       //
/* Removing the jQuery function ****                                                                                   //
************************************                                                                                   //
                                                                                                                       //
(function( $, window, undefined ) {                                                                                    //
                                                                                                                       //
	var $document = $( document ),                                                                                        //
		// supportTouch = $.mobile.support.touch,                                                                            //
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",                                           //
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",                                                  //
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";                                              //
                                                                                                                       //
	// setup new event shortcuts                                                                                          //
	$.each( ( "touchstart touchmove touchend " +                                                                          //
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {                                                   //
                                                                                                                       //
		$.fn[ name ] = function( fn ) {                                                                                      //
			return fn ? this.bind( name, fn ) : this.trigger( name );                                                           //
		};                                                                                                                   //
                                                                                                                       //
		// jQuery < 1.8                                                                                                      //
		if ( $.attrFn ) {                                                                                                    //
			$.attrFn[ name ] = true;                                                                                            //
		}                                                                                                                    //
	});                                                                                                                   //
                                                                                                                       //
	function triggerCustomEvent( obj, eventType, event, bubble ) {                                                        //
		var originalType = event.type;                                                                                       //
		event.type = eventType;                                                                                              //
		if ( bubble ) {                                                                                                      //
			$.event.trigger( event, undefined, obj );                                                                           //
		} else {                                                                                                             //
			$.event.dispatch.call( obj, event );                                                                                //
		}                                                                                                                    //
		event.type = originalType;                                                                                           //
	}                                                                                                                     //
                                                                                                                       //
	// also handles taphold                                                                                               //
                                                                                                                       //
	// Also handles swipeleft, swiperight                                                                                 //
	$.event.special.swipe = {                                                                                             //
                                                                                                                       //
		// More than this horizontal displacement, and we will suppress scrolling.                                           //
		scrollSupressionThreshold: 30,                                                                                       //
                                                                                                                       //
		// More time than this, and it isn't a swipe.                                                                        //
		durationThreshold: 1000,                                                                                             //
                                                                                                                       //
		// Swipe horizontal displacement must be more than this.                                                             //
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,                                                 //
                                                                                                                       //
		// Swipe vertical displacement must be less than this.                                                               //
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,                                                   //
                                                                                                                       //
		getLocation: function ( event ) {                                                                                    //
			var winPageX = window.pageXOffset,                                                                                  //
				winPageY = window.pageYOffset,                                                                                     //
				x = event.clientX,                                                                                                 //
				y = event.clientY;                                                                                                 //
                                                                                                                       //
			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||                                            //
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {                                               //
                                                                                                                       //
				// iOS4 clientX/clientY have the value that should have been                                                       //
				// in pageX/pageY. While pageX/page/ have the value 0                                                              //
				x = x - winPageX;                                                                                                  //
				y = y - winPageY;                                                                                                  //
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {                                     //
                                                                                                                       //
				// Some Android browsers have totally bogus values for clientX/Y                                                   //
				// when scrolling/zooming a page. Detectable since clientX/clientY                                                 //
				// should never be smaller than pageX/pageY minus page scroll                                                      //
				x = event.pageX - winPageX;                                                                                        //
				y = event.pageY - winPageY;                                                                                        //
			}                                                                                                                   //
                                                                                                                       //
			return {                                                                                                            //
				x: x,                                                                                                              //
				y: y                                                                                                               //
			};                                                                                                                  //
		},                                                                                                                   //
                                                                                                                       //
		start: function( event ) {                                                                                           //
			var data = event.originalEvent.touches ?                                                                            //
					event.originalEvent.touches[ 0 ] : event,                                                                         //
				location = $.event.special.swipe.getLocation( data );                                                              //
			return {                                                                                                            //
						time: ( new Date() ).getTime(),                                                                                  //
						coords: [ location.x, location.y ],                                                                              //
						origin: $( event.target )                                                                                        //
					};                                                                                                                //
		},                                                                                                                   //
                                                                                                                       //
		stop: function( event ) {                                                                                            //
			var data = event.originalEvent.touches ?                                                                            //
					event.originalEvent.touches[ 0 ] : event,                                                                         //
				location = $.event.special.swipe.getLocation( data );                                                              //
			return {                                                                                                            //
						time: ( new Date() ).getTime(),                                                                                  //
						coords: [ location.x, location.y ]                                                                               //
					};                                                                                                                //
		},                                                                                                                   //
                                                                                                                       //
		handleSwipe: function( start, stop, thisObject, origTarget ) {                                                       //
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&                                            //
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&            //
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {             //
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";                                   //
                                                                                                                       //
				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;                                                                                                       //
			}                                                                                                                   //
			return false;                                                                                                       //
                                                                                                                       //
		},                                                                                                                   //
                                                                                                                       //
		// This serves as a flag to ensure that at most one swipe event event is                                             //
		// in work at any given time                                                                                         //
		eventInProgress: false,                                                                                              //
                                                                                                                       //
		setup: function() {                                                                                                  //
			var events,                                                                                                         //
				thisObject = this,                                                                                                 //
				$this = $( thisObject ),                                                                                           //
				context = {};                                                                                                      //
                                                                                                                       //
			// Retrieve the events data for this element and add the swipe context                                              //
			events = $.data( this, "mobile-events" );                                                                           //
			if ( !events ) {                                                                                                    //
				events = { length: 0 };                                                                                            //
				$.data( this, "mobile-events", events );                                                                           //
			}                                                                                                                   //
			events.length++;                                                                                                    //
			events.swipe = context;                                                                                             //
                                                                                                                       //
			context.start = function( event ) {                                                                                 //
                                                                                                                       //
				// Bail if we're already working on a swipe event                                                                  //
				if ( $.event.special.swipe.eventInProgress ) {                                                                     //
					return;                                                                                                           //
				}                                                                                                                  //
				$.event.special.swipe.eventInProgress = true;                                                                      //
                                                                                                                       //
				var stop,                                                                                                          //
					start = $.event.special.swipe.start( event ),                                                                     //
					origTarget = event.target,                                                                                        //
					emitted = false;                                                                                                  //
                                                                                                                       //
				context.move = function( event ) {                                                                                 //
					if ( !start || event.isDefaultPrevented() ) {                                                                     //
						return;                                                                                                          //
					}                                                                                                                 //
                                                                                                                       //
					stop = $.event.special.swipe.stop( event );                                                                       //
					if ( !emitted ) {                                                                                                 //
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );                              //
						if ( emitted ) {                                                                                                 //
                                                                                                                       //
							// Reset the context to make way for the next swipe event                                                       //
							$.event.special.swipe.eventInProgress = false;                                                                  //
						}                                                                                                                //
					}                                                                                                                 //
					// prevent scrolling                                                                                              //
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {       //
						event.preventDefault();                                                                                          //
					}                                                                                                                 //
				};                                                                                                                 //
                                                                                                                       //
				context.stop = function() {                                                                                        //
						emitted = true;                                                                                                  //
                                                                                                                       //
						// Reset the context to make way for the next swipe event                                                        //
						$.event.special.swipe.eventInProgress = false;                                                                   //
						$document.off( touchMoveEvent, context.move );                                                                   //
						context.move = null;                                                                                             //
				};                                                                                                                 //
                                                                                                                       //
				$document.on( touchMoveEvent, context.move )                                                                       //
					.one( touchStopEvent, context.stop );                                                                             //
			};                                                                                                                  //
			$this.on( touchStartEvent, context.start );                                                                         //
		},                                                                                                                   //
                                                                                                                       //
		teardown: function() {                                                                                               //
			var events, context;                                                                                                //
                                                                                                                       //
			events = $.data( this, "mobile-events" );                                                                           //
			if ( events ) {                                                                                                     //
				context = events.swipe;                                                                                            //
				delete events.swipe;                                                                                               //
				events.length--;                                                                                                   //
				if ( events.length === 0 ) {                                                                                       //
					$.removeData( this, "mobile-events" );                                                                            //
				}                                                                                                                  //
			}                                                                                                                   //
                                                                                                                       //
			if ( context ) {                                                                                                    //
				if ( context.start ) {                                                                                             //
					$( this ).off( touchStartEvent, context.start );                                                                  //
				}                                                                                                                  //
				if ( context.move ) {                                                                                              //
					$document.off( touchMoveEvent, context.move );                                                                    //
				}                                                                                                                  //
				if ( context.stop ) {                                                                                              //
					$document.off( touchStopEvent, context.stop );                                                                    //
				}                                                                                                                  //
			}                                                                                                                   //
		}                                                                                                                    //
	};                                                                                                                    //
	$.each({                                                                                                              //
		swipeleft: "swipe.left",                                                                                             //
		swiperight: "swipe.right"                                                                                            //
	}, function( event, sourceEvent ) {                                                                                   //
                                                                                                                       //
		$.event.special[ event ] = {                                                                                         //
			setup: function() {                                                                                                 //
				$( this ).bind( sourceEvent, $.noop );                                                                             //
			},                                                                                                                  //
			teardown: function() {                                                                                              //
				$( this ).unbind( sourceEvent );                                                                                   //
			}                                                                                                                   //
		};                                                                                                                   //
	});                                                                                                                   //
})( jQuery, this );                                                                                                    //
*/                                                                                                                     //
'use strict';                                                                                                          // 1507
                                                                                                                       //
!(function ($) {                                                                                                       // 1509
                                                                                                                       //
  var MutationObserver = (function () {                                                                                // 1511
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];                                                                   // 1512
    for (var i = 0; i < prefixes.length; i++) {                                                                        // 1513
      if (prefixes[i] + 'MutationObserver' in window) {                                                                // 1514
        return window[prefixes[i] + 'MutationObserver'];                                                               // 1515
      }                                                                                                                //
    }                                                                                                                  //
    return false;                                                                                                      // 1518
  })();                                                                                                                //
                                                                                                                       //
  var triggers = function (el, type) {                                                                                 // 1521
    el.data(type).split(' ').forEach(function (id) {                                                                   // 1522
      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);                        // 1523
    });                                                                                                                //
  };                                                                                                                   //
  // Elements with [data-open] will reveal a plugin that supports it when clicked.                                     //
  $(document).on('click.zf.trigger', '[data-open]', function () {                                                      // 1527
    triggers($(this), 'open');                                                                                         // 1528
  });                                                                                                                  //
                                                                                                                       //
  // Elements with [data-close] will close a plugin that supports it when clicked.                                     //
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.          //
  $(document).on('click.zf.trigger', '[data-close]', function () {                                                     // 1533
    var id = $(this).data('close');                                                                                    // 1534
    if (id) {                                                                                                          // 1535
      triggers($(this), 'close');                                                                                      // 1536
    } else {                                                                                                           //
      $(this).trigger('close.zf.trigger');                                                                             // 1538
    }                                                                                                                  //
  });                                                                                                                  //
                                                                                                                       //
  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.                                   //
  $(document).on('click.zf.trigger', '[data-toggle]', function () {                                                    // 1543
    triggers($(this), 'toggle');                                                                                       // 1544
  });                                                                                                                  //
                                                                                                                       //
  // Elements with [data-closable] will respond to close.zf.trigger events.                                            //
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {                                                 // 1548
    e.stopPropagation();                                                                                               // 1549
    var animation = $(this).data('closable');                                                                          // 1550
                                                                                                                       //
    if (animation !== '') {                                                                                            // 1552
      Foundation.Motion.animateOut($(this), animation, function () {                                                   // 1553
        $(this).trigger('closed.zf');                                                                                  // 1554
      });                                                                                                              //
    } else {                                                                                                           //
      $(this).fadeOut().trigger('closed.zf');                                                                          // 1557
    }                                                                                                                  //
  });                                                                                                                  //
                                                                                                                       //
  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {                              // 1561
    var id = $(this).data('toggle-focus');                                                                             // 1562
    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);                                                        // 1563
  });                                                                                                                  //
                                                                                                                       //
  /**                                                                                                                  //
  * Fires once after all other scripts have loaded                                                                     //
  * @function                                                                                                          //
  * @private                                                                                                           //
  */                                                                                                                   //
  $(window).load(function () {                                                                                         // 1571
    checkListeners();                                                                                                  // 1572
  });                                                                                                                  //
                                                                                                                       //
  function checkListeners() {                                                                                          // 1575
    eventsListener();                                                                                                  // 1576
    resizeListener();                                                                                                  // 1577
    scrollListener();                                                                                                  // 1578
    closemeListener();                                                                                                 // 1579
  }                                                                                                                    //
                                                                                                                       //
  //******** only fires this function once on load, if there's something to watch ********                             //
  function closemeListener(pluginName) {                                                                               // 1583
    var yetiBoxes = $('[data-yeti-box]'),                                                                              // 1584
        plugNames = ['dropdown', 'tooltip', 'reveal'];                                                                 //
                                                                                                                       //
    if (pluginName) {                                                                                                  // 1587
      if (typeof pluginName === 'string') {                                                                            // 1588
        plugNames.push(pluginName);                                                                                    // 1589
      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {                                //
        plugNames.concat(pluginName);                                                                                  // 1591
      } else {                                                                                                         //
        console.error('Plugin names must be strings');                                                                 // 1593
      }                                                                                                                //
    }                                                                                                                  //
    if (yetiBoxes.length) {                                                                                            // 1596
      var listeners = plugNames.map(function (name) {                                                                  // 1597
        return 'closeme.zf.' + name;                                                                                   // 1598
      }).join(' ');                                                                                                    //
                                                                                                                       //
      $(window).off(listeners).on(listeners, function (e, pluginId) {                                                  // 1601
        var plugin = e.namespace.split('.')[0];                                                                        // 1602
        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');                            // 1603
                                                                                                                       //
        plugins.each(function () {                                                                                     // 1605
          var _this = $(this);                                                                                         // 1606
                                                                                                                       //
          _this.triggerHandler('close.zf.trigger', [_this]);                                                           // 1608
        });                                                                                                            //
      });                                                                                                              //
    }                                                                                                                  //
  }                                                                                                                    //
                                                                                                                       //
  function resizeListener(debounce) {                                                                                  // 1614
    var timer = undefined,                                                                                             // 1615
        $nodes = $('[data-resize]');                                                                                   //
    if ($nodes.length) {                                                                                               // 1617
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {                                        // 1618
        if (timer) {                                                                                                   // 1619
          clearTimeout(timer);                                                                                         // 1620
        }                                                                                                              //
                                                                                                                       //
        timer = setTimeout(function () {                                                                               // 1623
                                                                                                                       //
          if (!MutationObserver) {                                                                                     // 1625
            //fallback for IE 9                                                                                        //
            $nodes.each(function () {                                                                                  // 1627
              $(this).triggerHandler('resizeme.zf.trigger');                                                           // 1628
            });                                                                                                        //
          }                                                                                                            //
          //trigger all listening elements and signal a resize event                                                   //
          $nodes.attr('data-events', "resize");                                                                        // 1632
        }, debounce || 10); //default time to emit resize event                                                        //
      });                                                                                                              //
    }                                                                                                                  //
  }                                                                                                                    //
                                                                                                                       //
  function scrollListener(debounce) {                                                                                  // 1638
    var timer = undefined,                                                                                             // 1639
        $nodes = $('[data-scroll]');                                                                                   //
    if ($nodes.length) {                                                                                               // 1641
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {                                        // 1642
        if (timer) {                                                                                                   // 1643
          clearTimeout(timer);                                                                                         // 1644
        }                                                                                                              //
                                                                                                                       //
        timer = setTimeout(function () {                                                                               // 1647
                                                                                                                       //
          if (!MutationObserver) {                                                                                     // 1649
            //fallback for IE 9                                                                                        //
            $nodes.each(function () {                                                                                  // 1651
              $(this).triggerHandler('scrollme.zf.trigger');                                                           // 1652
            });                                                                                                        //
          }                                                                                                            //
          //trigger all listening elements and signal a scroll event                                                   //
          $nodes.attr('data-events', "scroll");                                                                        // 1656
        }, debounce || 10); //default time to emit scroll event                                                        //
      });                                                                                                              //
    }                                                                                                                  //
  }                                                                                                                    //
                                                                                                                       //
  function eventsListener() {                                                                                          // 1662
    if (!MutationObserver) {                                                                                           // 1663
      return false;                                                                                                    // 1664
    }                                                                                                                  //
    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');                              // 1666
                                                                                                                       //
    //element callback                                                                                                 //
    var listeningElementsMutation = function (mutationRecordsList) {                                                   // 1669
      var $target = $(mutationRecordsList[0].target);                                                                  // 1670
      //trigger the event handler for the element depending on type                                                    //
      switch ($target.attr("data-events")) {                                                                           // 1672
                                                                                                                       //
        case "resize":                                                                                                 // 1674
          $target.triggerHandler('resizeme.zf.trigger', [$target]);                                                    // 1675
          break;                                                                                                       // 1676
                                                                                                                       //
        case "scroll":                                                                                                 // 1676
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);                                // 1679
          break;                                                                                                       // 1680
                                                                                                                       //
        // case "mutate" :                                                                                             // 1680
        // console.log('mutate', $target);                                                                             //
        // $target.triggerHandler('mutate.zf.trigger');                                                                //
        //                                                                                                             //
        // //make sure we don't get stuck in an infinite loop from sloppy codeing                                      //
        // if ($target.index('[data-mutate]') == $("[data-mutate]").length-1) {                                        //
        //   domMutationObserver();                                                                                    //
        // }                                                                                                           //
        // break;                                                                                                      //
                                                                                                                       //
        default:                                                                                                       // 1692
          return false;                                                                                                // 1693
        //nothing                                                                                                      // 1693
      }                                                                                                                //
    };                                                                                                                 //
                                                                                                                       //
    if (nodes.length) {                                                                                                // 1698
      //for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {                                                                    // 1700
        var elementObserver = new MutationObserver(listeningElementsMutation);                                         // 1701
        elementObserver.observe(nodes[i], { attributes: true, childList: false, characterData: false, subtree: false, attributeFilter: ["data-events"] });
      }                                                                                                                //
    }                                                                                                                  //
  }                                                                                                                    //
                                                                                                                       //
  // ------------------------------------                                                                              //
                                                                                                                       //
  // [PH]                                                                                                              //
  // Foundation.CheckWatchers = checkWatchers;                                                                         //
  Foundation.IHearYou = checkListeners;                                                                                // 1711
  // Foundation.ISeeYou = scrollListener;                                                                              //
  // Foundation.IFeelYou = closemeListener;                                                                            //
})(jQuery);                                                                                                            //
                                                                                                                       //
// function domMutationObserver(debounce) {                                                                            //
//   // !!! This is coming soon and needs more work; not active  !!! //                                                //
//   var timer,                                                                                                        //
//   nodes = document.querySelectorAll('[data-mutate]');                                                               //
//   //                                                                                                                //
//   if (nodes.length) {                                                                                               //
//     // var MutationObserver = (function () {                                                                        //
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];                                                           //
//     //   for (var i=0; i < prefixes.length; i++) {                                                                  //
//     //     if (prefixes[i] + 'MutationObserver' in window) {                                                        //
//     //       return window[prefixes[i] + 'MutationObserver'];                                                       //
//     //     }                                                                                                        //
//     //   }                                                                                                          //
//     //   return false;                                                                                              //
//     // }());                                                                                                        //
//                                                                                                                     //
//                                                                                                                     //
//     //for the body, we need to listen for all changes effecting the style and class attributes                      //
//     var bodyObserver = new MutationObserver(bodyMutation);                                                          //
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//                                                                                                                     //
//                                                                                                                     //
//     //body callback                                                                                                 //
//     function bodyMutation(mutate) {                                                                                 //
//       //trigger all listening elements and signal a mutation event                                                  //
//       if (timer) { clearTimeout(timer); }                                                                           //
//                                                                                                                     //
//       timer = setTimeout(function() {                                                                               //
//         bodyObserver.disconnect();                                                                                  //
//         $('[data-mutate]').attr('data-events',"mutate");                                                            //
//       }, debounce || 150);                                                                                          //
//     }                                                                                                               //
//   }                                                                                                                 //
// }                                                                                                                   //
'use strict';                                                                                                          // 1750
                                                                                                                       //
var _createClass = (function () {                                                                                      // 1752
  function defineProperties(target, props) {                                                                           // 1752
    for (var i = 0; i < props.length; i++) {                                                                           // 1752
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 1754
  if (!(instance instanceof Constructor)) {                                                                            // 1754
    throw new TypeError("Cannot call a class as a function");                                                          // 1754
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 1756
                                                                                                                       //
  /**                                                                                                                  //
   * Abide module.                                                                                                     //
   * @module foundation.abide                                                                                          //
   */                                                                                                                  //
                                                                                                                       //
  var Abide = (function () {                                                                                           // 1763
    /**                                                                                                                //
     * Creates a new instance of Abide.                                                                                //
     * @class                                                                                                          //
     * @fires Abide#init                                                                                               //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Abide(element) {                                                                                          // 1772
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                           // 1773
                                                                                                                       //
      _classCallCheck(this, Abide);                                                                                    // 1775
                                                                                                                       //
      this.$element = element;                                                                                         // 1777
      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);                                      // 1778
                                                                                                                       //
      this._init();                                                                                                    // 1780
                                                                                                                       //
      Foundation.registerPlugin(this, 'Abide');                                                                        // 1782
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.                              //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Abide, [{                                                                                             // 1791
      key: '_init',                                                                                                    // 1792
      value: (function () {                                                                                            // 1793
        function _init() {                                                                                             // 1793
          this.$inputs = this.$element.find('input, textarea, select').not('[data-abide-ignore]');                     // 1794
                                                                                                                       //
          this._events();                                                                                              // 1796
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for Abide.                                                                                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 1805
      value: (function () {                                                                                            // 1806
        function _events() {                                                                                           // 1806
          var _this2 = this;                                                                                           // 1807
                                                                                                                       //
          this.$element.off('.abide').on('reset.zf.abide', function () {                                               // 1809
            _this2.resetForm();                                                                                        // 1810
          }).on('submit.zf.abide', function () {                                                                       //
            return _this2.validateForm();                                                                              // 1812
          });                                                                                                          //
                                                                                                                       //
          if (this.options.validateOn === 'fieldChange') {                                                             // 1815
            this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {                                   // 1816
              _this2.validateInput($(e.target));                                                                       // 1817
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          if (this.options.liveValidate) {                                                                             // 1821
            this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {                                     // 1822
              _this2.validateInput($(e.target));                                                                       // 1823
            });                                                                                                        //
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Calls necessary functions to update Abide upon DOM change                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_reflow',                                                                                                  // 1834
      value: (function () {                                                                                            // 1835
        function _reflow() {                                                                                           // 1835
          this._init();                                                                                                // 1836
        }                                                                                                              //
                                                                                                                       //
        return _reflow;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Checks whether or not a form element has the required attribute and if it's checked or not                    //
       * @param {Object} element - jQuery object to check for required attribute                                       //
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'requiredCheck',                                                                                            // 1846
      value: (function () {                                                                                            // 1847
        function requiredCheck($el) {                                                                                  // 1847
          if (!$el.attr('required')) return true;                                                                      // 1848
                                                                                                                       //
          var isGood = true;                                                                                           // 1850
                                                                                                                       //
          switch ($el[0].type) {                                                                                       // 1852
            case 'checkbox':                                                                                           // 1853
            case 'radio':                                                                                              // 1854
              isGood = $el[0].checked;                                                                                 // 1855
              break;                                                                                                   // 1856
                                                                                                                       //
            case 'select':                                                                                             // 1858
            case 'select-one':                                                                                         // 1859
            case 'select-multiple':                                                                                    // 1860
              var opt = $el.find('option:selected');                                                                   // 1861
              if (!opt.length || !opt.val()) isGood = false;                                                           // 1862
              break;                                                                                                   // 1863
                                                                                                                       //
            default:                                                                                                   // 1863
              if (!$el.val() || !$el.val().length) isGood = false;                                                     // 1866
          }                                                                                                            // 1866
                                                                                                                       //
          return isGood;                                                                                               // 1869
        }                                                                                                              //
                                                                                                                       //
        return requiredCheck;                                                                                          //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Based on $el, get the first element with selector in this order:                                              //
       * 1. The element's direct sibling('s).                                                                          //
       * 3. The element's parent's children.                                                                           //
       *                                                                                                               //
       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.       //
       *                                                                                                               //
       * @param {Object} $el - jQuery object to use as reference to find the form error selector.                      //
       * @returns {Object} jQuery object with the selector.                                                            //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'findFormError',                                                                                            // 1884
      value: (function () {                                                                                            // 1885
        function findFormError($el) {                                                                                  // 1885
          var $error = $el.siblings(this.options.formErrorSelector);                                                   // 1886
                                                                                                                       //
          if (!$error.length) {                                                                                        // 1888
            $error = $el.parent().find(this.options.formErrorSelector);                                                // 1889
          }                                                                                                            //
                                                                                                                       //
          return $error;                                                                                               // 1892
        }                                                                                                              //
                                                                                                                       //
        return findFormError;                                                                                          //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Get the first element in this order:                                                                          //
       * 2. The <label> with the attribute `[for="someInputId"]`                                                       //
       * 3. The `.closest()` <label>                                                                                   //
       *                                                                                                               //
       * @param {Object} $el - jQuery object to check for required attribute                                           //
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'findLabel',                                                                                                // 1905
      value: (function () {                                                                                            // 1906
        function findLabel($el) {                                                                                      // 1906
          var id = $el[0].id;                                                                                          // 1907
          var $label = this.$element.find('label[for="' + id + '"]');                                                  // 1908
                                                                                                                       //
          if (!$label.length) {                                                                                        // 1910
            return $el.closest('label');                                                                               // 1911
          }                                                                                                            //
                                                                                                                       //
          return $label;                                                                                               // 1914
        }                                                                                                              //
                                                                                                                       //
        return findLabel;                                                                                              //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form                 //
       * @param {Object} $el - jQuery object to add the class to                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'addErrorClasses',                                                                                          // 1923
      value: (function () {                                                                                            // 1924
        function addErrorClasses($el) {                                                                                // 1924
          var $label = this.findLabel($el);                                                                            // 1925
          var $formError = this.findFormError($el);                                                                    // 1926
                                                                                                                       //
          if ($label.length) {                                                                                         // 1928
            $label.addClass(this.options.labelErrorClass);                                                             // 1929
          }                                                                                                            //
                                                                                                                       //
          if ($formError.length) {                                                                                     // 1932
            $formError.addClass(this.options.formErrorClass);                                                          // 1933
          }                                                                                                            //
                                                                                                                       //
          $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');                                         // 1936
        }                                                                                                              //
                                                                                                                       //
        return addErrorClasses;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Removes CSS error class as specified by the Abide settings from the label, input, and the form                //
       * @param {Object} $el - jQuery object to remove the class from                                                  //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'removeErrorClasses',                                                                                       // 1945
      value: (function () {                                                                                            // 1946
        function removeErrorClasses($el) {                                                                             // 1946
          var $label = this.findLabel($el);                                                                            // 1947
          var $formError = this.findFormError($el);                                                                    // 1948
                                                                                                                       //
          if ($label.length) {                                                                                         // 1950
            $label.removeClass(this.options.labelErrorClass);                                                          // 1951
          }                                                                                                            //
                                                                                                                       //
          if ($formError.length) {                                                                                     // 1954
            $formError.removeClass(this.options.formErrorClass);                                                       // 1955
          }                                                                                                            //
                                                                                                                       //
          $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');                                    // 1958
        }                                                                                                              //
                                                                                                                       //
        return removeErrorClasses;                                                                                     //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type               //
       * @fires Abide#invalid                                                                                          //
       * @fires Abide#valid                                                                                            //
       * @param {Object} element - jQuery object to validate, should be an HTML input                                  //
       * @returns {Boolean} goodToGo - If the input is valid or not.                                                   //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'validateInput',                                                                                            // 1970
      value: (function () {                                                                                            // 1971
        function validateInput($el) {                                                                                  // 1971
          var clearRequire = this.requiredCheck($el),                                                                  // 1972
              validated = false,                                                                                       //
              customValidator = true,                                                                                  //
              validator = $el.attr('data-validator'),                                                                  //
              equalTo = true;                                                                                          //
                                                                                                                       //
          switch ($el[0].type) {                                                                                       // 1978
            case 'radio':                                                                                              // 1979
              validated = this.validateRadio($el.attr('name'));                                                        // 1980
              break;                                                                                                   // 1981
                                                                                                                       //
            case 'checkbox':                                                                                           // 1981
              validated = clearRequire;                                                                                // 1984
              break;                                                                                                   // 1985
                                                                                                                       //
            case 'select':                                                                                             // 1987
            case 'select-one':                                                                                         // 1988
            case 'select-multiple':                                                                                    // 1989
              validated = clearRequire;                                                                                // 1990
              break;                                                                                                   // 1991
                                                                                                                       //
            default:                                                                                                   // 1993
              validated = this.validateText($el);                                                                      // 1994
          }                                                                                                            // 1994
                                                                                                                       //
          if (validator) {                                                                                             // 1997
            customValidator = this.matchValidation($el, validator, $el.attr('required'));                              // 1998
          }                                                                                                            //
                                                                                                                       //
          if ($el.attr('data-equalto')) {                                                                              // 2001
            equalTo = this.options.validators.equalTo($el);                                                            // 2002
          }                                                                                                            //
                                                                                                                       //
          var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;                    // 2005
          var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';                                                // 2006
                                                                                                                       //
          this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);                                              // 2008
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
           * Trigger includes the DOM element of the input.                                                            //
           * @event Abide#valid                                                                                        //
           * @event Abide#invalid                                                                                      //
           */                                                                                                          //
          $el.trigger(message, [$el]);                                                                                 // 2016
                                                                                                                       //
          return goodToGo;                                                                                             // 2018
        }                                                                                                              //
                                                                                                                       //
        return validateInput;                                                                                          //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Goes through a form and if there are any invalid inputs, it will display the form error element               //
       * @returns {Boolean} noError - true if no errors were detected...                                               //
       * @fires Abide#formvalid                                                                                        //
       * @fires Abide#forminvalid                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'validateForm',                                                                                             // 2029
      value: (function () {                                                                                            // 2030
        function validateForm() {                                                                                      // 2030
          var acc = [];                                                                                                // 2031
          var _this = this;                                                                                            // 2032
                                                                                                                       //
          this.$inputs.each(function () {                                                                              // 2034
            acc.push(_this.validateInput($(this)));                                                                    // 2035
          });                                                                                                          //
                                                                                                                       //
          var noError = acc.indexOf(false) === -1;                                                                     // 2038
                                                                                                                       //
          this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');                         // 2040
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
           * Trigger includes the element of the form.                                                                 //
           * @event Abide#formvalid                                                                                    //
           * @event Abide#forminvalid                                                                                  //
           */                                                                                                          //
          this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);               // 2048
                                                                                                                       //
          return noError;                                                                                              // 2050
        }                                                                                                              //
                                                                                                                       //
        return validateForm;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
       * @param {Object} $el - jQuery object to validate, should be a text input HTML element                          //
       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns                 //
       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'validateText',                                                                                             // 2061
      value: (function () {                                                                                            // 2062
        function validateText($el, pattern) {                                                                          // 2062
          // pattern = pattern ? pattern : $el.attr('pattern') ? $el.attr('pattern') : $el.attr('type');               //
          pattern = pattern || $el.attr('pattern') || $el.attr('type');                                                // 2064
          var inputText = $el.val();                                                                                   // 2065
                                                                                                                       //
          // if text, check if the pattern exists, if so, test it, if no text or no pattern, return true.              //
          return inputText.length ? this.options.patterns.hasOwnProperty(pattern) ? this.options.patterns[pattern].test(inputText) : pattern && pattern !== $el.attr('type') ? new RegExp(pattern).test(inputText) : true : true;
        }                                                                                                              //
                                                                                                                       //
        return validateText;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Determines whether or a not a radio input is valid based on whether or not it is required and selected        //
       * @param {String} groupName - A string that specifies the name of a radio button group                          //
       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'validateRadio',                                                                                            // 2078
      value: (function () {                                                                                            // 2079
        function validateRadio(groupName) {                                                                            // 2079
          var $group = this.$element.find(':radio[name="' + groupName + '"]'),                                         // 2080
              counter = [],                                                                                            //
              _this = this;                                                                                            //
                                                                                                                       //
          $group.each(function () {                                                                                    // 2084
            var rdio = $(this),                                                                                        // 2085
                clear = _this.requiredCheck(rdio);                                                                     //
            counter.push(clear);                                                                                       // 2087
            if (clear) _this.removeErrorClasses(rdio);                                                                 // 2088
          });                                                                                                          //
                                                                                                                       //
          return counter.indexOf(false) === -1;                                                                        // 2091
        }                                                                                                              //
                                                                                                                       //
        return validateRadio;                                                                                          //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
       * @param {Object} $el - jQuery input element.                                                                   //
       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
       * @param {Boolean} required - self explanatory?                                                                 //
       * @returns {Boolean} - true if validations passed.                                                              //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'matchValidation',                                                                                          // 2103
      value: (function () {                                                                                            // 2104
        function matchValidation($el, validators, required) {                                                          // 2104
          var _this3 = this;                                                                                           // 2105
                                                                                                                       //
          required = required ? true : false;                                                                          // 2107
                                                                                                                       //
          var clear = validators.split(' ').map(function (v) {                                                         // 2109
            return _this3.options.validators[v]($el, required, $el.parent());                                          // 2110
          });                                                                                                          //
          return clear.indexOf(false) === -1;                                                                          // 2112
        }                                                                                                              //
                                                                                                                       //
        return matchValidation;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Resets form inputs and styles                                                                                 //
       * @fires Abide#formreset                                                                                        //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'resetForm',                                                                                                // 2121
      value: (function () {                                                                                            // 2122
        function resetForm() {                                                                                         // 2122
          var $form = this.$element,                                                                                   // 2123
              opts = this.options;                                                                                     //
                                                                                                                       //
          $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);                         // 2126
          $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);                         // 2127
          $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);                      // 2128
          $form.find('[data-abide-error]').css('display', 'none');                                                     // 2129
          $(':input', $form).not(':button, :submit, :reset, :hidden, [data-abide-ignore]').val('').removeAttr('data-invalid');
          /**                                                                                                          //
           * Fires when the form has been reset.                                                                       //
           * @event Abide#formreset                                                                                    //
           */                                                                                                          //
          $form.trigger('formreset.zf.abide', [$form]);                                                                // 2135
        }                                                                                                              //
                                                                                                                       //
        return resetForm;                                                                                              //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of Abide.                                                                                //
       * Removes error styles and classes from elements, without resetting their values.                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 2144
      value: (function () {                                                                                            // 2145
        function destroy() {                                                                                           // 2145
          var _this = this;                                                                                            // 2146
          this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');                               // 2147
                                                                                                                       //
          this.$inputs.off('.abide').each(function () {                                                                // 2149
            _this.removeErrorClasses($(this));                                                                         // 2150
          });                                                                                                          //
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 2153
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Abide;                                                                                                      // 2157
  })();                                                                                                                //
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  Abide.defaults = {                                                                                                   // 2165
    /**                                                                                                                //
     * The default event to validate inputs. Checkboxes and radios validate immediately.                               //
     * Remove or change this value for manual validation.                                                              //
     * @option                                                                                                         //
     * @example 'fieldChange'                                                                                          //
     */                                                                                                                //
    validateOn: 'fieldChange',                                                                                         // 2172
                                                                                                                       //
    /**                                                                                                                //
     * Class to be applied to input labels on failed validation.                                                       //
     * @option                                                                                                         //
     * @example 'is-invalid-label'                                                                                     //
     */                                                                                                                //
    labelErrorClass: 'is-invalid-label',                                                                               // 2179
                                                                                                                       //
    /**                                                                                                                //
     * Class to be applied to inputs on failed validation.                                                             //
     * @option                                                                                                         //
     * @example 'is-invalid-input'                                                                                     //
     */                                                                                                                //
    inputErrorClass: 'is-invalid-input',                                                                               // 2186
                                                                                                                       //
    /**                                                                                                                //
     * Class selector to use to target Form Errors for show/hide.                                                      //
     * @option                                                                                                         //
     * @example '.form-error'                                                                                          //
     */                                                                                                                //
    formErrorSelector: '.form-error',                                                                                  // 2193
                                                                                                                       //
    /**                                                                                                                //
     * Class added to Form Errors on failed validation.                                                                //
     * @option                                                                                                         //
     * @example 'is-visible'                                                                                           //
     */                                                                                                                //
    formErrorClass: 'is-visible',                                                                                      // 2200
                                                                                                                       //
    /**                                                                                                                //
     * Set to true to validate text inputs on any value change.                                                        //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    liveValidate: false,                                                                                               // 2207
                                                                                                                       //
    patterns: {                                                                                                        // 2209
      alpha: /^[a-zA-Z]+$/,                                                                                            // 2210
      alpha_numeric: /^[a-zA-Z0-9]+$/,                                                                                 // 2211
      integer: /^[-+]?\d+$/,                                                                                           // 2212
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,                                                                              // 2213
                                                                                                                       //
      // amex, visa, diners                                                                                            //
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,                                                                                           // 2217
                                                                                                                       //
      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,
                                                                                                                       //
      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de                                                                                                        //
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,                                      // 2224
                                                                                                                       //
      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD                                                                                                    //
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS                                                                                                      //
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,                                                                // 2230
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,                                                                    // 2231
      // MM/DD/YYYY                                                                                                    //
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,                                  // 2233
      // DD/MM/YYYY                                                                                                    //
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,                                  // 2235
                                                                                                                       //
      // #FFF or #FFFFFF                                                                                               //
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/                                                                     // 2238
    },                                                                                                                 //
                                                                                                                       //
    /**                                                                                                                //
     * Optional validation functions to be used. `equalTo` being the only default included function.                   //
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.                                                                            //
     * required : Boolean value of the required attribute be present or not.                                           //
     * parent : The direct parent of the input.                                                                        //
     * @option                                                                                                         //
     */                                                                                                                //
    validators: {                                                                                                      // 2249
      equalTo: function (el, required, parent) {                                                                       // 2250
        return $('#' + el.attr('data-equalto')).val() === el.val();                                                    // 2251
      }                                                                                                                //
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Abide, 'Abide');                                                                                   // 2257
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 2259
                                                                                                                       //
var _createClass = (function () {                                                                                      // 2261
  function defineProperties(target, props) {                                                                           // 2261
    for (var i = 0; i < props.length; i++) {                                                                           // 2261
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 2263
  if (!(instance instanceof Constructor)) {                                                                            // 2263
    throw new TypeError("Cannot call a class as a function");                                                          // 2263
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 2265
                                                                                                                       //
  /**                                                                                                                  //
   * Accordion module.                                                                                                 //
   * @module foundation.accordion                                                                                      //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.motion                                                                                  //
   */                                                                                                                  //
                                                                                                                       //
  var Accordion = (function () {                                                                                       // 2274
    /**                                                                                                                //
     * Creates a new instance of an accordion.                                                                         //
     * @class                                                                                                          //
     * @fires Accordion#init                                                                                           //
     * @param {jQuery} element - jQuery object to make into an accordion.                                              //
     * @param {Object} options - a plain object with settings to override the default options.                         //
     */                                                                                                                //
                                                                                                                       //
    function Accordion(element, options) {                                                                             // 2283
      _classCallCheck(this, Accordion);                                                                                // 2284
                                                                                                                       //
      this.$element = element;                                                                                         // 2286
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);                                  // 2287
                                                                                                                       //
      this._init();                                                                                                    // 2289
                                                                                                                       //
      Foundation.registerPlugin(this, 'Accordion');                                                                    // 2291
      Foundation.Keyboard.register('Accordion', {                                                                      // 2292
        'ENTER': 'toggle',                                                                                             // 2293
        'SPACE': 'toggle',                                                                                             // 2294
        'ARROW_DOWN': 'next',                                                                                          // 2295
        'ARROW_UP': 'previous'                                                                                         // 2296
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the accordion by animating the preset active pane(s).                                               //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Accordion, [{                                                                                         // 2306
      key: '_init',                                                                                                    // 2307
      value: (function () {                                                                                            // 2308
        function _init() {                                                                                             // 2308
          this.$element.attr('role', 'tablist');                                                                       // 2309
          this.$tabs = this.$element.children('li');                                                                   // 2310
          if (this.$tabs.length === 0) {                                                                               // 2311
            this.$tabs = this.$element.children('[data-accordion-item]');                                              // 2312
          }                                                                                                            //
          this.$tabs.each(function (idx, el) {                                                                         // 2314
                                                                                                                       //
            var $el = $(el),                                                                                           // 2316
                $content = $el.find('[data-tab-content]'),                                                             //
                id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),                                         //
                linkId = el.id || id + '-label';                                                                       //
                                                                                                                       //
            $el.find('a:first').attr({                                                                                 // 2321
              'aria-controls': id,                                                                                     // 2322
              'role': 'tab',                                                                                           // 2323
              'id': linkId,                                                                                            // 2324
              'aria-expanded': false,                                                                                  // 2325
              'aria-selected': false                                                                                   // 2326
            });                                                                                                        //
            $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });           // 2328
          });                                                                                                          //
          var $initActive = this.$element.find('.is-active').children('[data-tab-content]');                           // 2330
          if ($initActive.length) {                                                                                    // 2331
            this.down($initActive, true);                                                                              // 2332
          }                                                                                                            //
          this._events();                                                                                              // 2334
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for items within the accordion.                                                           //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 2343
      value: (function () {                                                                                            // 2344
        function _events() {                                                                                           // 2344
          var _this = this;                                                                                            // 2345
                                                                                                                       //
          this.$tabs.each(function () {                                                                                // 2347
            var $elem = $(this);                                                                                       // 2348
            var $tabContent = $elem.children('[data-tab-content]');                                                    // 2349
            if ($tabContent.length) {                                                                                  // 2350
              $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
                // $(this).children('a').on('click.zf.accordion', function(e) {                                        //
                e.preventDefault();                                                                                    // 2353
                if ($elem.hasClass('is-active')) {                                                                     // 2354
                  if (_this.options.allowAllClosed || $elem.siblings().hasClass('is-active')) {                        // 2355
                    _this.up($tabContent);                                                                             // 2356
                  }                                                                                                    //
                } else {                                                                                               //
                  _this.down($tabContent);                                                                             // 2359
                }                                                                                                      //
              }).on('keydown.zf.accordion', function (e) {                                                             //
                Foundation.Keyboard.handleKey(e, 'Accordion', {                                                        // 2362
                  toggle: function () {                                                                                // 2363
                    _this.toggle($tabContent);                                                                         // 2364
                  },                                                                                                   //
                  next: function () {                                                                                  // 2366
                    $elem.next().find('a').focus().trigger('click.zf.accordion');                                      // 2367
                  },                                                                                                   //
                  previous: function () {                                                                              // 2369
                    $elem.prev().find('a').focus().trigger('click.zf.accordion');                                      // 2370
                  },                                                                                                   //
                  handled: function () {                                                                               // 2372
                    e.preventDefault();                                                                                // 2373
                    e.stopPropagation();                                                                               // 2374
                  }                                                                                                    //
                });                                                                                                    //
              });                                                                                                      //
            }                                                                                                          //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the selected content pane's open/close state.                                                         //
       * @param {jQuery} $target - jQuery object of the pane to toggle.                                                //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'toggle',                                                                                                   // 2389
      value: (function () {                                                                                            // 2390
        function toggle($target) {                                                                                     // 2390
          if ($target.parent().hasClass('is-active')) {                                                                // 2391
            if (this.options.allowAllClosed || $target.parent().siblings().hasClass('is-active')) {                    // 2392
              this.up($target);                                                                                        // 2393
            } else {                                                                                                   //
              return;                                                                                                  // 2395
            }                                                                                                          //
          } else {                                                                                                     //
            this.down($target);                                                                                        // 2398
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return toggle;                                                                                                 //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Opens the accordion tab defined by `$target`.                                                                 //
       * @param {jQuery} $target - Accordion pane to open.                                                             //
       * @param {Boolean} firstTime - flag to determine if reflow should happen.                                       //
       * @fires Accordion#down                                                                                         //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'down',                                                                                                     // 2411
      value: (function () {                                                                                            // 2412
        function down($target, firstTime) {                                                                            // 2412
          var _this = this;                                                                                            // 2413
          if (!this.options.multiExpand && !firstTime) {                                                               // 2414
            var $currentActive = this.$element.find('.is-active').children('[data-tab-content]');                      // 2415
            if ($currentActive.length) {                                                                               // 2416
              this.up($currentActive);                                                                                 // 2417
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');    // 2421
                                                                                                                       //
          // Foundation.Move(_this.options.slideSpeed, $target, function(){                                            //
          $target.slideDown(_this.options.slideSpeed, function () {                                                    // 2424
            /**                                                                                                        //
             * Fires when the tab is done opening.                                                                     //
             * @event Accordion#down                                                                                   //
             */                                                                                                        //
            _this.$element.trigger('down.zf.accordion', [$target]);                                                    // 2429
          });                                                                                                          //
          // });                                                                                                       //
                                                                                                                       //
          // if(!firstTime){                                                                                           //
          //   Foundation._reflow(this.$element.attr('data-accordion'));                                               //
          // }                                                                                                         //
          $('#' + $target.attr('aria-labelledby')).attr({                                                              // 2436
            'aria-expanded': true,                                                                                     // 2437
            'aria-selected': true                                                                                      // 2438
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return down;                                                                                                   //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Closes the tab defined by `$target`.                                                                          //
       * @param {jQuery} $target - Accordion tab to close.                                                             //
       * @fires Accordion#up                                                                                           //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'up',                                                                                                       // 2450
      value: (function () {                                                                                            // 2451
        function up($target) {                                                                                         // 2451
          var $aunts = $target.parent().siblings(),                                                                    // 2452
              _this = this;                                                                                            //
          var canClose = this.options.multiExpand ? $aunts.hasClass('is-active') : $target.parent().hasClass('is-active');
                                                                                                                       //
          if (!this.options.allowAllClosed && !canClose) {                                                             // 2456
            return;                                                                                                    // 2457
          }                                                                                                            //
                                                                                                                       //
          // Foundation.Move(this.options.slideSpeed, $target, function(){                                             //
          $target.slideUp(_this.options.slideSpeed, function () {                                                      // 2461
            /**                                                                                                        //
             * Fires when the tab is done collapsing up.                                                               //
             * @event Accordion#up                                                                                     //
             */                                                                                                        //
            _this.$element.trigger('up.zf.accordion', [$target]);                                                      // 2466
          });                                                                                                          //
          // });                                                                                                       //
                                                                                                                       //
          $target.attr('aria-hidden', true).parent().removeClass('is-active');                                         // 2470
                                                                                                                       //
          $('#' + $target.attr('aria-labelledby')).attr({                                                              // 2472
            'aria-expanded': false,                                                                                    // 2473
            'aria-selected': false                                                                                     // 2474
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return up;                                                                                                     //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of an accordion.                                                                         //
       * @fires Accordion#destroyed                                                                                    //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 2485
      value: (function () {                                                                                            // 2486
        function destroy() {                                                                                           // 2486
          this.$element.find('[data-tab-content]').slideUp(0).css('display', '');                                      // 2487
          this.$element.find('a').off('.zf.accordion');                                                                // 2488
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 2490
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Accordion;                                                                                                  // 2494
  })();                                                                                                                //
                                                                                                                       //
  Accordion.defaults = {                                                                                               // 2497
    /**                                                                                                                //
     * Amount of time to animate the opening of an accordion pane.                                                     //
     * @option                                                                                                         //
     * @example 250                                                                                                    //
     */                                                                                                                //
    slideSpeed: 250,                                                                                                   // 2503
    /**                                                                                                                //
     * Allow the accordion to have multiple open panes.                                                                //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    multiExpand: false,                                                                                                // 2509
    /**                                                                                                                //
     * Allow the accordion to close all panes.                                                                         //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    allowAllClosed: false                                                                                              // 2515
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Accordion, 'Accordion');                                                                           // 2519
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 2521
                                                                                                                       //
var _createClass = (function () {                                                                                      // 2523
  function defineProperties(target, props) {                                                                           // 2523
    for (var i = 0; i < props.length; i++) {                                                                           // 2523
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 2525
  if (!(instance instanceof Constructor)) {                                                                            // 2525
    throw new TypeError("Cannot call a class as a function");                                                          // 2525
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 2527
                                                                                                                       //
  /**                                                                                                                  //
   * AccordionMenu module.                                                                                             //
   * @module foundation.accordionMenu                                                                                  //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.nest                                                                                    //
   */                                                                                                                  //
                                                                                                                       //
  var AccordionMenu = (function () {                                                                                   // 2537
    /**                                                                                                                //
     * Creates a new instance of an accordion menu.                                                                    //
     * @class                                                                                                          //
     * @fires AccordionMenu#init                                                                                       //
     * @param {jQuery} element - jQuery object to make into an accordion menu.                                         //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function AccordionMenu(element, options) {                                                                         // 2546
      _classCallCheck(this, AccordionMenu);                                                                            // 2547
                                                                                                                       //
      this.$element = element;                                                                                         // 2549
      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);                              // 2550
                                                                                                                       //
      Foundation.Nest.Feather(this.$element, 'accordion');                                                             // 2552
                                                                                                                       //
      this._init();                                                                                                    // 2554
                                                                                                                       //
      Foundation.registerPlugin(this, 'AccordionMenu');                                                                // 2556
      Foundation.Keyboard.register('AccordionMenu', {                                                                  // 2557
        'ENTER': 'toggle',                                                                                             // 2558
        'SPACE': 'toggle',                                                                                             // 2559
        'ARROW_RIGHT': 'open',                                                                                         // 2560
        'ARROW_UP': 'up',                                                                                              // 2561
        'ARROW_DOWN': 'down',                                                                                          // 2562
        'ARROW_LEFT': 'close',                                                                                         // 2563
        'ESCAPE': 'closeAll',                                                                                          // 2564
        'TAB': 'down',                                                                                                 // 2565
        'SHIFT_TAB': 'up'                                                                                              // 2566
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the accordion menu by hiding all nested menus.                                                      //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(AccordionMenu, [{                                                                                     // 2576
      key: '_init',                                                                                                    // 2577
      value: (function () {                                                                                            // 2578
        function _init() {                                                                                             // 2578
          this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
          this.$element.attr({                                                                                         // 2580
            'role': 'tablist',                                                                                         // 2581
            'aria-multiselectable': this.options.multiOpen                                                             // 2582
          });                                                                                                          //
                                                                                                                       //
          this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');                                        // 2585
          this.$menuLinks.each(function () {                                                                           // 2586
            var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),                                        // 2587
                $elem = $(this),                                                                                       //
                $sub = $elem.children('[data-submenu]'),                                                               //
                subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),                                           //
                isActive = $sub.hasClass('is-active');                                                                 //
            $elem.attr({                                                                                               // 2592
              'aria-controls': subId,                                                                                  // 2593
              'aria-expanded': isActive,                                                                               // 2594
              'role': 'tab',                                                                                           // 2595
              'id': linkId                                                                                             // 2596
            });                                                                                                        //
            $sub.attr({                                                                                                // 2598
              'aria-labelledby': linkId,                                                                               // 2599
              'aria-hidden': !isActive,                                                                                // 2600
              'role': 'tabpanel',                                                                                      // 2601
              'id': subId                                                                                              // 2602
            });                                                                                                        //
          });                                                                                                          //
          var initPanes = this.$element.find('.is-active');                                                            // 2605
          if (initPanes.length) {                                                                                      // 2606
            var _this = this;                                                                                          // 2607
            initPanes.each(function () {                                                                               // 2608
              _this.down($(this));                                                                                     // 2609
            });                                                                                                        //
          }                                                                                                            //
          this._events();                                                                                              // 2612
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for items within the menu.                                                                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 2621
      value: (function () {                                                                                            // 2622
        function _events() {                                                                                           // 2622
          var _this = this;                                                                                            // 2623
                                                                                                                       //
          this.$element.find('li').each(function () {                                                                  // 2625
            var $submenu = $(this).children('[data-submenu]');                                                         // 2626
                                                                                                                       //
            if ($submenu.length) {                                                                                     // 2628
              $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {          // 2629
                e.preventDefault();                                                                                    // 2630
                                                                                                                       //
                _this.toggle($submenu);                                                                                // 2632
              });                                                                                                      //
            }                                                                                                          //
          }).on('keydown.zf.accordionmenu', function (e) {                                                             //
            var $element = $(this),                                                                                    // 2636
                $elements = $element.parent('ul').children('li'),                                                      //
                $prevElement,                                                                                          //
                $nextElement,                                                                                          //
                $target = $element.children('[data-submenu]');                                                         //
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 2642
              if ($(this).is($element)) {                                                                              // 2643
                $prevElement = $elements.eq(Math.max(0, i - 1));                                                       // 2644
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));                                    // 2645
                                                                                                                       //
                if ($(this).children('[data-submenu]:visible').length) {                                               // 2647
                  // has open sub menu                                                                                 //
                  $nextElement = $element.find('li:first-child');                                                      // 2649
                }                                                                                                      //
                if ($(this).is(':first-child')) {                                                                      // 2651
                  // is first element of sub menu                                                                      //
                  $prevElement = $element.parents('li').first();                                                       // 2653
                } else if ($prevElement.children('[data-submenu]:visible').length) {                                   //
                  // if previous element has open sub menu                                                             //
                  $prevElement = $prevElement.find('li:last-child');                                                   // 2656
                }                                                                                                      //
                if ($(this).is(':last-child')) {                                                                       // 2658
                  // is last element of sub menu                                                                       //
                  $nextElement = $element.parents('li').first().next('li');                                            // 2660
                }                                                                                                      //
                                                                                                                       //
                return;                                                                                                // 2663
              }                                                                                                        //
            });                                                                                                        //
            Foundation.Keyboard.handleKey(e, 'AccordionMenu', {                                                        // 2666
              open: function () {                                                                                      // 2667
                if ($target.is(':hidden')) {                                                                           // 2668
                  _this.down($target);                                                                                 // 2669
                  $target.find('li').first().focus();                                                                  // 2670
                }                                                                                                      //
              },                                                                                                       //
              close: function () {                                                                                     // 2673
                if ($target.length && !$target.is(':hidden')) {                                                        // 2674
                  // close active sub of this item                                                                     //
                  _this.up($target);                                                                                   // 2676
                } else if ($element.parent('[data-submenu]').length) {                                                 //
                  // close currently open sub                                                                          //
                  _this.up($element.parent('[data-submenu]'));                                                         // 2679
                  $element.parents('li').first().focus();                                                              // 2680
                }                                                                                                      //
              },                                                                                                       //
              up: function () {                                                                                        // 2683
                $prevElement.focus();                                                                                  // 2684
              },                                                                                                       //
              down: function () {                                                                                      // 2686
                $nextElement.focus();                                                                                  // 2687
              },                                                                                                       //
              toggle: function () {                                                                                    // 2689
                if ($element.children('[data-submenu]').length) {                                                      // 2690
                  _this.toggle($element.children('[data-submenu]'));                                                   // 2691
                }                                                                                                      //
              },                                                                                                       //
              closeAll: function () {                                                                                  // 2694
                _this.hideAll();                                                                                       // 2695
              },                                                                                                       //
              handled: function () {                                                                                   // 2697
                e.preventDefault();                                                                                    // 2698
                e.stopImmediatePropagation();                                                                          // 2699
              }                                                                                                        //
            });                                                                                                        //
          }); //.attr('tabindex', 0);                                                                                  //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Closes all panes of the menu.                                                                                 //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'hideAll',                                                                                                  // 2711
      value: (function () {                                                                                            // 2712
        function hideAll() {                                                                                           // 2712
          this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);                                       // 2713
        }                                                                                                              //
                                                                                                                       //
        return hideAll;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the open/close state of a submenu.                                                                    //
       * @function                                                                                                     //
       * @param {jQuery} $target - the submenu to toggle                                                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'toggle',                                                                                                   // 2723
      value: (function () {                                                                                            // 2724
        function toggle($target) {                                                                                     // 2724
          if (!$target.is(':animated')) {                                                                              // 2725
            if (!$target.is(':hidden')) {                                                                              // 2726
              this.up($target);                                                                                        // 2727
            } else {                                                                                                   //
              this.down($target);                                                                                      // 2729
            }                                                                                                          //
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return toggle;                                                                                                 //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Opens the sub-menu defined by `$target`.                                                                      //
       * @param {jQuery} $target - Sub-menu to open.                                                                   //
       * @fires AccordionMenu#down                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'down',                                                                                                     // 2741
      value: (function () {                                                                                            // 2742
        function down($target) {                                                                                       // 2742
          var _this = this;                                                                                            // 2743
                                                                                                                       //
          if (!this.options.multiOpen) {                                                                               // 2745
            this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));           // 2746
          }                                                                                                            //
                                                                                                                       //
          $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });
                                                                                                                       //
          Foundation.Move(this.options.slideSpeed, $target, function () {                                              // 2751
            $target.slideDown(_this.options.slideSpeed, function () {                                                  // 2752
              /**                                                                                                      //
               * Fires when the menu is done opening.                                                                  //
               * @event AccordionMenu#down                                                                             //
               */                                                                                                      //
              _this.$element.trigger('down.zf.accordionMenu', [$target]);                                              // 2757
            });                                                                                                        //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return down;                                                                                                   //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.             //
       * @param {jQuery} $target - Sub-menu to close.                                                                  //
       * @fires AccordionMenu#up                                                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'up',                                                                                                       // 2769
      value: (function () {                                                                                            // 2770
        function up($target) {                                                                                         // 2770
          var _this = this;                                                                                            // 2771
          Foundation.Move(this.options.slideSpeed, $target, function () {                                              // 2772
            $target.slideUp(_this.options.slideSpeed, function () {                                                    // 2773
              /**                                                                                                      //
               * Fires when the menu is done collapsing up.                                                            //
               * @event AccordionMenu#up                                                                               //
               */                                                                                                      //
              _this.$element.trigger('up.zf.accordionMenu', [$target]);                                                // 2778
            });                                                                                                        //
          });                                                                                                          //
                                                                                                                       //
          var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);                  // 2782
                                                                                                                       //
          $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);                                  // 2784
        }                                                                                                              //
                                                                                                                       //
        return up;                                                                                                     //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of accordion menu.                                                                       //
       * @fires AccordionMenu#destroyed                                                                                //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 2793
      value: (function () {                                                                                            // 2794
        function destroy() {                                                                                           // 2794
          this.$element.find('[data-submenu]').slideDown(0).css('display', '');                                        // 2795
          this.$element.find('a').off('click.zf.accordionMenu');                                                       // 2796
                                                                                                                       //
          Foundation.Nest.Burn(this.$element, 'accordion');                                                            // 2798
          Foundation.unregisterPlugin(this);                                                                           // 2799
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return AccordionMenu;                                                                                              // 2803
  })();                                                                                                                //
                                                                                                                       //
  AccordionMenu.defaults = {                                                                                           // 2806
    /**                                                                                                                //
     * Amount of time to animate the opening of a submenu in ms.                                                       //
     * @option                                                                                                         //
     * @example 250                                                                                                    //
     */                                                                                                                //
    slideSpeed: 250,                                                                                                   // 2812
    /**                                                                                                                //
     * Allow the menu to have multiple open panes.                                                                     //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    multiOpen: true                                                                                                    // 2818
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(AccordionMenu, 'AccordionMenu');                                                                   // 2822
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 2824
                                                                                                                       //
var _createClass = (function () {                                                                                      // 2826
  function defineProperties(target, props) {                                                                           // 2826
    for (var i = 0; i < props.length; i++) {                                                                           // 2826
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 2828
  if (!(instance instanceof Constructor)) {                                                                            // 2828
    throw new TypeError("Cannot call a class as a function");                                                          // 2828
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 2830
                                                                                                                       //
  /**                                                                                                                  //
   * Drilldown module.                                                                                                 //
   * @module foundation.drilldown                                                                                      //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.nest                                                                                    //
   */                                                                                                                  //
                                                                                                                       //
  var Drilldown = (function () {                                                                                       // 2840
    /**                                                                                                                //
     * Creates a new instance of a drilldown menu.                                                                     //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to make into an accordion menu.                                         //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Drilldown(element, options) {                                                                             // 2848
      _classCallCheck(this, Drilldown);                                                                                // 2849
                                                                                                                       //
      this.$element = element;                                                                                         // 2851
      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);                                  // 2852
                                                                                                                       //
      Foundation.Nest.Feather(this.$element, 'drilldown');                                                             // 2854
                                                                                                                       //
      this._init();                                                                                                    // 2856
                                                                                                                       //
      Foundation.registerPlugin(this, 'Drilldown');                                                                    // 2858
      Foundation.Keyboard.register('Drilldown', {                                                                      // 2859
        'ENTER': 'open',                                                                                               // 2860
        'SPACE': 'open',                                                                                               // 2861
        'ARROW_RIGHT': 'next',                                                                                         // 2862
        'ARROW_UP': 'up',                                                                                              // 2863
        'ARROW_DOWN': 'down',                                                                                          // 2864
        'ARROW_LEFT': 'previous',                                                                                      // 2865
        'ESCAPE': 'close',                                                                                             // 2866
        'TAB': 'down',                                                                                                 // 2867
        'SHIFT_TAB': 'up'                                                                                              // 2868
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the drilldown by creating jQuery collections of elements                                            //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Drilldown, [{                                                                                         // 2878
      key: '_init',                                                                                                    // 2879
      value: (function () {                                                                                            // 2880
        function _init() {                                                                                             // 2880
          this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent');                                 // 2881
          this.$submenus = this.$submenuAnchors.children('[data-submenu]');                                            // 2882
          this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem');               // 2883
                                                                                                                       //
          this._prepareMenu();                                                                                         // 2885
                                                                                                                       //
          this._keyboardEvents();                                                                                      // 2887
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * prepares drilldown menu by setting attributes to links and elements                                           //
       * sets a min height to prevent content jumping                                                                  //
       * wraps the element if not already wrapped                                                                      //
       * @private                                                                                                      //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_prepareMenu',                                                                                             // 2899
      value: (function () {                                                                                            // 2900
        function _prepareMenu() {                                                                                      // 2900
          var _this = this;                                                                                            // 2901
          // if(!this.options.holdOpen){                                                                               //
          //   this._menuLinkEvents();                                                                                 //
          // }                                                                                                         //
          this.$submenuAnchors.each(function () {                                                                      // 2905
            var $sub = $(this);                                                                                        // 2906
            var $link = $sub.find('a:first');                                                                          // 2907
            if (_this.options.parentLink) {                                                                            // 2908
              $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
            }                                                                                                          //
            $link.data('savedHref', $link.attr('href')).removeAttr('href');                                            // 2911
            $sub.children('[data-submenu]').attr({                                                                     // 2912
              'aria-hidden': true,                                                                                     // 2913
              'tabindex': 0,                                                                                           // 2914
              'role': 'menu'                                                                                           // 2915
            });                                                                                                        //
            _this._events($sub);                                                                                       // 2917
          });                                                                                                          //
          this.$submenus.each(function () {                                                                            // 2919
            var $menu = $(this),                                                                                       // 2920
                $back = $menu.find('.js-drilldown-back');                                                              //
            if (!$back.length) {                                                                                       // 2922
              $menu.prepend(_this.options.backButton);                                                                 // 2923
            }                                                                                                          //
            _this._back($menu);                                                                                        // 2925
          });                                                                                                          //
          if (!this.$element.parent().hasClass('is-drilldown')) {                                                      // 2927
            this.$wrapper = $(this.options.wrapper).addClass('is-drilldown').css(this._getMaxDims());                  // 2928
            this.$element.wrap(this.$wrapper);                                                                         // 2929
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _prepareMenu;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers to elements in the menu.                                                                  //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $elem - the current menu item to add handlers to.                                             //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 2941
      value: (function () {                                                                                            // 2942
        function _events($elem) {                                                                                      // 2942
          var _this = this;                                                                                            // 2943
                                                                                                                       //
          $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {                                      // 2945
            if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {                        // 2946
              e.stopImmediatePropagation();                                                                            // 2947
              e.preventDefault();                                                                                      // 2948
            }                                                                                                          //
                                                                                                                       //
            // if(e.target !== e.currentTarget.firstElementChild){                                                     //
            //   return false;                                                                                         //
            // }                                                                                                       //
            _this._show($elem);                                                                                        // 2954
                                                                                                                       //
            if (_this.options.closeOnClick) {                                                                          // 2956
              var $body = $('body').not(_this.$wrapper);                                                               // 2957
              $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {                                       // 2958
                e.preventDefault();                                                                                    // 2959
                _this._hideAll();                                                                                      // 2960
                $body.off('.zf.drilldown');                                                                            // 2961
              });                                                                                                      //
            }                                                                                                          //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds keydown event listener to `li`'s in the menu.                                                            //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_keyboardEvents',                                                                                          // 2973
      value: (function () {                                                                                            // 2974
        function _keyboardEvents() {                                                                                   // 2974
          var _this = this;                                                                                            // 2975
          this.$menuItems.add(this.$element.find('.js-drilldown-back')).on('keydown.zf.drilldown', function (e) {      // 2976
            var $element = $(this),                                                                                    // 2977
                $elements = $element.parent('ul').children('li'),                                                      //
                $prevElement,                                                                                          //
                $nextElement;                                                                                          //
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 2982
              if ($(this).is($element)) {                                                                              // 2983
                $prevElement = $elements.eq(Math.max(0, i - 1));                                                       // 2984
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));                                    // 2985
                return;                                                                                                // 2986
              }                                                                                                        //
            });                                                                                                        //
            Foundation.Keyboard.handleKey(e, 'Drilldown', {                                                            // 2989
              next: function () {                                                                                      // 2990
                if ($element.is(_this.$submenuAnchors)) {                                                              // 2991
                  _this._show($element);                                                                               // 2992
                  $element.on(Foundation.transitionend($element), function () {                                        // 2993
                    $element.find('ul li').filter(_this.$menuItems).first().focus();                                   // 2994
                  });                                                                                                  //
                }                                                                                                      //
              },                                                                                                       //
              previous: function () {                                                                                  // 2998
                _this._hide($element.parent('ul'));                                                                    // 2999
                $element.parent('ul').on(Foundation.transitionend($element), function () {                             // 3000
                  setTimeout(function () {                                                                             // 3001
                    $element.parent('ul').parent('li').focus();                                                        // 3002
                  }, 1);                                                                                               //
                });                                                                                                    //
              },                                                                                                       //
              up: function () {                                                                                        // 3006
                $prevElement.focus();                                                                                  // 3007
              },                                                                                                       //
              down: function () {                                                                                      // 3009
                $nextElement.focus();                                                                                  // 3010
              },                                                                                                       //
              close: function () {                                                                                     // 3012
                _this._back();                                                                                         // 3013
                //_this.$menuItems.first().focus(); // focus to first element                                          //
              },                                                                                                       //
              open: function () {                                                                                      // 3016
                if (!$element.is(_this.$menuItems)) {                                                                  // 3017
                  // not menu item means back button                                                                   //
                  _this._hide($element.parent('ul'));                                                                  // 3019
                  setTimeout(function () {                                                                             // 3020
                    $element.parent('ul').parent('li').focus();                                                        // 3021
                  }, 1);                                                                                               //
                } else if ($element.is(_this.$submenuAnchors)) {                                                       //
                  _this._show($element);                                                                               // 3024
                  setTimeout(function () {                                                                             // 3025
                    $element.find('ul li').filter(_this.$menuItems).first().focus();                                   // 3026
                  }, 1);                                                                                               //
                }                                                                                                      //
              },                                                                                                       //
              handled: function () {                                                                                   // 3030
                e.preventDefault();                                                                                    // 3031
                e.stopImmediatePropagation();                                                                          // 3032
              }                                                                                                        //
            });                                                                                                        //
          }); // end keyboardAccess                                                                                    //
        }                                                                                                              //
                                                                                                                       //
        return _keyboardEvents;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Closes all open elements, and returns to root menu.                                                           //
       * @function                                                                                                     //
       * @fires Drilldown#closed                                                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_hideAll',                                                                                                 // 3045
      value: (function () {                                                                                            // 3046
        function _hideAll() {                                                                                          // 3046
          var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');                    // 3047
          $elem.one(Foundation.transitionend($elem), function (e) {                                                    // 3048
            $elem.removeClass('is-active is-closing');                                                                 // 3049
          });                                                                                                          //
          /**                                                                                                          //
           * Fires when the menu is fully closed.                                                                      //
           * @event Drilldown#closed                                                                                   //
           */                                                                                                          //
          this.$element.trigger('closed.zf.drilldown');                                                                // 3055
        }                                                                                                              //
                                                                                                                       //
        return _hideAll;                                                                                               //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listener for each `back` button, and closes open menus.                                            //
       * @function                                                                                                     //
       * @fires Drilldown#back                                                                                         //
       * @param {jQuery} $elem - the current sub-menu to add `back` event.                                             //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_back',                                                                                                    // 3066
      value: (function () {                                                                                            // 3067
        function _back($elem) {                                                                                        // 3067
          var _this = this;                                                                                            // 3068
          $elem.off('click.zf.drilldown');                                                                             // 3069
          $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {                                 // 3070
            e.stopImmediatePropagation();                                                                              // 3071
            // console.log('mouseup on back');                                                                         //
            _this._hide($elem);                                                                                        // 3073
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _back;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listener to menu items w/o submenus to close open menus on click.                                  //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_menuLinkEvents',                                                                                          // 3084
      value: (function () {                                                                                            // 3085
        function _menuLinkEvents() {                                                                                   // 3085
          var _this = this;                                                                                            // 3086
          this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
            // e.stopImmediatePropagation();                                                                           //
            setTimeout(function () {                                                                                   // 3089
              _this._hideAll();                                                                                        // 3090
            }, 0);                                                                                                     //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _menuLinkEvents;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Opens a submenu.                                                                                              //
       * @function                                                                                                     //
       * @fires Drilldown#open                                                                                         //
       * @param {jQuery} $elem - the current element with a submenu to open.                                           //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_show',                                                                                                    // 3103
      value: (function () {                                                                                            // 3104
        function _show($elem) {                                                                                        // 3104
          $elem.children('[data-submenu]').addClass('is-active');                                                      // 3105
                                                                                                                       //
          this.$element.trigger('open.zf.drilldown', [$elem]);                                                         // 3107
        }                                                                                                              //
                                                                                                                       //
        return _show;                                                                                                  //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: '_hide',                                                                                                    // 3110
                                                                                                                       //
      /**                                                                                                              //
       * Hides a submenu                                                                                               //
       * @function                                                                                                     //
       * @fires Drilldown#hide                                                                                         //
       * @param {jQuery} $elem - the current sub-menu to hide.                                                         //
       */                                                                                                              //
      value: (function () {                                                                                            // 3119
        function _hide($elem) {                                                                                        // 3119
          var _this = this;                                                                                            // 3120
          $elem.addClass('is-closing').one(Foundation.transitionend($elem), function () {                              // 3121
            $elem.removeClass('is-active is-closing');                                                                 // 3122
            $elem.blur();                                                                                              // 3123
          });                                                                                                          //
          /**                                                                                                          //
           * Fires when the submenu is has closed.                                                                     //
           * @event Drilldown#hide                                                                                     //
           */                                                                                                          //
          $elem.trigger('hide.zf.drilldown', [$elem]);                                                                 // 3129
        }                                                                                                              //
                                                                                                                       //
        return _hide;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.                    //
       * Prevents content jumping.                                                                                     //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_getMaxDims',                                                                                              // 3140
      value: (function () {                                                                                            // 3141
        function _getMaxDims() {                                                                                       // 3141
          var max = 0,                                                                                                 // 3142
              result = {};                                                                                             //
          this.$submenus.add(this.$element).each(function () {                                                         // 3144
            var numOfElems = $(this).children('li').length;                                                            // 3145
            max = numOfElems > max ? numOfElems : max;                                                                 // 3146
          });                                                                                                          //
                                                                                                                       //
          result['min-height'] = max * this.$menuItems[0].getBoundingClientRect().height + 'px';                       // 3149
          result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';                                 // 3150
                                                                                                                       //
          return result;                                                                                               // 3152
        }                                                                                                              //
                                                                                                                       //
        return _getMaxDims;                                                                                            //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the Drilldown Menu                                                                                   //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 3161
      value: (function () {                                                                                            // 3162
        function destroy() {                                                                                           // 3162
          this._hideAll();                                                                                             // 3163
          Foundation.Nest.Burn(this.$element, 'drilldown');                                                            // 3164
          this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role').off('.zf.drilldown').end().off('zf.drilldown');
          this.$element.find('a').each(function () {                                                                   // 3166
            var $link = $(this);                                                                                       // 3167
            if ($link.data('savedHref')) {                                                                             // 3168
              $link.attr('href', $link.data('savedHref')).removeData('savedHref');                                     // 3169
            } else {                                                                                                   //
              return;                                                                                                  // 3171
            }                                                                                                          //
          });                                                                                                          //
          Foundation.unregisterPlugin(this);                                                                           // 3174
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Drilldown;                                                                                                  // 3178
  })();                                                                                                                //
                                                                                                                       //
  Drilldown.defaults = {                                                                                               // 3181
    /**                                                                                                                //
     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
     * @option                                                                                                         //
     * @example '<\li><\a>Back<\/a><\/li>'                                                                             //
     */                                                                                                                //
    backButton: '<li class="js-drilldown-back"><a>Back</a></li>',                                                      // 3187
    /**                                                                                                                //
     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
     * @option                                                                                                         //
     * @example '<\div class="is-drilldown"><\/div>'                                                                   //
     */                                                                                                                //
    wrapper: '<div></div>',                                                                                            // 3193
    /**                                                                                                                //
     * Adds the parent link to the submenu.                                                                            //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    parentLink: false,                                                                                                 // 3199
    /**                                                                                                                //
     * Allow the menu to return to root list on body click.                                                            //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    closeOnClick: false                                                                                                // 3205
    // holdOpen: false                                                                                                 //
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Drilldown, 'Drilldown');                                                                           // 3210
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 3212
                                                                                                                       //
var _createClass = (function () {                                                                                      // 3214
  function defineProperties(target, props) {                                                                           // 3214
    for (var i = 0; i < props.length; i++) {                                                                           // 3214
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 3216
  if (!(instance instanceof Constructor)) {                                                                            // 3216
    throw new TypeError("Cannot call a class as a function");                                                          // 3216
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 3218
                                                                                                                       //
  /**                                                                                                                  //
   * Dropdown module.                                                                                                  //
   * @module foundation.dropdown                                                                                       //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.box                                                                                     //
   * @requires foundation.util.triggers                                                                                //
   */                                                                                                                  //
                                                                                                                       //
  var Dropdown = (function () {                                                                                        // 3228
    /**                                                                                                                //
     * Creates a new instance of a dropdown.                                                                           //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to make into a dropdown.                                                //
     *        Object should be of the dropdown panel, rather than its anchor.                                          //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Dropdown(element, options) {                                                                              // 3237
      _classCallCheck(this, Dropdown);                                                                                 // 3238
                                                                                                                       //
      this.$element = element;                                                                                         // 3240
      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);                                   // 3241
      this._init();                                                                                                    // 3242
                                                                                                                       //
      Foundation.registerPlugin(this, 'Dropdown');                                                                     // 3244
      Foundation.Keyboard.register('Dropdown', {                                                                       // 3245
        'ENTER': 'open',                                                                                               // 3246
        'SPACE': 'open',                                                                                               // 3247
        'ESCAPE': 'close',                                                                                             // 3248
        'TAB': 'tab_forward',                                                                                          // 3249
        'SHIFT_TAB': 'tab_backward'                                                                                    // 3250
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Dropdown, [{                                                                                          // 3261
      key: '_init',                                                                                                    // 3262
      value: (function () {                                                                                            // 3263
        function _init() {                                                                                             // 3263
          var $id = this.$element.attr('id');                                                                          // 3264
                                                                                                                       //
          this.$anchor = $('[data-toggle="' + $id + '"]') || $('[data-open="' + $id + '"]');                           // 3266
          this.$anchor.attr({                                                                                          // 3267
            'aria-controls': $id,                                                                                      // 3268
            'data-is-focus': false,                                                                                    // 3269
            'data-yeti-box': $id,                                                                                      // 3270
            'aria-haspopup': true,                                                                                     // 3271
            'aria-expanded': false                                                                                     // 3272
                                                                                                                       //
          });                                                                                                          //
                                                                                                                       //
          this.options.positionClass = this.getPositionClass();                                                        // 3276
          this.counter = 4;                                                                                            // 3277
          this.usedPositions = [];                                                                                     // 3278
          this.$element.attr({                                                                                         // 3279
            'aria-hidden': 'true',                                                                                     // 3280
            'data-yeti-box': $id,                                                                                      // 3281
            'data-resize': $id,                                                                                        // 3282
            'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')                            // 3283
          });                                                                                                          //
          this._events();                                                                                              // 3285
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Helper function to determine current orientation of dropdown pane.                                            //
       * @function                                                                                                     //
       * @returns {String} position - string value of a position class.                                                //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'getPositionClass',                                                                                         // 3295
      value: (function () {                                                                                            // 3296
        function getPositionClass() {                                                                                  // 3296
          var position = this.$element[0].className.match(/\b(top|left|right)\b/g);                                    // 3297
          position = position ? position[0] : '';                                                                      // 3298
          return position;                                                                                             // 3299
        }                                                                                                              //
                                                                                                                       //
        return getPositionClass;                                                                                       //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adjusts the dropdown panes orientation by adding/removing positioning classes.                                //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {String} position - position class to remove.                                                          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_reposition',                                                                                              // 3310
      value: (function () {                                                                                            // 3311
        function _reposition(position) {                                                                               // 3311
          this.usedPositions.push(position ? position : 'bottom');                                                     // 3312
          //default, try switching to opposite side                                                                    //
          if (!position && this.usedPositions.indexOf('top') < 0) {                                                    // 3314
            this.$element.addClass('top');                                                                             // 3315
          } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {                                 //
            this.$element.removeClass(position);                                                                       // 3317
          } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {                                 //
            this.$element.removeClass(position).addClass('right');                                                     // 3319
          } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {                                 //
            this.$element.removeClass(position).addClass('left');                                                      // 3321
          }                                                                                                            //
                                                                                                                       //
          //if default change didn't work, try bottom or left first                                                    //
          else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {    //
              this.$element.addClass('left');                                                                          // 3326
            } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
              this.$element.removeClass(position).addClass('left');                                                    // 3328
            } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
              this.$element.removeClass(position);                                                                     // 3330
            } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
              this.$element.removeClass(position);                                                                     // 3332
            }                                                                                                          //
            //if nothing cleared, set to bottom                                                                        //
            else {                                                                                                     //
                this.$element.removeClass(position);                                                                   // 3336
              }                                                                                                        //
          this.classChanged = true;                                                                                    // 3338
          this.counter--;                                                                                              // 3339
        }                                                                                                              //
                                                                                                                       //
        return _reposition;                                                                                            //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Sets the position and orientation of the dropdown pane, checks for collisions.                                //
       * Recursively calls itself if a collision is detected, with a new position class.                               //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setPosition',                                                                                             // 3350
      value: (function () {                                                                                            // 3351
        function _setPosition() {                                                                                      // 3351
          if (this.$anchor.attr('aria-expanded') === 'false') {                                                        // 3352
            return false;                                                                                              // 3353
          }                                                                                                            //
          var position = this.getPositionClass(),                                                                      // 3355
              $eleDims = Foundation.Box.GetDimensions(this.$element),                                                  //
              $anchorDims = Foundation.Box.GetDimensions(this.$anchor),                                                //
              _this = this,                                                                                            //
              direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',                        //
              param = direction === 'top' ? 'height' : 'width',                                                        //
              offset = param === 'height' ? this.options.vOffset : this.options.hOffset;                               //
                                                                                                                       //
          if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {
            this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
              'width': $eleDims.windowDims.width - this.options.hOffset * 2,                                           // 3365
              'height': 'auto'                                                                                         // 3366
            });                                                                                                        //
            this.classChanged = true;                                                                                  // 3368
            return false;                                                                                              // 3369
          }                                                                                                            //
                                                                                                                       //
          this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));
                                                                                                                       //
          while (!Foundation.Box.ImNotTouchingYou(this.$element) && this.counter) {                                    // 3374
            this._reposition(position);                                                                                // 3375
            this._setPosition();                                                                                       // 3376
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _setPosition;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listeners to the element utilizing the triggers utility library.                                   //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 3387
      value: (function () {                                                                                            // 3388
        function _events() {                                                                                           // 3388
          var _this = this;                                                                                            // 3389
          this.$element.on({                                                                                           // 3390
            'open.zf.trigger': this.open.bind(this),                                                                   // 3391
            'close.zf.trigger': this.close.bind(this),                                                                 // 3392
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 3393
            'resizeme.zf.trigger': this._setPosition.bind(this)                                                        // 3394
          });                                                                                                          //
                                                                                                                       //
          if (this.options.hover) {                                                                                    // 3397
            this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
              clearTimeout(_this.timeout);                                                                             // 3399
              _this.timeout = setTimeout(function () {                                                                 // 3400
                _this.open();                                                                                          // 3401
                _this.$anchor.data('hover', true);                                                                     // 3402
              }, _this.options.hoverDelay);                                                                            //
            }).on('mouseleave.zf.dropdown', function () {                                                              //
              clearTimeout(_this.timeout);                                                                             // 3405
              _this.timeout = setTimeout(function () {                                                                 // 3406
                _this.close();                                                                                         // 3407
                _this.$anchor.data('hover', false);                                                                    // 3408
              }, _this.options.hoverDelay);                                                                            //
            });                                                                                                        //
            if (this.options.hoverPane) {                                                                              // 3411
              this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
                clearTimeout(_this.timeout);                                                                           // 3413
              }).on('mouseleave.zf.dropdown', function () {                                                            //
                clearTimeout(_this.timeout);                                                                           // 3415
                _this.timeout = setTimeout(function () {                                                               // 3416
                  _this.close();                                                                                       // 3417
                  _this.$anchor.data('hover', false);                                                                  // 3418
                }, _this.options.hoverDelay);                                                                          //
              });                                                                                                      //
            }                                                                                                          //
          }                                                                                                            //
          this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {                                     // 3423
                                                                                                                       //
            var $target = $(this),                                                                                     // 3425
                visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);                          //
                                                                                                                       //
            Foundation.Keyboard.handleKey(e, 'Dropdown', {                                                             // 3428
              tab_forward: function () {                                                                               // 3429
                if (_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {                               // 3430
                  // left modal downwards, setting focus to first element                                              //
                  if (_this.options.trapFocus) {                                                                       // 3432
                    // if focus shall be trapped                                                                       //
                    visibleFocusableElements.eq(0).focus();                                                            // 3434
                    e.preventDefault();                                                                                // 3435
                  } else {                                                                                             //
                    // if focus is not trapped, close dropdown on focus out                                            //
                    _this.close();                                                                                     // 3438
                  }                                                                                                    //
                }                                                                                                      //
              },                                                                                                       //
              tab_backward: function () {                                                                              // 3442
                if (_this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || _this.$element.is(':focus')) {
                  // left modal upwards, setting focus to last element                                                 //
                  if (_this.options.trapFocus) {                                                                       // 3445
                    // if focus shall be trapped                                                                       //
                    visibleFocusableElements.eq(-1).focus();                                                           // 3447
                    e.preventDefault();                                                                                // 3448
                  } else {                                                                                             //
                    // if focus is not trapped, close dropdown on focus out                                            //
                    _this.close();                                                                                     // 3451
                  }                                                                                                    //
                }                                                                                                      //
              },                                                                                                       //
              open: function () {                                                                                      // 3455
                if ($target.is(_this.$anchor)) {                                                                       // 3456
                  _this.open();                                                                                        // 3457
                  _this.$element.attr('tabindex', -1).focus();                                                         // 3458
                  e.preventDefault();                                                                                  // 3459
                }                                                                                                      //
              },                                                                                                       //
              close: function () {                                                                                     // 3462
                _this.close();                                                                                         // 3463
                _this.$anchor.focus();                                                                                 // 3464
              }                                                                                                        //
            });                                                                                                        //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds an event handler to the body to close any dropdowns on a click.                                          //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_addBodyHandler',                                                                                          // 3477
      value: (function () {                                                                                            // 3478
        function _addBodyHandler() {                                                                                   // 3478
          var $body = $(document.body).not(this.$element),                                                             // 3479
              _this = this;                                                                                            //
          $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {                                        // 3481
            if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {                                   // 3482
              return;                                                                                                  // 3483
            }                                                                                                          //
            if (_this.$element.find(e.target).length) {                                                                // 3485
              return;                                                                                                  // 3486
            }                                                                                                          //
            _this.close();                                                                                             // 3488
            $body.off('click.zf.dropdown');                                                                            // 3489
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _addBodyHandler;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.                                 //
       * @function                                                                                                     //
       * @fires Dropdown#closeme                                                                                       //
       * @fires Dropdown#show                                                                                          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'open',                                                                                                     // 3501
      value: (function () {                                                                                            // 3502
        function open() {                                                                                              // 3502
          // var _this = this;                                                                                         //
          /**                                                                                                          //
           * Fires to close other open dropdowns                                                                       //
           * @event Dropdown#closeme                                                                                   //
           */                                                                                                          //
          this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));                                      // 3508
          this.$anchor.addClass('hover').attr({ 'aria-expanded': true });                                              // 3509
          // this.$element/*.show()*/;                                                                                 //
          this._setPosition();                                                                                         // 3511
          this.$element.addClass('is-open').attr({ 'aria-hidden': false });                                            // 3512
                                                                                                                       //
          if (this.options.autoFocus) {                                                                                // 3514
            var $focusable = Foundation.Keyboard.findFocusable(this.$element);                                         // 3515
            if ($focusable.length) {                                                                                   // 3516
              $focusable.eq(0).focus();                                                                                // 3517
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          if (this.options.closeOnClick) {                                                                             // 3521
            this._addBodyHandler();                                                                                    // 3522
          }                                                                                                            //
                                                                                                                       //
          /**                                                                                                          //
           * Fires once the dropdown is visible.                                                                       //
           * @event Dropdown#show                                                                                      //
           */                                                                                                          //
          this.$element.trigger('show.zf.dropdown', [this.$element]);                                                  // 3529
        }                                                                                                              //
                                                                                                                       //
        return open;                                                                                                   //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Closes the open dropdown pane.                                                                                //
       * @function                                                                                                     //
       * @fires Dropdown#hide                                                                                          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'close',                                                                                                    // 3539
      value: (function () {                                                                                            // 3540
        function close() {                                                                                             // 3540
          if (!this.$element.hasClass('is-open')) {                                                                    // 3541
            return false;                                                                                              // 3542
          }                                                                                                            //
          this.$element.removeClass('is-open').attr({ 'aria-hidden': true });                                          // 3544
                                                                                                                       //
          this.$anchor.removeClass('hover').attr('aria-expanded', false);                                              // 3546
                                                                                                                       //
          if (this.classChanged) {                                                                                     // 3548
            var curPositionClass = this.getPositionClass();                                                            // 3549
            if (curPositionClass) {                                                                                    // 3550
              this.$element.removeClass(curPositionClass);                                                             // 3551
            }                                                                                                          //
            this.$element.addClass(this.options.positionClass)                                                         // 3553
            /*.hide()*/.css({ height: '', width: '' });                                                                //
            this.classChanged = false;                                                                                 // 3555
            this.counter = 4;                                                                                          // 3556
            this.usedPositions.length = 0;                                                                             // 3557
          }                                                                                                            //
          this.$element.trigger('hide.zf.dropdown', [this.$element]);                                                  // 3559
        }                                                                                                              //
                                                                                                                       //
        return close;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the dropdown pane's visibility.                                                                       //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'toggle',                                                                                                   // 3568
      value: (function () {                                                                                            // 3569
        function toggle() {                                                                                            // 3569
          if (this.$element.hasClass('is-open')) {                                                                     // 3570
            if (this.$anchor.data('hover')) return;                                                                    // 3571
            this.close();                                                                                              // 3572
          } else {                                                                                                     //
            this.open();                                                                                               // 3574
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return toggle;                                                                                                 //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the dropdown.                                                                                        //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 3584
      value: (function () {                                                                                            // 3585
        function destroy() {                                                                                           // 3585
          this.$element.off('.zf.trigger').hide();                                                                     // 3586
          this.$anchor.off('.zf.dropdown');                                                                            // 3587
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 3589
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Dropdown;                                                                                                   // 3593
  })();                                                                                                                //
                                                                                                                       //
  Dropdown.defaults = {                                                                                                // 3596
    /**                                                                                                                //
     * Amount of time to delay opening a submenu on hover event.                                                       //
     * @option                                                                                                         //
     * @example 250                                                                                                    //
     */                                                                                                                //
    hoverDelay: 250,                                                                                                   // 3602
    /**                                                                                                                //
     * Allow submenus to open on hover events                                                                          //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    hover: false,                                                                                                      // 3608
    /**                                                                                                                //
     * Don't close dropdown when hovering over dropdown pane                                                           //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    hoverPane: false,                                                                                                  // 3614
    /**                                                                                                                //
     * Number of pixels between the dropdown pane and the triggering element on open.                                  //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    vOffset: 1,                                                                                                        // 3620
    /**                                                                                                                //
     * Number of pixels between the dropdown pane and the triggering element on open.                                  //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    hOffset: 1,                                                                                                        // 3626
    /**                                                                                                                //
     * Class applied to adjust open position. JS will test and fill this in.                                           //
     * @option                                                                                                         //
     * @example 'top'                                                                                                  //
     */                                                                                                                //
    positionClass: '',                                                                                                 // 3632
    /**                                                                                                                //
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.                           //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    trapFocus: false,                                                                                                  // 3638
    /**                                                                                                                //
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.  //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    autoFocus: false,                                                                                                  // 3644
    /**                                                                                                                //
     * Allows a click on the body to close the dropdown.                                                               //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    closeOnClick: false                                                                                                // 3650
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Dropdown, 'Dropdown');                                                                             // 3654
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 3656
                                                                                                                       //
var _createClass = (function () {                                                                                      // 3658
  function defineProperties(target, props) {                                                                           // 3658
    for (var i = 0; i < props.length; i++) {                                                                           // 3658
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 3660
  if (!(instance instanceof Constructor)) {                                                                            // 3660
    throw new TypeError("Cannot call a class as a function");                                                          // 3660
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 3662
                                                                                                                       //
  /**                                                                                                                  //
   * DropdownMenu module.                                                                                              //
   * @module foundation.dropdown-menu                                                                                  //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.box                                                                                     //
   * @requires foundation.util.nest                                                                                    //
   */                                                                                                                  //
                                                                                                                       //
  var DropdownMenu = (function () {                                                                                    // 3672
    /**                                                                                                                //
     * Creates a new instance of DropdownMenu.                                                                         //
     * @class                                                                                                          //
     * @fires DropdownMenu#init                                                                                        //
     * @param {jQuery} element - jQuery object to make into a dropdown menu.                                           //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function DropdownMenu(element, options) {                                                                          // 3681
      _classCallCheck(this, DropdownMenu);                                                                             // 3682
                                                                                                                       //
      this.$element = element;                                                                                         // 3684
      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);                               // 3685
                                                                                                                       //
      Foundation.Nest.Feather(this.$element, 'dropdown');                                                              // 3687
      this._init();                                                                                                    // 3688
                                                                                                                       //
      Foundation.registerPlugin(this, 'DropdownMenu');                                                                 // 3690
      Foundation.Keyboard.register('DropdownMenu', {                                                                   // 3691
        'ENTER': 'open',                                                                                               // 3692
        'SPACE': 'open',                                                                                               // 3693
        'ARROW_RIGHT': 'next',                                                                                         // 3694
        'ARROW_UP': 'up',                                                                                              // 3695
        'ARROW_DOWN': 'down',                                                                                          // 3696
        'ARROW_LEFT': 'previous',                                                                                      // 3697
        'ESCAPE': 'close'                                                                                              // 3698
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the plugin, and calls _prepareMenu                                                                  //
     * @private                                                                                                        //
     * @function                                                                                                       //
     */                                                                                                                //
                                                                                                                       //
    _createClass(DropdownMenu, [{                                                                                      // 3709
      key: '_init',                                                                                                    // 3710
      value: (function () {                                                                                            // 3711
        function _init() {                                                                                             // 3711
          var subs = this.$element.find('li.is-dropdown-submenu-parent');                                              // 3712
          this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');
                                                                                                                       //
          this.$menuItems = this.$element.find('[role="menuitem"]');                                                   // 3715
          this.$tabs = this.$element.children('[role="menuitem"]');                                                    // 3716
          this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);                              // 3717
                                                                                                                       //
          if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl()) {
            this.options.alignment = 'right';                                                                          // 3720
            subs.addClass('opens-left');                                                                               // 3721
          } else {                                                                                                     //
            subs.addClass('opens-right');                                                                              // 3723
          }                                                                                                            //
          this.changed = false;                                                                                        // 3725
          this._events();                                                                                              // 3726
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 3729
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listeners to elements within the menu                                                              //
       * @private                                                                                                      //
       * @function                                                                                                     //
       */                                                                                                              //
      value: (function () {                                                                                            // 3736
        function _events() {                                                                                           // 3736
          var _this = this,                                                                                            // 3737
              hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',                       //
              parClass = 'is-dropdown-submenu-parent';                                                                 //
                                                                                                                       //
          if (this.options.clickOpen || hasTouch) {                                                                    // 3741
            this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', function (e) {                      // 3742
              var $elem = $(e.target).parentsUntil('ul', '.' + parClass),                                              // 3743
                  hasSub = $elem.hasClass(parClass),                                                                   //
                  hasClicked = $elem.attr('data-is-click') === 'true',                                                 //
                  $sub = $elem.children('.is-dropdown-submenu');                                                       //
                                                                                                                       //
              if (hasSub) {                                                                                            // 3748
                if (hasClicked) {                                                                                      // 3749
                  if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
                    return;                                                                                            // 3751
                  } else {                                                                                             //
                    e.stopImmediatePropagation();                                                                      // 3753
                    e.preventDefault();                                                                                // 3754
                    _this._hide($elem);                                                                                // 3755
                  }                                                                                                    //
                } else {                                                                                               //
                  e.preventDefault();                                                                                  // 3758
                  e.stopImmediatePropagation();                                                                        // 3759
                  _this._show($elem.children('.is-dropdown-submenu'));                                                 // 3760
                  $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);           // 3761
                }                                                                                                      //
              } else {                                                                                                 //
                return;                                                                                                // 3764
              }                                                                                                        //
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          if (!this.options.disableHover) {                                                                            // 3769
            this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {                                            // 3770
              e.stopImmediatePropagation();                                                                            // 3771
              var $elem = $(this),                                                                                     // 3772
                  hasSub = $elem.hasClass(parClass);                                                                   //
                                                                                                                       //
              if (hasSub) {                                                                                            // 3775
                clearTimeout(_this.delay);                                                                             // 3776
                _this.delay = setTimeout(function () {                                                                 // 3777
                  _this._show($elem.children('.is-dropdown-submenu'));                                                 // 3778
                }, _this.options.hoverDelay);                                                                          //
              }                                                                                                        //
            }).on('mouseleave.zf.dropdownmenu', function (e) {                                                         //
              var $elem = $(this),                                                                                     // 3782
                  hasSub = $elem.hasClass(parClass);                                                                   //
              if (hasSub && _this.options.autoclose) {                                                                 // 3784
                if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {                               // 3785
                  return false;                                                                                        // 3786
                }                                                                                                      //
                                                                                                                       //
                clearTimeout(_this.delay);                                                                             // 3789
                _this.delay = setTimeout(function () {                                                                 // 3790
                  _this._hide($elem);                                                                                  // 3791
                }, _this.options.closingTime);                                                                         //
              }                                                                                                        //
            });                                                                                                        //
          }                                                                                                            //
          this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {                                                 // 3796
            var $element = $(e.target).parentsUntil('ul', '[role="menuitem"]'),                                        // 3797
                isTab = _this.$tabs.index($element) > -1,                                                              //
                $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),                               //
                $prevElement,                                                                                          //
                $nextElement;                                                                                          //
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 3803
              if ($(this).is($element)) {                                                                              // 3804
                $prevElement = $elements.eq(i - 1);                                                                    // 3805
                $nextElement = $elements.eq(i + 1);                                                                    // 3806
                return;                                                                                                // 3807
              }                                                                                                        //
            });                                                                                                        //
                                                                                                                       //
            var nextSibling = function () {                                                                            // 3811
              if (!$element.is(':last-child')) $nextElement.children('a:first').focus();                               // 3812
            },                                                                                                         //
                prevSibling = function () {                                                                            //
              $prevElement.children('a:first').focus();                                                                // 3815
            },                                                                                                         //
                openSub = function () {                                                                                //
              var $sub = $element.children('ul.is-dropdown-submenu');                                                  // 3818
              if ($sub.length) {                                                                                       // 3819
                _this._show($sub);                                                                                     // 3820
                $element.find('li > a:first').focus();                                                                 // 3821
              } else {                                                                                                 //
                return;                                                                                                // 3823
              }                                                                                                        //
            },                                                                                                         //
                closeSub = function () {                                                                               //
              //if ($element.is(':first-child')) {                                                                     //
              var close = $element.parent('ul').parent('li');                                                          // 3828
              close.children('a:first').focus();                                                                       // 3829
              _this._hide(close);                                                                                      // 3830
              //}                                                                                                      //
            };                                                                                                         //
            var functions = {                                                                                          // 3833
              open: openSub,                                                                                           // 3834
              close: function () {                                                                                     // 3835
                _this._hide(_this.$element);                                                                           // 3836
                _this.$menuItems.find('a:first').focus(); // focus to first element                                    // 3837
              },                                                                                                       //
              handled: function () {                                                                                   // 3839
                e.preventDefault();                                                                                    // 3840
                e.stopImmediatePropagation();                                                                          // 3841
              }                                                                                                        //
            };                                                                                                         //
                                                                                                                       //
            if (isTab) {                                                                                               // 3845
              if (_this.vertical) {                                                                                    // 3846
                // vertical menu                                                                                       //
                if (_this.options.alignment === 'left') {                                                              // 3848
                  // left aligned                                                                                      //
                  $.extend(functions, {                                                                                // 3850
                    down: nextSibling,                                                                                 // 3851
                    up: prevSibling,                                                                                   // 3852
                    next: openSub,                                                                                     // 3853
                    previous: closeSub                                                                                 // 3854
                  });                                                                                                  //
                } else {                                                                                               //
                  // right aligned                                                                                     //
                  $.extend(functions, {                                                                                // 3858
                    down: nextSibling,                                                                                 // 3859
                    up: prevSibling,                                                                                   // 3860
                    next: closeSub,                                                                                    // 3861
                    previous: openSub                                                                                  // 3862
                  });                                                                                                  //
                }                                                                                                      //
              } else {                                                                                                 //
                // horizontal menu                                                                                     //
                $.extend(functions, {                                                                                  // 3867
                  next: nextSibling,                                                                                   // 3868
                  previous: prevSibling,                                                                               // 3869
                  down: openSub,                                                                                       // 3870
                  up: closeSub                                                                                         // 3871
                });                                                                                                    //
              }                                                                                                        //
            } else {                                                                                                   //
              // not tabs -> one sub                                                                                   //
              if (_this.options.alignment === 'left') {                                                                // 3876
                // left aligned                                                                                        //
                $.extend(functions, {                                                                                  // 3878
                  next: openSub,                                                                                       // 3879
                  previous: closeSub,                                                                                  // 3880
                  down: nextSibling,                                                                                   // 3881
                  up: prevSibling                                                                                      // 3882
                });                                                                                                    //
              } else {                                                                                                 //
                // right aligned                                                                                       //
                $.extend(functions, {                                                                                  // 3886
                  next: closeSub,                                                                                      // 3887
                  previous: openSub,                                                                                   // 3888
                  down: nextSibling,                                                                                   // 3889
                  up: prevSibling                                                                                      // 3890
                });                                                                                                    //
              }                                                                                                        //
            }                                                                                                          //
            Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);                                               // 3894
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds an event handler to the body to close any dropdowns on a click.                                          //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_addBodyHandler',                                                                                          // 3905
      value: (function () {                                                                                            // 3906
        function _addBodyHandler() {                                                                                   // 3906
          var $body = $(document.body),                                                                                // 3907
              _this = this;                                                                                            //
          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
            var $link = _this.$element.find(e.target);                                                                 // 3910
            if ($link.length) {                                                                                        // 3911
              return;                                                                                                  // 3912
            }                                                                                                          //
                                                                                                                       //
            _this._hide();                                                                                             // 3915
            $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');                                             // 3916
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _addBodyHandler;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Opens a dropdown pane, and checks for collisions first.                                                       //
       * @param {jQuery} $sub - ul element that is a submenu to show                                                   //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @fires DropdownMenu#show                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_show',                                                                                                    // 3929
      value: (function () {                                                                                            // 3930
        function _show($sub) {                                                                                         // 3930
          var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {                                              // 3931
            return $(el).find($sub).length > 0;                                                                        // 3932
          }));                                                                                                         //
          var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');          // 3934
          this._hide($sibs, idx);                                                                                      // 3935
          $sub.css('visibility', 'hidden').addClass('js-dropdown-active').attr({ 'aria-hidden': false }).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({ 'aria-expanded': true });
          var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);                                               // 3937
          if (!clear) {                                                                                                // 3938
            var oldClass = this.options.alignment === 'left' ? '-right' : '-left',                                     // 3939
                $parentLi = $sub.parent('.is-dropdown-submenu-parent');                                                //
            $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);                     // 3941
            clear = Foundation.Box.ImNotTouchingYou($sub, null, true);                                                 // 3942
            if (!clear) {                                                                                              // 3943
              $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');                        // 3944
            }                                                                                                          //
            this.changed = true;                                                                                       // 3946
          }                                                                                                            //
          $sub.css('visibility', '');                                                                                  // 3948
          if (this.options.closeOnClick) {                                                                             // 3949
            this._addBodyHandler();                                                                                    // 3950
          }                                                                                                            //
          /**                                                                                                          //
           * Fires when the new dropdown pane is visible.                                                              //
           * @event DropdownMenu#show                                                                                  //
           */                                                                                                          //
          this.$element.trigger('show.zf.dropdownmenu', [$sub]);                                                       // 3956
        }                                                                                                              //
                                                                                                                       //
        return _show;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.             //
       * @function                                                                                                     //
       * @param {jQuery} $elem - element with a submenu to hide                                                        //
       * @param {Number} idx - index of the $tabs collection to hide                                                   //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_hide',                                                                                                    // 3968
      value: (function () {                                                                                            // 3969
        function _hide($elem, idx) {                                                                                   // 3969
          var $toClose;                                                                                                // 3970
          if ($elem && $elem.length) {                                                                                 // 3971
            $toClose = $elem;                                                                                          // 3972
          } else if (idx !== undefined) {                                                                              //
            $toClose = this.$tabs.not(function (i, el) {                                                               // 3974
              return i === idx;                                                                                        // 3975
            });                                                                                                        //
          } else {                                                                                                     //
            $toClose = this.$element;                                                                                  // 3978
          }                                                                                                            //
          var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;             // 3980
                                                                                                                       //
          if (somethingToClose) {                                                                                      // 3982
            $toClose.find('li.is-active').add($toClose).attr({                                                         // 3983
              'aria-expanded': false,                                                                                  // 3984
              'data-is-click': false                                                                                   // 3985
            }).removeClass('is-active');                                                                               //
                                                                                                                       //
            $toClose.find('ul.js-dropdown-active').attr({                                                              // 3988
              'aria-hidden': true                                                                                      // 3989
            }).removeClass('js-dropdown-active');                                                                      //
                                                                                                                       //
            if (this.changed || $toClose.find('opens-inner').length) {                                                 // 3992
              var oldClass = this.options.alignment === 'left' ? 'right' : 'left';                                     // 3993
              $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);
              this.changed = false;                                                                                    // 3995
            }                                                                                                          //
            /**                                                                                                        //
             * Fires when the open menus are closed.                                                                   //
             * @event DropdownMenu#hide                                                                                //
             */                                                                                                        //
            this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);                                                 // 4001
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _hide;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the plugin.                                                                                          //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 4011
      value: (function () {                                                                                            // 4012
        function destroy() {                                                                                           // 4012
          this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
          $(document.body).off('.zf.dropdownmenu');                                                                    // 4014
          Foundation.Nest.Burn(this.$element, 'dropdown');                                                             // 4015
          Foundation.unregisterPlugin(this);                                                                           // 4016
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return DropdownMenu;                                                                                               // 4020
  })();                                                                                                                //
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  DropdownMenu.defaults = {                                                                                            // 4028
    /**                                                                                                                //
     * Disallows hover events from opening submenus                                                                    //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    disableHover: false,                                                                                               // 4034
    /**                                                                                                                //
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.                              //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    autoclose: true,                                                                                                   // 4040
    /**                                                                                                                //
     * Amount of time to delay opening a submenu on hover event.                                                       //
     * @option                                                                                                         //
     * @example 50                                                                                                     //
     */                                                                                                                //
    hoverDelay: 50,                                                                                                    // 4046
    /**                                                                                                                //
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.                //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    clickOpen: false,                                                                                                  // 4052
    /**                                                                                                                //
     * Amount of time to delay closing a submenu on a mouseleave event.                                                //
     * @option                                                                                                         //
     * @example 500                                                                                                    //
     */                                                                                                                //
                                                                                                                       //
    closingTime: 500,                                                                                                  // 4059
    /**                                                                                                                //
     * Position of the menu relative to what direction the submenus should open. Handled by JS.                        //
     * @option                                                                                                         //
     * @example 'left'                                                                                                 //
     */                                                                                                                //
    alignment: 'left',                                                                                                 // 4065
    /**                                                                                                                //
     * Allow clicks on the body to close any open submenus.                                                            //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    closeOnClick: true,                                                                                                // 4071
    /**                                                                                                                //
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option                                                                                                         //
     * @example 'vertical'                                                                                             //
     */                                                                                                                //
    verticalClass: 'vertical',                                                                                         // 4077
    /**                                                                                                                //
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option                                                                                                         //
     * @example 'align-right'                                                                                          //
     */                                                                                                                //
    rightClass: 'align-right',                                                                                         // 4083
    /**                                                                                                                //
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.     //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    forceFollow: true                                                                                                  // 4089
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(DropdownMenu, 'DropdownMenu');                                                                     // 4093
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 4095
                                                                                                                       //
var _createClass = (function () {                                                                                      // 4097
  function defineProperties(target, props) {                                                                           // 4097
    for (var i = 0; i < props.length; i++) {                                                                           // 4097
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 4099
  if (!(instance instanceof Constructor)) {                                                                            // 4099
    throw new TypeError("Cannot call a class as a function");                                                          // 4099
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 4101
                                                                                                                       //
  /**                                                                                                                  //
   * Equalizer module.                                                                                                 //
   * @module foundation.equalizer                                                                                      //
   */                                                                                                                  //
                                                                                                                       //
  var Equalizer = (function () {                                                                                       // 4108
    /**                                                                                                                //
     * Creates a new instance of Equalizer.                                                                            //
     * @class                                                                                                          //
     * @fires Equalizer#init                                                                                           //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Equalizer(element, options) {                                                                             // 4117
      _classCallCheck(this, Equalizer);                                                                                // 4118
                                                                                                                       //
      this.$element = element;                                                                                         // 4120
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);                                  // 4121
                                                                                                                       //
      this._init();                                                                                                    // 4123
                                                                                                                       //
      Foundation.registerPlugin(this, 'Equalizer');                                                                    // 4125
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.                      //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Equalizer, [{                                                                                         // 4134
      key: '_init',                                                                                                    // 4135
      value: (function () {                                                                                            // 4136
        function _init() {                                                                                             // 4136
          var eqId = this.$element.attr('data-equalizer') || '';                                                       // 4137
          var $watched = this.$element.find('[data-equalizer-watch="' + eqId + '"]');                                  // 4138
                                                                                                                       //
          this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');                   // 4140
          this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));                                  // 4141
                                                                                                                       //
          this.hasNested = this.$element.find('[data-equalizer]').length > 0;                                          // 4143
          this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;                    // 4144
          this.isOn = false;                                                                                           // 4145
                                                                                                                       //
          var imgs = this.$element.find('img');                                                                        // 4147
          var tooSmall;                                                                                                // 4148
          if (this.options.equalizeOn) {                                                                               // 4149
            tooSmall = this._checkMQ();                                                                                // 4150
            $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));                                           // 4151
          } else {                                                                                                     //
            this._events();                                                                                            // 4153
          }                                                                                                            //
          if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {                                // 4155
            if (imgs.length) {                                                                                         // 4156
              Foundation.onImagesLoaded(imgs, this._reflow.bind(this));                                                // 4157
            } else {                                                                                                   //
              this._reflow();                                                                                          // 4159
            }                                                                                                          //
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Removes event listeners if the breakpoint is too small.                                                       //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_pauseEvents',                                                                                             // 4170
      value: (function () {                                                                                            // 4171
        function _pauseEvents() {                                                                                      // 4171
          this.isOn = false;                                                                                           // 4172
          this.$element.off('.zf.equalizer resizeme.zf.trigger');                                                      // 4173
        }                                                                                                              //
                                                                                                                       //
        return _pauseEvents;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for Equalizer.                                                                             //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 4182
      value: (function () {                                                                                            // 4183
        function _events() {                                                                                           // 4183
          var _this = this;                                                                                            // 4184
          this._pauseEvents();                                                                                         // 4185
          if (this.hasNested) {                                                                                        // 4186
            this.$element.on('postequalized.zf.equalizer', function (e) {                                              // 4187
              if (e.target !== _this.$element[0]) {                                                                    // 4188
                _this._reflow();                                                                                       // 4189
              }                                                                                                        //
            });                                                                                                        //
          } else {                                                                                                     //
            this.$element.on('resizeme.zf.trigger', this._reflow.bind(this));                                          // 4193
          }                                                                                                            //
          this.isOn = true;                                                                                            // 4195
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Checks the current breakpoint to the minimum required size.                                                   //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_checkMQ',                                                                                                 // 4204
      value: (function () {                                                                                            // 4205
        function _checkMQ() {                                                                                          // 4205
          var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);                                      // 4206
          if (tooSmall) {                                                                                              // 4207
            if (this.isOn) {                                                                                           // 4208
              this._pauseEvents();                                                                                     // 4209
              this.$watched.css('height', 'auto');                                                                     // 4210
            }                                                                                                          //
          } else {                                                                                                     //
            if (!this.isOn) {                                                                                          // 4213
              this._events();                                                                                          // 4214
            }                                                                                                          //
          }                                                                                                            //
          return tooSmall;                                                                                             // 4217
        }                                                                                                              //
                                                                                                                       //
        return _checkMQ;                                                                                               //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * A noop version for the plugin                                                                                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_killswitch',                                                                                              // 4226
      value: (function () {                                                                                            // 4227
        function _killswitch() {                                                                                       // 4227
          return;                                                                                                      // 4228
        }                                                                                                              //
                                                                                                                       //
        return _killswitch;                                                                                            //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Calls necessary functions to update Equalizer upon DOM change                                                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_reflow',                                                                                                  // 4237
      value: (function () {                                                                                            // 4238
        function _reflow() {                                                                                           // 4238
          if (!this.options.equalizeOnStack) {                                                                         // 4239
            if (this._isStacked()) {                                                                                   // 4240
              this.$watched.css('height', 'auto');                                                                     // 4241
              return false;                                                                                            // 4242
            }                                                                                                          //
          }                                                                                                            //
          if (this.options.equalizeByRow) {                                                                            // 4245
            this.getHeightsByRow(this.applyHeightByRow.bind(this));                                                    // 4246
          } else {                                                                                                     //
            this.getHeights(this.applyHeight.bind(this));                                                              // 4248
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _reflow;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Manually determines if the first 2 elements are *NOT* stacked.                                                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_isStacked',                                                                                               // 4258
      value: (function () {                                                                                            // 4259
        function _isStacked() {                                                                                        // 4259
          return this.$watched[0].offsetTop !== this.$watched[1].offsetTop;                                            // 4260
        }                                                                                                              //
                                                                                                                       //
        return _isStacked;                                                                                             //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array         //
       * @param {Function} cb - A non-optional callback to return the heights array to.                                //
       * @returns {Array} heights - An array of heights of children within Equalizer container                         //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'getHeights',                                                                                               // 4270
      value: (function () {                                                                                            // 4271
        function getHeights(cb) {                                                                                      // 4271
          var heights = [];                                                                                            // 4272
          for (var i = 0, len = this.$watched.length; i < len; i++) {                                                  // 4273
            this.$watched[i].style.height = 'auto';                                                                    // 4274
            heights.push(this.$watched[i].offsetHeight);                                                               // 4275
          }                                                                                                            //
          cb(heights);                                                                                                 // 4277
        }                                                                                                              //
                                                                                                                       //
        return getHeights;                                                                                             //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array         //
       * @param {Function} cb - A non-optional callback to return the heights array to.                                //
       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'getHeightsByRow',                                                                                          // 4287
      value: (function () {                                                                                            // 4288
        function getHeightsByRow(cb) {                                                                                 // 4288
          var lastElTopOffset = this.$watched.first().offset().top,                                                    // 4289
              groups = [],                                                                                             //
              group = 0;                                                                                               //
          //group by Row                                                                                               //
          groups[group] = [];                                                                                          // 4293
          for (var i = 0, len = this.$watched.length; i < len; i++) {                                                  // 4294
            this.$watched[i].style.height = 'auto';                                                                    // 4295
            //maybe could use this.$watched[i].offsetTop                                                               //
            var elOffsetTop = $(this.$watched[i]).offset().top;                                                        // 4297
            if (elOffsetTop != lastElTopOffset) {                                                                      // 4298
              group++;                                                                                                 // 4299
              groups[group] = [];                                                                                      // 4300
              lastElTopOffset = elOffsetTop;                                                                           // 4301
            }                                                                                                          //
            groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);                                     // 4303
          }                                                                                                            //
                                                                                                                       //
          for (var j = 0, ln = groups.length; j < ln; j++) {                                                           // 4306
            var heights = $(groups[j]).map(function () {                                                               // 4307
              return this[1];                                                                                          // 4308
            }).get();                                                                                                  //
            var max = Math.max.apply(null, heights);                                                                   // 4310
            groups[j].push(max);                                                                                       // 4311
          }                                                                                                            //
          cb(groups);                                                                                                  // 4313
        }                                                                                                              //
                                                                                                                       //
        return getHeightsByRow;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest                     //
       * @param {array} heights - An array of heights of children within Equalizer container                           //
       * @fires Equalizer#preequalized                                                                                 //
       * @fires Equalizer#postequalized                                                                                //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'applyHeight',                                                                                              // 4324
      value: (function () {                                                                                            // 4325
        function applyHeight(heights) {                                                                                // 4325
          var max = Math.max.apply(null, heights);                                                                     // 4326
          /**                                                                                                          //
           * Fires before the heights are applied                                                                      //
           * @event Equalizer#preequalized                                                                             //
           */                                                                                                          //
          this.$element.trigger('preequalized.zf.equalizer');                                                          // 4331
                                                                                                                       //
          this.$watched.css('height', max);                                                                            // 4333
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the heights have been applied                                                                  //
           * @event Equalizer#postequalized                                                                            //
           */                                                                                                          //
          this.$element.trigger('postequalized.zf.equalizer');                                                         // 4339
        }                                                                                                              //
                                                                                                                       //
        return applyHeight;                                                                                            //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row              //
       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       * @fires Equalizer#preequalized                                                                                 //
       * @fires Equalizer#preequalizedRow                                                                              //
       * @fires Equalizer#postequalizedRow                                                                             //
       * @fires Equalizer#postequalized                                                                                //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'applyHeightByRow',                                                                                         // 4352
      value: (function () {                                                                                            // 4353
        function applyHeightByRow(groups) {                                                                            // 4353
          /**                                                                                                          //
           * Fires before the heights are applied                                                                      //
           */                                                                                                          //
          this.$element.trigger('preequalized.zf.equalizer');                                                          // 4357
          for (var i = 0, len = groups.length; i < len; i++) {                                                         // 4358
            var groupsILength = groups[i].length,                                                                      // 4359
                max = groups[i][groupsILength - 1];                                                                    //
            if (groupsILength <= 2) {                                                                                  // 4361
              $(groups[i][0][0]).css({ 'height': 'auto' });                                                            // 4362
              continue;                                                                                                // 4363
            }                                                                                                          //
            /**                                                                                                        //
              * Fires before the heights per row are applied                                                           //
              * @event Equalizer#preequalizedRow                                                                       //
              */                                                                                                       //
            this.$element.trigger('preequalizedrow.zf.equalizer');                                                     // 4369
            for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {                                                 // 4370
              $(groups[i][j][0]).css({ 'height': max });                                                               // 4371
            }                                                                                                          //
            /**                                                                                                        //
              * Fires when the heights per row have been applied                                                       //
              * @event Equalizer#postequalizedRow                                                                      //
              */                                                                                                       //
            this.$element.trigger('postequalizedrow.zf.equalizer');                                                    // 4377
          }                                                                                                            //
          /**                                                                                                          //
           * Fires when the heights have been applied                                                                  //
           */                                                                                                          //
          this.$element.trigger('postequalized.zf.equalizer');                                                         // 4382
        }                                                                                                              //
                                                                                                                       //
        return applyHeightByRow;                                                                                       //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of Equalizer.                                                                            //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 4391
      value: (function () {                                                                                            // 4392
        function destroy() {                                                                                           // 4392
          this._pauseEvents();                                                                                         // 4393
          this.$watched.css('height', 'auto');                                                                         // 4394
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 4396
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Equalizer;                                                                                                  // 4400
  })();                                                                                                                //
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  Equalizer.defaults = {                                                                                               // 4408
    /**                                                                                                                //
     * Enable height equalization when stacked on smaller screens.                                                     //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    equalizeOnStack: true,                                                                                             // 4414
    /**                                                                                                                //
     * Enable height equalization row by row.                                                                          //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    equalizeByRow: false,                                                                                              // 4420
    /**                                                                                                                //
     * String representing the minimum breakpoint size the plugin should equalize heights on.                          //
     * @option                                                                                                         //
     * @example 'medium'                                                                                               //
     */                                                                                                                //
    equalizeOn: ''                                                                                                     // 4426
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Equalizer, 'Equalizer');                                                                           // 4430
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 4432
                                                                                                                       //
var _createClass = (function () {                                                                                      // 4434
  function defineProperties(target, props) {                                                                           // 4434
    for (var i = 0; i < props.length; i++) {                                                                           // 4434
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 4436
  if (!(instance instanceof Constructor)) {                                                                            // 4436
    throw new TypeError("Cannot call a class as a function");                                                          // 4436
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 4438
                                                                                                                       //
  /**                                                                                                                  //
   * Interchange module.                                                                                               //
   * @module foundation.interchange                                                                                    //
   * @requires foundation.util.mediaQuery                                                                              //
   * @requires foundation.util.timerAndImageLoader                                                                     //
   */                                                                                                                  //
                                                                                                                       //
  var Interchange = (function () {                                                                                     // 4447
    /**                                                                                                                //
     * Creates a new instance of Interchange.                                                                          //
     * @class                                                                                                          //
     * @fires Interchange#init                                                                                         //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Interchange(element, options) {                                                                           // 4456
      _classCallCheck(this, Interchange);                                                                              // 4457
                                                                                                                       //
      this.$element = element;                                                                                         // 4459
      this.options = $.extend({}, Interchange.defaults, options);                                                      // 4460
      this.rules = [];                                                                                                 // 4461
      this.currentPath = '';                                                                                           // 4462
                                                                                                                       //
      this._init();                                                                                                    // 4464
      this._events();                                                                                                  // 4465
                                                                                                                       //
      Foundation.registerPlugin(this, 'Interchange');                                                                  // 4467
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.                  //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Interchange, [{                                                                                       // 4477
      key: '_init',                                                                                                    // 4478
      value: (function () {                                                                                            // 4479
        function _init() {                                                                                             // 4479
          this._addBreakpoints();                                                                                      // 4480
          this._generateRules();                                                                                       // 4481
          this._reflow();                                                                                              // 4482
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for Interchange.                                                                           //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 4492
      value: (function () {                                                                                            // 4493
        function _events() {                                                                                           // 4493
          $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));                // 4494
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Calls necessary functions to update Interchange upon DOM change                                               //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_reflow',                                                                                                  // 4504
      value: (function () {                                                                                            // 4505
        function _reflow() {                                                                                           // 4505
          var match;                                                                                                   // 4506
                                                                                                                       //
          // Iterate through each rule, but only save the last match                                                   //
          for (var i in babelHelpers.sanitizeForInObject(this.rules)) {                                                // 4509
            var rule = this.rules[i];                                                                                  // 4510
                                                                                                                       //
            if (window.matchMedia(rule.query).matches) {                                                               // 4512
              match = rule;                                                                                            // 4513
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          if (match) {                                                                                                 // 4517
            this.replace(match.path);                                                                                  // 4518
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _reflow;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.                      //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_addBreakpoints',                                                                                          // 4529
      value: (function () {                                                                                            // 4530
        function _addBreakpoints() {                                                                                   // 4530
          for (var i in babelHelpers.sanitizeForInObject(Foundation.MediaQuery.queries)) {                             // 4531
            var query = Foundation.MediaQuery.queries[i];                                                              // 4532
            Interchange.SPECIAL_QUERIES[query.name] = query.value;                                                     // 4533
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _addBreakpoints;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Checks the Interchange element for the provided media query + content pairings                                //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {Object} element - jQuery object that is an Interchange instance                                       //
       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_generateRules',                                                                                           // 4546
      value: (function () {                                                                                            // 4547
        function _generateRules(element) {                                                                             // 4547
          var rulesList = [];                                                                                          // 4548
          var rules;                                                                                                   // 4549
                                                                                                                       //
          if (this.options.rules) {                                                                                    // 4551
            rules = this.options.rules;                                                                                // 4552
          } else {                                                                                                     //
            rules = this.$element.data('interchange').match(/\[.*?\]/g);                                               // 4554
          }                                                                                                            //
                                                                                                                       //
          for (var i in babelHelpers.sanitizeForInObject(rules)) {                                                     // 4557
            var rule = rules[i].slice(1, -1).split(', ');                                                              // 4558
            var path = rule.slice(0, -1).join('');                                                                     // 4559
            var query = rule[rule.length - 1];                                                                         // 4560
                                                                                                                       //
            if (Interchange.SPECIAL_QUERIES[query]) {                                                                  // 4562
              query = Interchange.SPECIAL_QUERIES[query];                                                              // 4563
            }                                                                                                          //
                                                                                                                       //
            rulesList.push({                                                                                           // 4566
              path: path,                                                                                              // 4567
              query: query                                                                                             // 4568
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          this.rules = rulesList;                                                                                      // 4572
        }                                                                                                              //
                                                                                                                       //
        return _generateRules;                                                                                         //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Update the `src` property of an image, or change the HTML of a container, to the specified path.              //
       * @function                                                                                                     //
       * @param {String} path - Path to the image or HTML partial.                                                     //
       * @fires Interchange#replaced                                                                                   //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'replace',                                                                                                  // 4583
      value: (function () {                                                                                            // 4584
        function replace(path) {                                                                                       // 4584
          if (this.currentPath === path) return;                                                                       // 4585
                                                                                                                       //
          var _this = this,                                                                                            // 4587
              trigger = 'replaced.zf.interchange';                                                                     //
                                                                                                                       //
          // Replacing images                                                                                          //
          if (this.$element[0].nodeName === 'IMG') {                                                                   // 4591
            this.$element.attr('src', path).load(function () {                                                         // 4592
              _this.currentPath = path;                                                                                // 4593
            }).trigger(trigger);                                                                                       //
          }                                                                                                            //
          // Replacing background images                                                                               //
          else if (path.match(/\.(gif|jpg|jpeg|tiff|png)([?#].*)?/i)) {                                                //
              this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);                         // 4598
            }                                                                                                          //
            // Replacing HTML                                                                                          //
            else {                                                                                                     //
                $.get(path, function (response) {                                                                      // 4602
                  _this.$element.html(response).trigger(trigger);                                                      // 4603
                  $(response).foundation();                                                                            // 4604
                  _this.currentPath = path;                                                                            // 4605
                });                                                                                                    //
              }                                                                                                        //
                                                                                                                       //
          /**                                                                                                          //
           * Fires when content in an Interchange element is done being loaded.                                        //
           * @event Interchange#replaced                                                                               //
           */                                                                                                          //
          // this.$element.trigger('replaced.zf.interchange');                                                         //
        }                                                                                                              //
                                                                                                                       //
        return replace;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of interchange.                                                                          //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 4622
      value: (function () {                                                                                            // 4623
        function destroy() {                                                                                           // 4623
          //TODO this.                                                                                                 //
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Interchange;                                                                                                // 4628
  })();                                                                                                                //
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  Interchange.defaults = {                                                                                             // 4636
    /**                                                                                                                //
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.                    //
     * @option                                                                                                         //
     */                                                                                                                //
    rules: null                                                                                                        // 4641
  };                                                                                                                   //
                                                                                                                       //
  Interchange.SPECIAL_QUERIES = {                                                                                      // 4644
    'landscape': 'screen and (orientation: landscape)',                                                                // 4645
    'portrait': 'screen and (orientation: portrait)',                                                                  // 4646
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Interchange, 'Interchange');                                                                       // 4651
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 4653
                                                                                                                       //
var _createClass = (function () {                                                                                      // 4655
  function defineProperties(target, props) {                                                                           // 4655
    for (var i = 0; i < props.length; i++) {                                                                           // 4655
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 4657
  if (!(instance instanceof Constructor)) {                                                                            // 4657
    throw new TypeError("Cannot call a class as a function");                                                          // 4657
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 4659
                                                                                                                       //
  /**                                                                                                                  //
   * Magellan module.                                                                                                  //
   * @module foundation.magellan                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  var Magellan = (function () {                                                                                        // 4666
    /**                                                                                                                //
     * Creates a new instance of Magellan.                                                                             //
     * @class                                                                                                          //
     * @fires Magellan#init                                                                                            //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Magellan(element, options) {                                                                              // 4675
      _classCallCheck(this, Magellan);                                                                                 // 4676
                                                                                                                       //
      this.$element = element;                                                                                         // 4678
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);                                   // 4679
                                                                                                                       //
      this._init();                                                                                                    // 4681
                                                                                                                       //
      Foundation.registerPlugin(this, 'Magellan');                                                                     // 4683
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Magellan, [{                                                                                          // 4692
      key: '_init',                                                                                                    // 4693
      value: (function () {                                                                                            // 4694
        function _init() {                                                                                             // 4694
          var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');                                       // 4695
          var _this = this;                                                                                            // 4696
          this.$targets = $('[data-magellan-target]');                                                                 // 4697
          this.$links = this.$element.find('a');                                                                       // 4698
          this.$element.attr({                                                                                         // 4699
            'data-resize': id,                                                                                         // 4700
            'data-scroll': id,                                                                                         // 4701
            'id': id                                                                                                   // 4702
          });                                                                                                          //
          this.$active = $();                                                                                          // 4704
          this.scrollPos = parseInt(window.pageYOffset, 10);                                                           // 4705
                                                                                                                       //
          this._events();                                                                                              // 4707
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Calculates an array of pixel values that are the demarcation lines between locations on the page.             //
       * Can be invoked if new elements are added or the size of a location changes.                                   //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'calcPoints',                                                                                               // 4717
      value: (function () {                                                                                            // 4718
        function calcPoints() {                                                                                        // 4718
          var _this = this,                                                                                            // 4719
              body = document.body,                                                                                    //
              html = document.documentElement;                                                                         //
                                                                                                                       //
          this.points = [];                                                                                            // 4723
          this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));                                // 4724
          this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));
                                                                                                                       //
          this.$targets.each(function () {                                                                             // 4727
            var $tar = $(this),                                                                                        // 4728
                pt = Math.round($tar.offset().top - _this.options.threshold);                                          //
            $tar.targetPoint = pt;                                                                                     // 4730
            _this.points.push(pt);                                                                                     // 4731
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return calcPoints;                                                                                             //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for Magellan.                                                                              //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 4741
      value: (function () {                                                                                            // 4742
        function _events() {                                                                                           // 4742
          var _this = this,                                                                                            // 4743
              $body = $('html, body'),                                                                                 //
              opts = {                                                                                                 //
            duration: _this.options.animationDuration,                                                                 // 4746
            easing: _this.options.animationEasing                                                                      // 4747
          };                                                                                                           //
          $(window).one('load', function () {                                                                          // 4749
            if (_this.options.deepLinking) {                                                                           // 4750
              if (location.hash) {                                                                                     // 4751
                _this.scrollToLoc(location.hash);                                                                      // 4752
              }                                                                                                        //
            }                                                                                                          //
            _this.calcPoints();                                                                                        // 4755
            _this._updateActive();                                                                                     // 4756
          });                                                                                                          //
                                                                                                                       //
          this.$element.on({                                                                                           // 4759
            'resizeme.zf.trigger': this.reflow.bind(this),                                                             // 4760
            'scrollme.zf.trigger': this._updateActive.bind(this)                                                       // 4761
          }).on('click.zf.magellan', 'a[href^="#"]', function (e) {                                                    //
            e.preventDefault();                                                                                        // 4763
            var arrival = this.getAttribute('href');                                                                   // 4764
            _this.scrollToLoc(arrival);                                                                                // 4765
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Function to scroll to a given location on the page.                                                           //
       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'                                //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'scrollToLoc',                                                                                              // 4776
      value: (function () {                                                                                            // 4777
        function scrollToLoc(loc) {                                                                                    // 4777
          var scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);       // 4778
                                                                                                                       //
          $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing);
        }                                                                                                              //
                                                                                                                       //
        return scrollToLoc;                                                                                            //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Calls necessary functions to update Magellan upon DOM change                                                  //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'reflow',                                                                                                   // 4789
      value: (function () {                                                                                            // 4790
        function reflow() {                                                                                            // 4790
          this.calcPoints();                                                                                           // 4791
          this._updateActive();                                                                                        // 4792
        }                                                                                                              //
                                                                                                                       //
        return reflow;                                                                                                 //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
       * @private                                                                                                      //
       * @function                                                                                                     //
       * @fires Magellan#update                                                                                        //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_updateActive',                                                                                            // 4803
      value: (function () {                                                                                            // 4804
        function _updateActive() /*evt, elem, scrollPos*/{                                                             // 4804
          var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),                                               // 4805
              curIdx;                                                                                                  //
                                                                                                                       //
          if (winPos + this.winHeight === this.docHeight) {                                                            // 4808
            curIdx = this.points.length - 1;                                                                           // 4809
          } else if (winPos < this.points[0]) {                                                                        //
            curIdx = 0;                                                                                                // 4811
          } else {                                                                                                     //
            var isDown = this.scrollPos < winPos,                                                                      // 4813
                _this = this,                                                                                          //
                curVisible = this.points.filter(function (p, i) {                                                      //
              return isDown ? p <= winPos : p - _this.options.threshold <= winPos; //&& winPos >= _this.points[i -1] - _this.options.threshold;
            });                                                                                                        //
            curIdx = curVisible.length ? curVisible.length - 1 : 0;                                                    // 4818
          }                                                                                                            //
                                                                                                                       //
          this.$active.removeClass(this.options.activeClass);                                                          // 4821
          this.$active = this.$links.eq(curIdx).addClass(this.options.activeClass);                                    // 4822
                                                                                                                       //
          if (this.options.deepLinking) {                                                                              // 4824
            var hash = this.$active[0].getAttribute('href');                                                           // 4825
            if (window.history.pushState) {                                                                            // 4826
              window.history.pushState(null, null, hash);                                                              // 4827
            } else {                                                                                                   //
              window.location.hash = hash;                                                                             // 4829
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          this.scrollPos = winPos;                                                                                     // 4833
          /**                                                                                                          //
           * Fires when magellan is finished updating to the new active element.                                       //
           * @event Magellan#update                                                                                    //
           */                                                                                                          //
          this.$element.trigger('update.zf.magellan', [this.$active]);                                                 // 4838
        }                                                                                                              //
                                                                                                                       //
        return _updateActive;                                                                                          //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of Magellan and resets the url of the window.                                            //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 4847
      value: (function () {                                                                                            // 4848
        function destroy() {                                                                                           // 4848
          this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);
                                                                                                                       //
          if (this.options.deepLinking) {                                                                              // 4851
            var hash = this.$active[0].getAttribute('href');                                                           // 4852
            window.location.hash.replace(hash, '');                                                                    // 4853
          }                                                                                                            //
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 4856
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Magellan;                                                                                                   // 4860
  })();                                                                                                                //
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  Magellan.defaults = {                                                                                                // 4868
    /**                                                                                                                //
     * Amount of time, in ms, the animated scrolling should take between locations.                                    //
     * @option                                                                                                         //
     * @example 500                                                                                                    //
     */                                                                                                                //
    animationDuration: 500,                                                                                            // 4874
    /**                                                                                                                //
     * Animation style to use when scrolling between locations.                                                        //
     * @option                                                                                                         //
     * @example 'ease-in-out'                                                                                          //
     */                                                                                                                //
    animationEasing: 'linear',                                                                                         // 4880
    /**                                                                                                                //
     * Number of pixels to use as a marker for location changes.                                                       //
     * @option                                                                                                         //
     * @example 50                                                                                                     //
     */                                                                                                                //
    threshold: 50,                                                                                                     // 4886
    /**                                                                                                                //
     * Class applied to the active locations link on the magellan container.                                           //
     * @option                                                                                                         //
     * @example 'active'                                                                                               //
     */                                                                                                                //
    activeClass: 'active',                                                                                             // 4892
    /**                                                                                                                //
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.               //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    deepLinking: false,                                                                                                // 4898
    /**                                                                                                                //
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.                      //
     * @option                                                                                                         //
     * @example 25                                                                                                     //
     */                                                                                                                //
    barOffset: 0                                                                                                       // 4904
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Magellan, 'Magellan');                                                                             // 4908
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 4910
                                                                                                                       //
var _createClass = (function () {                                                                                      // 4912
  function defineProperties(target, props) {                                                                           // 4912
    for (var i = 0; i < props.length; i++) {                                                                           // 4912
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 4914
  if (!(instance instanceof Constructor)) {                                                                            // 4914
    throw new TypeError("Cannot call a class as a function");                                                          // 4914
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 4916
                                                                                                                       //
  /**                                                                                                                  //
   * OffCanvas module.                                                                                                 //
   * @module foundation.offcanvas                                                                                      //
   * @requires foundation.util.mediaQuery                                                                              //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.motion                                                                                  //
   */                                                                                                                  //
                                                                                                                       //
  var OffCanvas = (function () {                                                                                       // 4926
    /**                                                                                                                //
     * Creates a new instance of an off-canvas wrapper.                                                                //
     * @class                                                                                                          //
     * @fires OffCanvas#init                                                                                           //
     * @param {Object} element - jQuery object to initialize.                                                          //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function OffCanvas(element, options) {                                                                             // 4935
      _classCallCheck(this, OffCanvas);                                                                                // 4936
                                                                                                                       //
      this.$element = element;                                                                                         // 4938
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);                                  // 4939
      this.$lastTrigger = $();                                                                                         // 4940
                                                                                                                       //
      this._init();                                                                                                    // 4942
      this._events();                                                                                                  // 4943
                                                                                                                       //
      Foundation.registerPlugin(this, 'OffCanvas');                                                                    // 4945
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).                                      //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(OffCanvas, [{                                                                                         // 4955
      key: '_init',                                                                                                    // 4956
      value: (function () {                                                                                            // 4957
        function _init() {                                                                                             // 4957
          var id = this.$element.attr('id');                                                                           // 4958
                                                                                                                       //
          this.$element.attr('aria-hidden', 'true');                                                                   // 4960
                                                                                                                       //
          // Find triggers that affect this element and add aria-expanded to them                                      //
          $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);
                                                                                                                       //
          // Add a close trigger over the body if necessary                                                            //
          if (this.options.closeOnClick) {                                                                             // 4966
            if ($('.js-off-canvas-exit').length) {                                                                     // 4967
              this.$exiter = $('.js-off-canvas-exit');                                                                 // 4968
            } else {                                                                                                   //
              var exiter = document.createElement('div');                                                              // 4970
              exiter.setAttribute('class', 'js-off-canvas-exit');                                                      // 4971
              $('[data-off-canvas-content]').append(exiter);                                                           // 4972
                                                                                                                       //
              this.$exiter = $(exiter);                                                                                // 4974
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);
                                                                                                                       //
          if (this.options.isRevealed) {                                                                               // 4980
            this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
            this._setMQChecker();                                                                                      // 4982
          }                                                                                                            //
          if (!this.options.transitionTime) {                                                                          // 4984
            this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers to the off-canvas wrapper and the exit overlay.                                           //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 4996
      value: (function () {                                                                                            // 4997
        function _events() {                                                                                           // 4997
          this.$element.off('.zf.trigger .zf.offcanvas').on({                                                          // 4998
            'open.zf.trigger': this.open.bind(this),                                                                   // 4999
            'close.zf.trigger': this.close.bind(this),                                                                 // 5000
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 5001
            'keydown.zf.offcanvas': this._handleKeyboard.bind(this)                                                    // 5002
          });                                                                                                          //
                                                                                                                       //
          if (this.options.closeOnClick && this.$exiter.length) {                                                      // 5005
            this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });                                          // 5006
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Applies event listener for elements that will reveal at certain breakpoints.                                  //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setMQChecker',                                                                                            // 5016
      value: (function () {                                                                                            // 5017
        function _setMQChecker() {                                                                                     // 5017
          var _this = this;                                                                                            // 5018
                                                                                                                       //
          $(window).on('changed.zf.mediaquery', function () {                                                          // 5020
            if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {                                               // 5021
              _this.reveal(true);                                                                                      // 5022
            } else {                                                                                                   //
              _this.reveal(false);                                                                                     // 5024
            }                                                                                                          //
          }).one('load.zf.offcanvas', function () {                                                                    //
            if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {                                               // 5027
              _this.reveal(true);                                                                                      // 5028
            }                                                                                                          //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _setMQChecker;                                                                                          //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.                             //
       * @param {Boolean} isRevealed - true if element should be revealed.                                             //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'reveal',                                                                                                   // 5040
      value: (function () {                                                                                            // 5041
        function reveal(isRevealed) {                                                                                  // 5041
          var $closer = this.$element.find('[data-close]');                                                            // 5042
          if (isRevealed) {                                                                                            // 5043
            this.close();                                                                                              // 5044
            this.isRevealed = true;                                                                                    // 5045
            // if (!this.options.forceTop) {                                                                           //
            //   var scrollPos = parseInt(window.pageYOffset);                                                         //
            //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';                                //
            // }                                                                                                       //
            // if (this.options.isSticky) { this._stick(); }                                                           //
            this.$element.off('open.zf.trigger toggle.zf.trigger');                                                    // 5051
            if ($closer.length) {                                                                                      // 5052
              $closer.hide();                                                                                          // 5053
            }                                                                                                          //
          } else {                                                                                                     //
            this.isRevealed = false;                                                                                   // 5056
            // if (this.options.isSticky || !this.options.forceTop) {                                                  //
            //   this.$element[0].style.transform = '';                                                                //
            //   $(window).off('scroll.zf.offcanvas');                                                                 //
            // }                                                                                                       //
            this.$element.on({                                                                                         // 5061
              'open.zf.trigger': this.open.bind(this),                                                                 // 5062
              'toggle.zf.trigger': this.toggle.bind(this)                                                              // 5063
            });                                                                                                        //
            if ($closer.length) {                                                                                      // 5065
              $closer.show();                                                                                          // 5066
            }                                                                                                          //
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return reveal;                                                                                                 //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Opens the off-canvas menu.                                                                                    //
       * @function                                                                                                     //
       * @param {Object} event - Event object passed from listener.                                                    //
       * @param {jQuery} trigger - element that triggered the off-canvas to open.                                      //
       * @fires OffCanvas#opened                                                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'open',                                                                                                     // 5080
      value: (function () {                                                                                            // 5081
        function open(event, trigger) {                                                                                // 5081
          if (this.$element.hasClass('is-open') || this.isRevealed) {                                                  // 5082
            return;                                                                                                    // 5083
          }                                                                                                            //
          var _this = this,                                                                                            // 5085
              $body = $(document.body);                                                                                //
                                                                                                                       //
          if (this.options.forceTop) {                                                                                 // 5088
            $('body').scrollTop(0);                                                                                    // 5089
          }                                                                                                            //
          // window.pageYOffset = 0;                                                                                   //
                                                                                                                       //
          // if (!this.options.forceTop) {                                                                             //
          //   var scrollPos = parseInt(window.pageYOffset);                                                           //
          //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';                                  //
          //   if (this.$exiter.length) {                                                                              //
          //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';                                 //
          //   }                                                                                                       //
          // }                                                                                                         //
          /**                                                                                                          //
           * Fires when the off-canvas menu opens.                                                                     //
           * @event OffCanvas#opened                                                                                   //
           */                                                                                                          //
          Foundation.Move(this.options.transitionTime, this.$element, function () {                                    // 5104
            $('[data-off-canvas-wrapper]').addClass('is-off-canvas-open is-open-' + _this.options.position);           // 5105
                                                                                                                       //
            _this.$element.addClass('is-open');                                                                        // 5107
                                                                                                                       //
            // if (_this.options.isSticky) {                                                                           //
            //   _this._stick();                                                                                       //
            // }                                                                                                       //
          });                                                                                                          //
          this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');                                   // 5113
                                                                                                                       //
          if (this.options.closeOnClick) {                                                                             // 5115
            this.$exiter.addClass('is-visible');                                                                       // 5116
          }                                                                                                            //
                                                                                                                       //
          if (trigger) {                                                                                               // 5119
            this.$lastTrigger = trigger.attr('aria-expanded', 'true');                                                 // 5120
          }                                                                                                            //
                                                                                                                       //
          if (this.options.autoFocus) {                                                                                // 5123
            this.$element.one(Foundation.transitionend(this.$element), function () {                                   // 5124
              _this.$element.find('a, button').eq(0).focus();                                                          // 5125
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          if (this.options.trapFocus) {                                                                                // 5129
            $('[data-off-canvas-content]').attr('tabindex', '-1');                                                     // 5130
            this._trapFocus();                                                                                         // 5131
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return open;                                                                                                   //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Traps focus within the offcanvas on open.                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_trapFocus',                                                                                               // 5141
      value: (function () {                                                                                            // 5142
        function _trapFocus() {                                                                                        // 5142
          var focusable = Foundation.Keyboard.findFocusable(this.$element),                                            // 5143
              first = focusable.eq(0),                                                                                 //
              last = focusable.eq(-1);                                                                                 //
                                                                                                                       //
          focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {                                     // 5147
            if (e.which === 9 || e.keycode === 9) {                                                                    // 5148
              if (e.target === last[0] && !e.shiftKey) {                                                               // 5149
                e.preventDefault();                                                                                    // 5150
                first.focus();                                                                                         // 5151
              }                                                                                                        //
              if (e.target === first[0] && e.shiftKey) {                                                               // 5153
                e.preventDefault();                                                                                    // 5154
                last.focus();                                                                                          // 5155
              }                                                                                                        //
            }                                                                                                          //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _trapFocus;                                                                                             //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Allows the offcanvas to appear sticky utilizing translate properties.                                         //
       * @private                                                                                                      //
       */                                                                                                              //
      // OffCanvas.prototype._stick = function() {                                                                     //
      //   var elStyle = this.$element[0].style;                                                                       //
      //                                                                                                               //
      //   if (this.options.closeOnClick) {                                                                            //
      //     var exitStyle = this.$exiter[0].style;                                                                    //
      //   }                                                                                                           //
      //                                                                                                               //
      //   $(window).on('scroll.zf.offcanvas', function(e) {                                                           //
      //     console.log(e);                                                                                           //
      //     var pageY = window.pageYOffset;                                                                           //
      //     elStyle.transform = 'translate(0,' + pageY + 'px)';                                                       //
      //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }                    //
      //   });                                                                                                         //
      //   // this.$element.trigger('stuck.zf.offcanvas');                                                             //
      // };                                                                                                            //
      /**                                                                                                              //
       * Closes the off-canvas menu.                                                                                   //
       * @function                                                                                                     //
       * @param {Function} cb - optional cb to fire after closure.                                                     //
       * @fires OffCanvas#closed                                                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'close',                                                                                                    // 5188
      value: (function () {                                                                                            // 5189
        function close(cb) {                                                                                           // 5189
          if (!this.$element.hasClass('is-open') || this.isRevealed) {                                                 // 5190
            return;                                                                                                    // 5191
          }                                                                                                            //
                                                                                                                       //
          var _this = this;                                                                                            // 5194
                                                                                                                       //
          //  Foundation.Move(this.options.transitionTime, this.$element, function() {                                 //
          $('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-' + _this.options.position);          // 5197
          _this.$element.removeClass('is-open');                                                                       // 5198
          // Foundation._reflow();                                                                                     //
          // });                                                                                                       //
          this.$element.attr('aria-hidden', 'true')                                                                    // 5201
          /**                                                                                                          //
           * Fires when the off-canvas menu opens.                                                                     //
           * @event OffCanvas#closed                                                                                   //
           */                                                                                                          //
          .trigger('closed.zf.offcanvas');                                                                             //
          // if (_this.options.isSticky || !_this.options.forceTop) {                                                  //
          //   setTimeout(function() {                                                                                 //
          //     _this.$element[0].style.transform = '';                                                               //
          //     $(window).off('scroll.zf.offcanvas');                                                                 //
          //   }, this.options.transitionTime);                                                                        //
          // }                                                                                                         //
          if (this.options.closeOnClick) {                                                                             // 5213
            this.$exiter.removeClass('is-visible');                                                                    // 5214
          }                                                                                                            //
                                                                                                                       //
          this.$lastTrigger.attr('aria-expanded', 'false');                                                            // 5217
          if (this.options.trapFocus) {                                                                                // 5218
            $('[data-off-canvas-content]').removeAttr('tabindex');                                                     // 5219
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return close;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the off-canvas menu open or closed.                                                                   //
       * @function                                                                                                     //
       * @param {Object} event - Event object passed from listener.                                                    //
       * @param {jQuery} trigger - element that triggered the off-canvas to open.                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'toggle',                                                                                                   // 5231
      value: (function () {                                                                                            // 5232
        function toggle(event, trigger) {                                                                              // 5232
          if (this.$element.hasClass('is-open')) {                                                                     // 5233
            this.close(event, trigger);                                                                                // 5234
          } else {                                                                                                     //
            this.open(event, trigger);                                                                                 // 5236
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return toggle;                                                                                                 //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_handleKeyboard',                                                                                          // 5247
      value: (function () {                                                                                            // 5248
        function _handleKeyboard(event) {                                                                              // 5248
          if (event.which !== 27) return;                                                                              // 5249
                                                                                                                       //
          event.stopPropagation();                                                                                     // 5251
          event.preventDefault();                                                                                      // 5252
          this.close();                                                                                                // 5253
          this.$lastTrigger.focus();                                                                                   // 5254
        }                                                                                                              //
                                                                                                                       //
        return _handleKeyboard;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the offcanvas plugin.                                                                                //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 5263
      value: (function () {                                                                                            // 5264
        function destroy() {                                                                                           // 5264
          this.close();                                                                                                // 5265
          this.$element.off('.zf.trigger .zf.offcanvas');                                                              // 5266
          this.$exiter.off('.zf.offcanvas');                                                                           // 5267
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 5269
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return OffCanvas;                                                                                                  // 5273
  })();                                                                                                                //
                                                                                                                       //
  OffCanvas.defaults = {                                                                                               // 5276
    /**                                                                                                                //
     * Allow the user to click outside of the menu to close it.                                                        //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    closeOnClick: true,                                                                                                // 5282
                                                                                                                       //
    /**                                                                                                                //
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.           //
     * @option                                                                                                         //
     * @example 500                                                                                                    //
     */                                                                                                                //
    transitionTime: 0,                                                                                                 // 5289
                                                                                                                       //
    /**                                                                                                                //
     * Direction the offcanvas opens from. Determines class applied to body.                                           //
     * @option                                                                                                         //
     * @example left                                                                                                   //
     */                                                                                                                //
    position: 'left',                                                                                                  // 5296
                                                                                                                       //
    /**                                                                                                                //
     * Force the page to scroll to top on open.                                                                        //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    forceTop: true,                                                                                                    // 5303
                                                                                                                       //
    /**                                                                                                                //
     * Allow the offcanvas to remain open for certain breakpoints.                                                     //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    isRevealed: false,                                                                                                 // 5310
                                                                                                                       //
    /**                                                                                                                //
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option                                                                                                         //
     * @example reveal-for-large                                                                                       //
     */                                                                                                                //
    revealOn: null,                                                                                                    // 5317
                                                                                                                       //
    /**                                                                                                                //
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.                         //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    autoFocus: true,                                                                                                   // 5324
                                                                                                                       //
    /**                                                                                                                //
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option                                                                                                         //
     * TODO improve the regex testing for this.                                                                        //
     * @example reveal-for-large                                                                                       //
     */                                                                                                                //
    revealClass: 'reveal-for-',                                                                                        // 5332
                                                                                                                       //
    /**                                                                                                                //
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    trapFocus: false                                                                                                   // 5339
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(OffCanvas, 'OffCanvas');                                                                           // 5343
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 5345
                                                                                                                       //
var _createClass = (function () {                                                                                      // 5347
  function defineProperties(target, props) {                                                                           // 5347
    for (var i = 0; i < props.length; i++) {                                                                           // 5347
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 5349
  if (!(instance instanceof Constructor)) {                                                                            // 5349
    throw new TypeError("Cannot call a class as a function");                                                          // 5349
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 5351
                                                                                                                       //
  /**                                                                                                                  //
   * Orbit module.                                                                                                     //
   * @module foundation.orbit                                                                                          //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.timerAndImageLoader                                                                     //
   * @requires foundation.util.touch                                                                                   //
   */                                                                                                                  //
                                                                                                                       //
  var Orbit = (function () {                                                                                           // 5362
    /**                                                                                                                //
    * Creates a new instance of an orbit carousel.                                                                     //
    * @class                                                                                                           //
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.                                          //
    * @param {Object} options - Overrides to the default plugin settings.                                              //
    */                                                                                                                 //
                                                                                                                       //
    function Orbit(element, options) {                                                                                 // 5370
      _classCallCheck(this, Orbit);                                                                                    // 5371
                                                                                                                       //
      this.$element = element;                                                                                         // 5373
      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);                                      // 5374
                                                                                                                       //
      this._init();                                                                                                    // 5376
                                                                                                                       //
      Foundation.registerPlugin(this, 'Orbit');                                                                        // 5378
      Foundation.Keyboard.register('Orbit', {                                                                          // 5379
        'ltr': {                                                                                                       // 5380
          'ARROW_RIGHT': 'next',                                                                                       // 5381
          'ARROW_LEFT': 'previous'                                                                                     // 5382
        },                                                                                                             //
        'rtl': {                                                                                                       // 5384
          'ARROW_LEFT': 'next',                                                                                        // 5385
          'ARROW_RIGHT': 'previous'                                                                                    // 5386
        }                                                                                                              //
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.           //
    * @function                                                                                                        //
    * @private                                                                                                         //
    */                                                                                                                 //
                                                                                                                       //
    _createClass(Orbit, [{                                                                                             // 5398
      key: '_init',                                                                                                    // 5399
      value: (function () {                                                                                            // 5400
        function _init() {                                                                                             // 5400
          this.$wrapper = this.$element.find('.' + this.options.containerClass);                                       // 5401
          this.$slides = this.$element.find('.' + this.options.slideClass);                                            // 5402
          var $images = this.$element.find('img'),                                                                     // 5403
              initActive = this.$slides.filter('.is-active');                                                          //
                                                                                                                       //
          if (!initActive.length) {                                                                                    // 5406
            this.$slides.eq(0).addClass('is-active');                                                                  // 5407
          }                                                                                                            //
                                                                                                                       //
          if (!this.options.useMUI) {                                                                                  // 5410
            this.$slides.addClass('no-motionui');                                                                      // 5411
          }                                                                                                            //
                                                                                                                       //
          if ($images.length) {                                                                                        // 5414
            Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));                                      // 5415
          } else {                                                                                                     //
            this._prepareForOrbit(); //hehe                                                                            // 5417
          }                                                                                                            //
                                                                                                                       //
          if (this.options.bullets) {                                                                                  // 5420
            this._loadBullets();                                                                                       // 5421
          }                                                                                                            //
                                                                                                                       //
          this._events();                                                                                              // 5424
                                                                                                                       //
          if (this.options.autoPlay && this.$slides.length > 1) {                                                      // 5426
            this.geoSync();                                                                                            // 5427
          }                                                                                                            //
                                                                                                                       //
          if (this.options.accessible) {                                                                               // 5430
            // allow wrapper to be focusable to enable arrow navigation                                                //
            this.$wrapper.attr('tabindex', 0);                                                                         // 5432
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Creates a jQuery collection of bullets, if they are being used.                                                //
      * @function                                                                                                      //
      * @private                                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_loadBullets',                                                                                             // 5443
      value: (function () {                                                                                            // 5444
        function _loadBullets() {                                                                                      // 5444
          this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');                          // 5445
        }                                                                                                              //
                                                                                                                       //
        return _loadBullets;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Sets a `timer` object on the orbit, and starts the counter for the next slide.                                 //
      * @function                                                                                                      //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'geoSync',                                                                                                  // 5454
      value: (function () {                                                                                            // 5455
        function geoSync() {                                                                                           // 5455
          var _this = this;                                                                                            // 5456
          this.timer = new Foundation.Timer(this.$element, {                                                           // 5457
            duration: this.options.timerDelay,                                                                         // 5458
            infinite: false                                                                                            // 5459
          }, function () {                                                                                             //
            _this.changeSlide(true);                                                                                   // 5461
          });                                                                                                          //
          this.timer.start();                                                                                          // 5463
        }                                                                                                              //
                                                                                                                       //
        return geoSync;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Sets wrapper and slide heights for the orbit.                                                                  //
      * @function                                                                                                      //
      * @private                                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_prepareForOrbit',                                                                                         // 5473
      value: (function () {                                                                                            // 5474
        function _prepareForOrbit() {                                                                                  // 5474
          var _this = this;                                                                                            // 5475
          this._setWrapperHeight(function (max) {                                                                      // 5476
            _this._setSlideHeight(max);                                                                                // 5477
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _prepareForOrbit;                                                                                       //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.         //
      * @function                                                                                                      //
      * @private                                                                                                       //
      * @param {Function} cb - a callback function to fire when complete.                                              //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setWrapperHeight',                                                                                        // 5489
      value: (function () {                                                                                            // 5490
        function _setWrapperHeight(cb) {                                                                               // 5490
          //rewrite this to `for` loop                                                                                 //
          var max = 0,                                                                                                 // 5492
              temp,                                                                                                    //
              counter = 0;                                                                                             //
                                                                                                                       //
          this.$slides.each(function () {                                                                              // 5496
            temp = this.getBoundingClientRect().height;                                                                // 5497
            $(this).attr('data-slide', counter);                                                                       // 5498
                                                                                                                       //
            if (counter) {                                                                                             // 5500
              //if not the first slide, set css position and display property                                          //
              $(this).css({ 'position': 'relative', 'display': 'none' });                                              // 5502
            }                                                                                                          //
            max = temp > max ? temp : max;                                                                             // 5504
            counter++;                                                                                                 // 5505
          });                                                                                                          //
                                                                                                                       //
          if (counter === this.$slides.length) {                                                                       // 5508
            this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.                      // 5509
            cb(max); //fire callback with max height dimension.                                                        // 5510
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _setWrapperHeight;                                                                                      //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Sets the max-height of each slide.                                                                             //
      * @function                                                                                                      //
      * @private                                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setSlideHeight',                                                                                          // 5521
      value: (function () {                                                                                            // 5522
        function _setSlideHeight(height) {                                                                             // 5522
          this.$slides.each(function () {                                                                              // 5523
            $(this).css('max-height', height);                                                                         // 5524
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _setSlideHeight;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Adds event listeners to basically everything within the element.                                               //
      * @function                                                                                                      //
      * @private                                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 5535
      value: (function () {                                                                                            // 5536
        function _events() {                                                                                           // 5536
          var _this = this;                                                                                            // 5537
                                                                                                                       //
          //***************************************                                                                    //
          //**Now using custom event - thanks to:**                                                                    //
          //**      Yohai Ararat of Toronto      **                                                                    //
          //***************************************                                                                    //
          if (this.$slides.length > 1) {                                                                               // 5543
                                                                                                                       //
            if (this.options.swipe) {                                                                                  // 5545
              this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {       // 5546
                e.preventDefault();                                                                                    // 5547
                _this.changeSlide(true);                                                                               // 5548
              }).on('swiperight.zf.orbit', function (e) {                                                              //
                e.preventDefault();                                                                                    // 5550
                _this.changeSlide(false);                                                                              // 5551
              });                                                                                                      //
            }                                                                                                          //
            //***************************************                                                                  //
                                                                                                                       //
            if (this.options.autoPlay) {                                                                               // 5556
              this.$slides.on('click.zf.orbit', function () {                                                          // 5557
                _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);                     // 5558
                _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();                                   // 5559
              });                                                                                                      //
                                                                                                                       //
              if (this.options.pauseOnHover) {                                                                         // 5562
                this.$element.on('mouseenter.zf.orbit', function () {                                                  // 5563
                  _this.timer.pause();                                                                                 // 5564
                }).on('mouseleave.zf.orbit', function () {                                                             //
                  if (!_this.$element.data('clickedOn')) {                                                             // 5566
                    _this.timer.start();                                                                               // 5567
                  }                                                                                                    //
                });                                                                                                    //
              }                                                                                                        //
            }                                                                                                          //
                                                                                                                       //
            if (this.options.navButtons) {                                                                             // 5573
              var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);       // 5574
              $controls.attr('tabindex', 0)                                                                            // 5575
              //also need to handle enter/return and spacebar key presses                                              //
              .on('click.zf.orbit touchend.zf.orbit', function () {                                                    //
                _this.changeSlide($(this).hasClass(_this.options.nextClass));                                          // 5578
              });                                                                                                      //
            }                                                                                                          //
                                                                                                                       //
            if (this.options.bullets) {                                                                                // 5582
              this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {                                       // 5583
                if (/is-active/g.test(this.className)) {                                                               // 5584
                  return false;                                                                                        // 5585
                } //if this is active, kick out of function.                                                           //
                var idx = $(this).data('slide'),                                                                       // 5587
                    ltr = idx > _this.$slides.filter('.is-active').data('slide'),                                      //
                    $slide = _this.$slides.eq(idx);                                                                    //
                                                                                                                       //
                _this.changeSlide(ltr, $slide, idx);                                                                   // 5591
              });                                                                                                      //
            }                                                                                                          //
                                                                                                                       //
            this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {                                     // 5595
              // handle keyboard event with keyboard util                                                              //
              Foundation.Keyboard.handleKey(e, 'Orbit', {                                                              // 5597
                next: function () {                                                                                    // 5598
                  _this.changeSlide(true);                                                                             // 5599
                },                                                                                                     //
                previous: function () {                                                                                // 5601
                  _this.changeSlide(false);                                                                            // 5602
                },                                                                                                     //
                handled: function () {                                                                                 // 5604
                  // if bullet is focused, make sure focus moves                                                       //
                  if ($(e.target).is(_this.$bullets)) {                                                                // 5606
                    _this.$bullets.filter('.is-active').focus();                                                       // 5607
                  }                                                                                                    //
                }                                                                                                      //
              });                                                                                                      //
            });                                                                                                        //
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Changes the current slide to a new one.                                                                        //
      * @function                                                                                                      //
      * @param {Boolean} isLTR - flag if the slide should move left to right.                                          //
      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.                //
      * @param {Number} idx - the index of the new slide in its collection, if one chosen.                             //
      * @fires Orbit#slidechange                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'changeSlide',                                                                                              // 5625
      value: (function () {                                                                                            // 5626
        function changeSlide(isLTR, chosenSlide, idx) {                                                                // 5626
          var $curSlide = this.$slides.filter('.is-active').eq(0);                                                     // 5627
                                                                                                                       //
          if (/mui/g.test($curSlide[0].className)) {                                                                   // 5629
            return false;                                                                                              // 5630
          } //if the slide is currently animating, kick out of the function                                            //
                                                                                                                       //
          var $firstSlide = this.$slides.first(),                                                                      // 5633
              $lastSlide = this.$slides.last(),                                                                        //
              dirIn = isLTR ? 'Right' : 'Left',                                                                        //
              dirOut = isLTR ? 'Left' : 'Right',                                                                       //
              _this = this,                                                                                            //
              $newSlide;                                                                                               //
                                                                                                                       //
          if (!chosenSlide) {                                                                                          // 5640
            //most of the time, this will be auto played or clicked from the navButtons.                               //
            $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
            this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right
            this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left
          } else {                                                                                                     //
              $newSlide = chosenSlide;                                                                                 // 5646
            }                                                                                                          //
                                                                                                                       //
          if ($newSlide.length) {                                                                                      // 5649
            if (this.options.bullets) {                                                                                // 5650
              idx = idx || this.$slides.index($newSlide); //grab index to update bullets                               // 5651
              this._updateBullets(idx);                                                                                // 5652
            }                                                                                                          //
                                                                                                                       //
            if (this.options.useMUI) {                                                                                 // 5655
              Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {
                $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');             // 5657
              });                                                                                                      //
                                                                                                                       //
              Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {
                $curSlide.removeAttr('aria-live');                                                                     // 5661
                if (_this.options.autoPlay && !_this.timer.isPaused) {                                                 // 5662
                  _this.timer.restart();                                                                               // 5663
                }                                                                                                      //
                //do stuff?                                                                                            //
              });                                                                                                      //
            } else {                                                                                                   //
                $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();                               // 5668
                $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();                              // 5669
                if (this.options.autoPlay && !this.timer.isPaused) {                                                   // 5670
                  this.timer.restart();                                                                                // 5671
                }                                                                                                      //
              }                                                                                                        //
            /**                                                                                                        //
            * Triggers when the slide has finished animating in.                                                       //
            * @event Orbit#slidechange                                                                                 //
            */                                                                                                         //
            this.$element.trigger('slidechange.zf.orbit', [$newSlide]);                                                // 5678
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return changeSlide;                                                                                            //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Updates the active state of the bullets, if displayed.                                                         //
      * @function                                                                                                      //
      * @private                                                                                                       //
      * @param {Number} idx - the index of the current slide.                                                          //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_updateBullets',                                                                                           // 5690
      value: (function () {                                                                                            // 5691
        function _updateBullets(idx) {                                                                                 // 5691
          var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),
              span = $oldBullet.find('span:last').detach(),                                                            //
              $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);                                   //
        }                                                                                                              //
                                                                                                                       //
        return _updateBullets;                                                                                         //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
      * Destroys the carousel and hides the element.                                                                   //
      * @function                                                                                                      //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 5703
      value: (function () {                                                                                            // 5704
        function destroy() {                                                                                           // 5704
          this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();                                      // 5705
          Foundation.unregisterPlugin(this);                                                                           // 5706
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Orbit;                                                                                                      // 5710
  })();                                                                                                                //
                                                                                                                       //
  Orbit.defaults = {                                                                                                   // 5713
    /**                                                                                                                //
    * Tells the JS to look for and loadBullets.                                                                        //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    bullets: true,                                                                                                     // 5719
    /**                                                                                                                //
    * Tells the JS to apply event listeners to nav buttons                                                             //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    navButtons: true,                                                                                                  // 5725
    /**                                                                                                                //
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
    * @example 'slide-in-right'                                                                                        //
    */                                                                                                                 //
    animInFromRight: 'slide-in-right',                                                                                 // 5731
    /**                                                                                                                //
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
    * @example 'slide-out-right'                                                                                       //
    */                                                                                                                 //
    animOutToRight: 'slide-out-right',                                                                                 // 5737
    /**                                                                                                                //
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
    * @example 'slide-in-left'                                                                                         //
    *                                                                                                                  //
    */                                                                                                                 //
    animInFromLeft: 'slide-in-left',                                                                                   // 5744
    /**                                                                                                                //
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
    * @example 'slide-out-left'                                                                                        //
    */                                                                                                                 //
    animOutToLeft: 'slide-out-left',                                                                                   // 5750
    /**                                                                                                                //
    * Allows Orbit to automatically animate on page load.                                                              //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    autoPlay: true,                                                                                                    // 5756
    /**                                                                                                                //
    * Amount of time, in ms, between slide transitions                                                                 //
    * @option                                                                                                          //
    * @example 5000                                                                                                    //
    */                                                                                                                 //
    timerDelay: 5000,                                                                                                  // 5762
    /**                                                                                                                //
    * Allows Orbit to infinitely loop through the slides                                                               //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    infiniteWrap: true,                                                                                                // 5768
    /**                                                                                                                //
    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library                  //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    swipe: true,                                                                                                       // 5774
    /**                                                                                                                //
    * Allows the timing function to pause animation on hover.                                                          //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    pauseOnHover: true,                                                                                                // 5780
    /**                                                                                                                //
    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys                            //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    accessible: true,                                                                                                  // 5786
    /**                                                                                                                //
    * Class applied to the container of Orbit                                                                          //
    * @option                                                                                                          //
    * @example 'orbit-container'                                                                                       //
    */                                                                                                                 //
    containerClass: 'orbit-container',                                                                                 // 5792
    /**                                                                                                                //
    * Class applied to individual slides.                                                                              //
    * @option                                                                                                          //
    * @example 'orbit-slide'                                                                                           //
    */                                                                                                                 //
    slideClass: 'orbit-slide',                                                                                         // 5798
    /**                                                                                                                //
    * Class applied to the bullet container. You're welcome.                                                           //
    * @option                                                                                                          //
    * @example 'orbit-bullets'                                                                                         //
    */                                                                                                                 //
    boxOfBullets: 'orbit-bullets',                                                                                     // 5804
    /**                                                                                                                //
    * Class applied to the `next` navigation button.                                                                   //
    * @option                                                                                                          //
    * @example 'orbit-next'                                                                                            //
    */                                                                                                                 //
    nextClass: 'orbit-next',                                                                                           // 5810
    /**                                                                                                                //
    * Class applied to the `previous` navigation button.                                                               //
    * @option                                                                                                          //
    * @example 'orbit-previous'                                                                                        //
    */                                                                                                                 //
    prevClass: 'orbit-previous',                                                                                       // 5816
    /**                                                                                                                //
    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.             //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    useMUI: true                                                                                                       // 5822
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Orbit, 'Orbit');                                                                                   // 5826
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 5828
                                                                                                                       //
var _createClass = (function () {                                                                                      // 5830
  function defineProperties(target, props) {                                                                           // 5830
    for (var i = 0; i < props.length; i++) {                                                                           // 5830
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 5832
  if (!(instance instanceof Constructor)) {                                                                            // 5832
    throw new TypeError("Cannot call a class as a function");                                                          // 5832
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 5834
                                                                                                                       //
  /**                                                                                                                  //
   * ResponsiveMenu module.                                                                                            //
   * @module foundation.responsiveMenu                                                                                 //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.mediaQuery                                                                              //
   * @requires foundation.util.accordionMenu                                                                           //
   * @requires foundation.util.drilldown                                                                               //
   * @requires foundation.util.dropdown-menu                                                                           //
   */                                                                                                                  //
                                                                                                                       //
  var ResponsiveMenu = (function () {                                                                                  // 5846
    /**                                                                                                                //
     * Creates a new instance of a responsive menu.                                                                    //
     * @class                                                                                                          //
     * @fires ResponsiveMenu#init                                                                                      //
     * @param {jQuery} element - jQuery object to make into a dropdown menu.                                           //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function ResponsiveMenu(element, options) {                                                                        // 5855
      _classCallCheck(this, ResponsiveMenu);                                                                           // 5856
                                                                                                                       //
      this.$element = $(element);                                                                                      // 5858
      this.rules = this.$element.data('responsive-menu');                                                              // 5859
      this.currentMq = null;                                                                                           // 5860
      this.currentPlugin = null;                                                                                       // 5861
                                                                                                                       //
      this._init();                                                                                                    // 5863
      this._events();                                                                                                  // 5864
                                                                                                                       //
      Foundation.registerPlugin(this, 'ResponsiveMenu');                                                               // 5866
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.            //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(ResponsiveMenu, [{                                                                                    // 5876
      key: '_init',                                                                                                    // 5877
      value: (function () {                                                                                            // 5878
        function _init() {                                                                                             // 5878
          var rulesTree = {};                                                                                          // 5879
                                                                                                                       //
          // Parse rules from "classes" in data attribute                                                              //
          var rules = this.rules.split(' ');                                                                           // 5882
                                                                                                                       //
          // Iterate through every rule found                                                                          //
          for (var i = 0; i < rules.length; i++) {                                                                     // 5885
            var rule = rules[i].split('-');                                                                            // 5886
            var ruleSize = rule.length > 1 ? rule[0] : 'small';                                                        // 5887
            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];                                                      // 5888
                                                                                                                       //
            if (MenuPlugins[rulePlugin] !== null) {                                                                    // 5890
              rulesTree[ruleSize] = MenuPlugins[rulePlugin];                                                           // 5891
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          this.rules = rulesTree;                                                                                      // 5895
                                                                                                                       //
          if (!$.isEmptyObject(rulesTree)) {                                                                           // 5897
            this._checkMediaQueries();                                                                                 // 5898
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for the Menu.                                                                              //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 5909
      value: (function () {                                                                                            // 5910
        function _events() {                                                                                           // 5910
          var _this = this;                                                                                            // 5911
                                                                                                                       //
          $(window).on('changed.zf.mediaquery', function () {                                                          // 5913
            _this._checkMediaQueries();                                                                                // 5914
          });                                                                                                          //
          // $(window).on('resize.zf.ResponsiveMenu', function() {                                                     //
          //   _this._checkMediaQueries();                                                                             //
          // });                                                                                                       //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_checkMediaQueries',                                                                                       // 5928
      value: (function () {                                                                                            // 5929
        function _checkMediaQueries() {                                                                                // 5929
          var matchedMq,                                                                                               // 5930
              _this = this;                                                                                            //
          // Iterate through each rule and find the last matching rule                                                 //
          $.each(this.rules, function (key) {                                                                          // 5933
            if (Foundation.MediaQuery.atLeast(key)) {                                                                  // 5934
              matchedMq = key;                                                                                         // 5935
            }                                                                                                          //
          });                                                                                                          //
                                                                                                                       //
          // No match? No dice                                                                                         //
          if (!matchedMq) return;                                                                                      // 5940
                                                                                                                       //
          // Plugin already initialized? We good                                                                       //
          if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;                                      // 5943
                                                                                                                       //
          // Remove existing plugin-specific CSS classes                                                               //
          $.each(MenuPlugins, function (key, value) {                                                                  // 5946
            _this.$element.removeClass(value.cssClass);                                                                // 5947
          });                                                                                                          //
                                                                                                                       //
          // Add the CSS class for the new plugin                                                                      //
          this.$element.addClass(this.rules[matchedMq].cssClass);                                                      // 5951
                                                                                                                       //
          // Create an instance of the new plugin                                                                      //
          if (this.currentPlugin) this.currentPlugin.destroy();                                                        // 5954
          this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});                                    // 5955
        }                                                                                                              //
                                                                                                                       //
        return _checkMediaQueries;                                                                                     //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 5964
      value: (function () {                                                                                            // 5965
        function destroy() {                                                                                           // 5965
          this.currentPlugin.destroy();                                                                                // 5966
          $(window).off('.zf.ResponsiveMenu');                                                                         // 5967
          Foundation.unregisterPlugin(this);                                                                           // 5968
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return ResponsiveMenu;                                                                                             // 5972
  })();                                                                                                                //
                                                                                                                       //
  ResponsiveMenu.defaults = {};                                                                                        // 5975
                                                                                                                       //
  // The plugin matches the plugin classes with these plugin instances.                                                //
  var MenuPlugins = {                                                                                                  // 5978
    dropdown: {                                                                                                        // 5979
      cssClass: 'dropdown',                                                                                            // 5980
      plugin: Foundation._plugins['dropdown-menu'] || null                                                             // 5981
    },                                                                                                                 //
    drilldown: {                                                                                                       // 5983
      cssClass: 'drilldown',                                                                                           // 5984
      plugin: Foundation._plugins['drilldown'] || null                                                                 // 5985
    },                                                                                                                 //
    accordion: {                                                                                                       // 5987
      cssClass: 'accordion-menu',                                                                                      // 5988
      plugin: Foundation._plugins['accordion-menu'] || null                                                            // 5989
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');                                                                 // 5994
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 5996
                                                                                                                       //
var _createClass = (function () {                                                                                      // 5998
  function defineProperties(target, props) {                                                                           // 5998
    for (var i = 0; i < props.length; i++) {                                                                           // 5998
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 6000
  if (!(instance instanceof Constructor)) {                                                                            // 6000
    throw new TypeError("Cannot call a class as a function");                                                          // 6000
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 6002
                                                                                                                       //
  /**                                                                                                                  //
   * ResponsiveToggle module.                                                                                          //
   * @module foundation.responsiveToggle                                                                               //
   * @requires foundation.util.mediaQuery                                                                              //
   */                                                                                                                  //
                                                                                                                       //
  var ResponsiveToggle = (function () {                                                                                // 6010
    /**                                                                                                                //
     * Creates a new instance of Tab Bar.                                                                              //
     * @class                                                                                                          //
     * @fires ResponsiveToggle#init                                                                                    //
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.                                     //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function ResponsiveToggle(element, options) {                                                                      // 6019
      _classCallCheck(this, ResponsiveToggle);                                                                         // 6020
                                                                                                                       //
      this.$element = $(element);                                                                                      // 6022
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);                           // 6023
                                                                                                                       //
      this._init();                                                                                                    // 6025
      this._events();                                                                                                  // 6026
                                                                                                                       //
      Foundation.registerPlugin(this, 'ResponsiveToggle');                                                             // 6028
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the tab bar by finding the target element, toggling element, and running update().                  //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(ResponsiveToggle, [{                                                                                  // 6038
      key: '_init',                                                                                                    // 6039
      value: (function () {                                                                                            // 6040
        function _init() {                                                                                             // 6040
          var targetID = this.$element.data('responsive-toggle');                                                      // 6041
          if (!targetID) {                                                                                             // 6042
            console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');                         // 6043
          }                                                                                                            //
                                                                                                                       //
          this.$targetMenu = $('#' + targetID);                                                                        // 6046
          this.$toggler = this.$element.find('[data-toggle]');                                                         // 6047
                                                                                                                       //
          this._update();                                                                                              // 6049
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds necessary event handlers for the tab bar to work.                                                        //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 6059
      value: (function () {                                                                                            // 6060
        function _events() {                                                                                           // 6060
          var _this = this;                                                                                            // 6061
                                                                                                                       //
          $(window).on('changed.zf.mediaquery', this._update.bind(this));                                              // 6063
                                                                                                                       //
          this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));                                   // 6065
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Checks the current media query to determine if the tab bar should be visible or hidden.                       //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_update',                                                                                                  // 6075
      value: (function () {                                                                                            // 6076
        function _update() {                                                                                           // 6076
          // Mobile                                                                                                    //
          if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {                                                  // 6078
            this.$element.show();                                                                                      // 6079
            this.$targetMenu.hide();                                                                                   // 6080
          }                                                                                                            //
                                                                                                                       //
          // Desktop                                                                                                   //
          else {                                                                                                       //
              this.$element.hide();                                                                                    // 6085
              this.$targetMenu.show();                                                                                 // 6086
            }                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _update;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
       * @function                                                                                                     //
       * @fires ResponsiveToggle#toggled                                                                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'toggleMenu',                                                                                               // 6097
      value: (function () {                                                                                            // 6098
        function toggleMenu() {                                                                                        // 6098
          if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {                                                  // 6099
            this.$targetMenu.toggle(0);                                                                                // 6100
                                                                                                                       //
            /**                                                                                                        //
             * Fires when the element attached to the tab bar toggles.                                                 //
             * @event ResponsiveToggle#toggled                                                                         //
             */                                                                                                        //
            this.$element.trigger('toggled.zf.responsiveToggle');                                                      // 6106
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return toggleMenu;                                                                                             //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 6110
      value: (function () {                                                                                            // 6111
        function destroy() {                                                                                           // 6111
          //TODO this...                                                                                               //
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return ResponsiveToggle;                                                                                           // 6116
  })();                                                                                                                //
                                                                                                                       //
  ResponsiveToggle.defaults = {                                                                                        // 6119
    /**                                                                                                                //
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.                                 //
     * @option                                                                                                         //
     * @example 'medium'                                                                                               //
     */                                                                                                                //
    hideFor: 'medium'                                                                                                  // 6125
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');                                                             // 6129
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 6131
                                                                                                                       //
var _createClass = (function () {                                                                                      // 6133
  function defineProperties(target, props) {                                                                           // 6133
    for (var i = 0; i < props.length; i++) {                                                                           // 6133
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 6135
  if (!(instance instanceof Constructor)) {                                                                            // 6135
    throw new TypeError("Cannot call a class as a function");                                                          // 6135
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 6137
                                                                                                                       //
  /**                                                                                                                  //
   * Reveal module.                                                                                                    //
   * @module foundation.reveal                                                                                         //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.box                                                                                     //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.mediaQuery                                                                              //
   * @requires foundation.util.motion if using animations                                                              //
   */                                                                                                                  //
                                                                                                                       //
  var Reveal = (function () {                                                                                          // 6149
    /**                                                                                                                //
     * Creates a new instance of Reveal.                                                                               //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to use for the modal.                                                   //
     * @param {Object} options - optional parameters.                                                                  //
     */                                                                                                                //
                                                                                                                       //
    function Reveal(element, options) {                                                                                // 6157
      _classCallCheck(this, Reveal);                                                                                   // 6158
                                                                                                                       //
      this.$element = element;                                                                                         // 6160
      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);                                     // 6161
      this._init();                                                                                                    // 6162
                                                                                                                       //
      Foundation.registerPlugin(this, 'Reveal');                                                                       // 6164
      Foundation.Keyboard.register('Reveal', {                                                                         // 6165
        'ENTER': 'open',                                                                                               // 6166
        'SPACE': 'open',                                                                                               // 6167
        'ESCAPE': 'close',                                                                                             // 6168
        'TAB': 'tab_forward',                                                                                          // 6169
        'SHIFT_TAB': 'tab_backward'                                                                                    // 6170
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the modal by adding the overlay and close buttons, (if selected).                                   //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Reveal, [{                                                                                            // 6180
      key: '_init',                                                                                                    // 6181
      value: (function () {                                                                                            // 6182
        function _init() {                                                                                             // 6182
          this.id = this.$element.attr('id');                                                                          // 6183
          this.isActive = false;                                                                                       // 6184
          this.cached = { mq: Foundation.MediaQuery.current };                                                         // 6185
          this.isiOS = iPhoneSniff();                                                                                  // 6186
                                                                                                                       //
          if (this.isiOS) {                                                                                            // 6188
            this.$element.addClass('is-ios');                                                                          // 6189
          }                                                                                                            //
                                                                                                                       //
          this.$anchor = $('[data-open="' + this.id + '"]').length ? $('[data-open="' + this.id + '"]') : $('[data-toggle="' + this.id + '"]');
                                                                                                                       //
          if (this.$anchor.length) {                                                                                   // 6194
            var anchorId = this.$anchor[0].id || Foundation.GetYoDigits(6, 'reveal');                                  // 6195
                                                                                                                       //
            this.$anchor.attr({                                                                                        // 6197
              'aria-controls': this.id,                                                                                // 6198
              'id': anchorId,                                                                                          // 6199
              'aria-haspopup': true,                                                                                   // 6200
              'tabindex': 0                                                                                            // 6201
            });                                                                                                        //
            this.$element.attr({ 'aria-labelledby': anchorId });                                                       // 6203
          }                                                                                                            //
                                                                                                                       //
          if (this.options.fullScreen || this.$element.hasClass('full')) {                                             // 6206
            this.options.fullScreen = true;                                                                            // 6207
            this.options.overlay = false;                                                                              // 6208
          }                                                                                                            //
          if (this.options.overlay && !this.$overlay) {                                                                // 6210
            this.$overlay = this._makeOverlay(this.id);                                                                // 6211
          }                                                                                                            //
                                                                                                                       //
          this.$element.attr({                                                                                         // 6214
            'role': 'dialog',                                                                                          // 6215
            'aria-hidden': true,                                                                                       // 6216
            'data-yeti-box': this.id,                                                                                  // 6217
            'data-resize': this.id                                                                                     // 6218
          });                                                                                                          //
                                                                                                                       //
          if (this.$overlay) {                                                                                         // 6221
            this.$element.detach().appendTo(this.$overlay);                                                            // 6222
          } else {                                                                                                     //
            this.$element.detach().appendTo($('body'));                                                                // 6224
            this.$element.addClass('without-overlay');                                                                 // 6225
          }                                                                                                            //
          this._events();                                                                                              // 6227
          if (this.options.deepLink && window.location.hash === '#' + this.id) {                                       // 6228
            $(window).one('load.zf.reveal', this.open.bind(this));                                                     // 6229
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Creates an overlay div to display behind the modal.                                                           //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_makeOverlay',                                                                                             // 6239
      value: (function () {                                                                                            // 6240
        function _makeOverlay(id) {                                                                                    // 6240
          var $overlay = $('<div></div>').addClass('reveal-overlay').attr({ 'tabindex': -1, 'aria-hidden': true }).appendTo('body');
          return $overlay;                                                                                             // 6242
        }                                                                                                              //
                                                                                                                       //
        return _makeOverlay;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Updates position of modal                                                                                     //
       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter                           //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_updatePosition',                                                                                          // 6252
      value: (function () {                                                                                            // 6253
        function _updatePosition() {                                                                                   // 6253
          var width = this.$element.outerWidth();                                                                      // 6254
          var outerWidth = $(window).width();                                                                          // 6255
          var height = this.$element.outerHeight();                                                                    // 6256
          var outerHeight = $(window).height();                                                                        // 6257
          var left = parseInt((outerWidth - width) / 2, 10);                                                           // 6258
          var top;                                                                                                     // 6259
          if (height > outerHeight) {                                                                                  // 6260
            top = parseInt(Math.min(100, outerHeight / 10), 10);                                                       // 6261
          } else {                                                                                                     //
            top = parseInt((outerHeight - height) / 4, 10);                                                            // 6263
          }                                                                                                            //
          this.$element.css({ top: top + 'px' });                                                                      // 6265
          // only worry about left if we don't have an overlay, otherwise we're perfectly in the middle                //
          if (!this.$overlay) {                                                                                        // 6267
            this.$element.css({ left: left + 'px' });                                                                  // 6268
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _updatePosition;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for the modal.                                                                            //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 6278
      value: (function () {                                                                                            // 6279
        function _events() {                                                                                           // 6279
          var _this = this;                                                                                            // 6280
                                                                                                                       //
          this.$element.on({                                                                                           // 6282
            'open.zf.trigger': this.open.bind(this),                                                                   // 6283
            'close.zf.trigger': this.close.bind(this),                                                                 // 6284
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 6285
            'resizeme.zf.trigger': function () {                                                                       // 6286
              _this._updatePosition();                                                                                 // 6287
            }                                                                                                          //
          });                                                                                                          //
                                                                                                                       //
          if (this.$anchor.length) {                                                                                   // 6291
            this.$anchor.on('keydown.zf.reveal', function (e) {                                                        // 6292
              if (e.which === 13 || e.which === 32) {                                                                  // 6293
                e.stopPropagation();                                                                                   // 6294
                e.preventDefault();                                                                                    // 6295
                _this.open();                                                                                          // 6296
              }                                                                                                        //
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          if (this.options.closeOnClick && this.options.overlay) {                                                     // 6301
            this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {                                       // 6302
              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {                         // 6303
                return;                                                                                                // 6304
              }                                                                                                        //
              _this.close();                                                                                           // 6306
            });                                                                                                        //
          }                                                                                                            //
          if (this.options.deepLink) {                                                                                 // 6309
            $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));                               // 6310
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_handleState',                                                                                             // 6320
      value: (function () {                                                                                            // 6321
        function _handleState(e) {                                                                                     // 6321
          if (window.location.hash === '#' + this.id && !this.isActive) {                                              // 6322
            this.open();                                                                                               // 6323
          } else {                                                                                                     //
            this.close();                                                                                              // 6325
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _handleState;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Opens the modal controlled by `this.$anchor`, and closes all others by default.                               //
       * @function                                                                                                     //
       * @fires Reveal#closeme                                                                                         //
       * @fires Reveal#open                                                                                            //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'open',                                                                                                     // 6337
      value: (function () {                                                                                            // 6338
        function open() {                                                                                              // 6338
          var _this2 = this;                                                                                           // 6339
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 6341
            var hash = '#' + this.id;                                                                                  // 6342
                                                                                                                       //
            if (window.history.pushState) {                                                                            // 6344
              window.history.pushState(null, null, hash);                                                              // 6345
            } else {                                                                                                   //
              window.location.hash = hash;                                                                             // 6347
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          this.isActive = true;                                                                                        // 6351
                                                                                                                       //
          // Make elements invisible, but remove display: none so we can get size and positioning                      //
          this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);                                           // 6354
          if (this.options.overlay) {                                                                                  // 6355
            this.$overlay.css({ 'visibility': 'hidden' }).show();                                                      // 6356
          }                                                                                                            //
                                                                                                                       //
          this._updatePosition();                                                                                      // 6359
                                                                                                                       //
          this.$element.hide().css({ 'visibility': '' });                                                              // 6361
                                                                                                                       //
          if (this.$overlay) {                                                                                         // 6363
            this.$overlay.css({ 'visibility': '' }).hide();                                                            // 6364
          }                                                                                                            //
                                                                                                                       //
          if (!this.options.multipleOpened) {                                                                          // 6367
            /**                                                                                                        //
             * Fires immediately before the modal opens.                                                               //
             * Closes any other modals that are currently open                                                         //
             * @event Reveal#closeme                                                                                   //
             */                                                                                                        //
            this.$element.trigger('closeme.zf.reveal', this.id);                                                       // 6373
          }                                                                                                            //
                                                                                                                       //
          // Motion UI method of reveal                                                                                //
          if (this.options.animationIn) {                                                                              // 6377
            if (this.options.overlay) {                                                                                // 6378
              Foundation.Motion.animateIn(this.$overlay, 'fade-in');                                                   // 6379
            }                                                                                                          //
            Foundation.Motion.animateIn(this.$element, this.options.animationIn, function () {                         // 6381
              this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);                               // 6382
            });                                                                                                        //
          }                                                                                                            //
          // jQuery method of reveal                                                                                   //
          else {                                                                                                       //
              if (this.options.overlay) {                                                                              // 6387
                this.$overlay.show(0);                                                                                 // 6388
              }                                                                                                        //
              this.$element.show(this.options.showDelay);                                                              // 6390
            }                                                                                                          //
                                                                                                                       //
          // handle accessibility                                                                                      //
          this.$element.attr({                                                                                         // 6394
            'aria-hidden': false,                                                                                      // 6395
            'tabindex': -1                                                                                             // 6396
          }).focus();                                                                                                  //
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the modal has successfully opened.                                                             //
           * @event Reveal#open                                                                                        //
           */                                                                                                          //
          this.$element.trigger('open.zf.reveal');                                                                     // 6403
                                                                                                                       //
          if (this.isiOS) {                                                                                            // 6405
            var scrollPos = window.pageYOffset;                                                                        // 6406
            $('html, body').addClass('is-reveal-open').scrollTop(scrollPos);                                           // 6407
          } else {                                                                                                     //
            $('body').addClass('is-reveal-open');                                                                      // 6409
          }                                                                                                            //
                                                                                                                       //
          $('body').addClass('is-reveal-open').attr('aria-hidden', this.options.overlay || this.options.fullScreen ? true : false);
                                                                                                                       //
          setTimeout(function () {                                                                                     // 6414
            _this2._extraHandlers();                                                                                   // 6415
          }, 0);                                                                                                       //
        }                                                                                                              //
                                                                                                                       //
        return open;                                                                                                   //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds extra event handlers for the body and window if necessary.                                               //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_extraHandlers',                                                                                           // 6425
      value: (function () {                                                                                            // 6426
        function _extraHandlers() {                                                                                    // 6426
          var _this = this;                                                                                            // 6427
          this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);                                   // 6428
                                                                                                                       //
          if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {                        // 6430
            $('body').on('click.zf.reveal', function (e) {                                                             // 6431
              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {                         // 6432
                return;                                                                                                // 6433
              }                                                                                                        //
              _this.close();                                                                                           // 6435
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          if (this.options.closeOnEsc) {                                                                               // 6439
            $(window).on('keydown.zf.reveal', function (e) {                                                           // 6440
              Foundation.Keyboard.handleKey(e, 'Reveal', {                                                             // 6441
                close: function () {                                                                                   // 6442
                  if (_this.options.closeOnEsc) {                                                                      // 6443
                    _this.close();                                                                                     // 6444
                    _this.$anchor.focus();                                                                             // 6445
                  }                                                                                                    //
                }                                                                                                      //
              });                                                                                                      //
              if (_this.focusableElements.length === 0) {                                                              // 6449
                // no focusable elements inside the modal at all, prevent tabbing in general                           //
                e.preventDefault();                                                                                    // 6451
              }                                                                                                        //
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          // lock focus within modal while tabbing                                                                     //
          this.$element.on('keydown.zf.reveal', function (e) {                                                         // 6457
            var $target = $(this);                                                                                     // 6458
            // handle keyboard event with keyboard util                                                                //
            Foundation.Keyboard.handleKey(e, 'Reveal', {                                                               // 6460
              tab_forward: function () {                                                                               // 6461
                if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) {                                // 6462
                  // left modal downwards, setting focus to first element                                              //
                  _this.focusableElements.eq(0).focus();                                                               // 6464
                  e.preventDefault();                                                                                  // 6465
                }                                                                                                      //
              },                                                                                                       //
              tab_backward: function () {                                                                              // 6468
                if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) {  // 6469
                  // left modal upwards, setting focus to last element                                                 //
                  _this.focusableElements.eq(-1).focus();                                                              // 6471
                  e.preventDefault();                                                                                  // 6472
                }                                                                                                      //
              },                                                                                                       //
              open: function () {                                                                                      // 6475
                if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {                           // 6476
                  setTimeout(function () {                                                                             // 6477
                    // set focus back to anchor if close button has been activated                                     //
                    _this.$anchor.focus();                                                                             // 6479
                  }, 1);                                                                                               //
                } else if ($target.is(_this.focusableElements)) {                                                      //
                  // dont't trigger if acual element has focus (i.e. inputs, links, ...)                               //
                  _this.open();                                                                                        // 6483
                }                                                                                                      //
              },                                                                                                       //
              close: function () {                                                                                     // 6486
                if (_this.options.closeOnEsc) {                                                                        // 6487
                  _this.close();                                                                                       // 6488
                  _this.$anchor.focus();                                                                               // 6489
                }                                                                                                      //
              }                                                                                                        //
            });                                                                                                        //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _extraHandlers;                                                                                         //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Closes the modal.                                                                                             //
       * @function                                                                                                     //
       * @fires Reveal#closed                                                                                          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'close',                                                                                                    // 6503
      value: (function () {                                                                                            // 6504
        function close() {                                                                                             // 6504
          if (!this.isActive || !this.$element.is(':visible')) {                                                       // 6505
            return false;                                                                                              // 6506
          }                                                                                                            //
          var _this = this;                                                                                            // 6508
                                                                                                                       //
          // Motion UI method of hiding                                                                                //
          if (this.options.animationOut) {                                                                             // 6511
            if (this.options.overlay) {                                                                                // 6512
              Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);                                       // 6513
            } else {                                                                                                   //
              finishUp();                                                                                              // 6515
            }                                                                                                          //
                                                                                                                       //
            Foundation.Motion.animateOut(this.$element, this.options.animationOut);                                    // 6518
          }                                                                                                            //
          // jQuery method of hiding                                                                                   //
          else {                                                                                                       //
              if (this.options.overlay) {                                                                              // 6522
                this.$overlay.hide(0, finishUp);                                                                       // 6523
              } else {                                                                                                 //
                finishUp();                                                                                            // 6525
              }                                                                                                        //
                                                                                                                       //
              this.$element.hide(this.options.hideDelay);                                                              // 6528
            }                                                                                                          //
                                                                                                                       //
          // Conditionals to remove extra event listeners added on open                                                //
          if (this.options.closeOnEsc) {                                                                               // 6532
            $(window).off('keydown.zf.reveal');                                                                        // 6533
          }                                                                                                            //
                                                                                                                       //
          if (!this.options.overlay && this.options.closeOnClick) {                                                    // 6536
            $('body').off('click.zf.reveal');                                                                          // 6537
          }                                                                                                            //
                                                                                                                       //
          this.$element.off('keydown.zf.reveal');                                                                      // 6540
                                                                                                                       //
          function finishUp() {                                                                                        // 6542
            if (_this.isiOS) {                                                                                         // 6543
              $('html, body').removeClass('is-reveal-open');                                                           // 6544
            } else {                                                                                                   //
              $('body').removeClass('is-reveal-open');                                                                 // 6546
            }                                                                                                          //
                                                                                                                       //
            $('body').attr({                                                                                           // 6549
              'aria-hidden': false,                                                                                    // 6550
              'tabindex': ''                                                                                           // 6551
            });                                                                                                        //
                                                                                                                       //
            _this.$element.attr('aria-hidden', true);                                                                  // 6554
                                                                                                                       //
            /**                                                                                                        //
            * Fires when the modal is done closing.                                                                    //
            * @event Reveal#closed                                                                                     //
            */                                                                                                         //
            _this.$element.trigger('closed.zf.reveal');                                                                // 6560
          }                                                                                                            //
                                                                                                                       //
          /**                                                                                                          //
          * Resets the modal content                                                                                   //
          * This prevents a running video to keep going in the background                                              //
          */                                                                                                           //
          if (this.options.resetOnClose) {                                                                             // 6567
            this.$element.html(this.$element.html());                                                                  // 6568
          }                                                                                                            //
                                                                                                                       //
          this.isActive = false;                                                                                       // 6571
          if (_this.options.deepLink) {                                                                                // 6572
            if (window.history.replaceState) {                                                                         // 6573
              window.history.replaceState("", document.title, window.location.pathname);                               // 6574
            } else {                                                                                                   //
              window.location.hash = '';                                                                               // 6576
            }                                                                                                          //
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return close;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the open/closed state of a modal.                                                                     //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'toggle',                                                                                                   // 6587
      value: (function () {                                                                                            // 6588
        function toggle() {                                                                                            // 6588
          if (this.isActive) {                                                                                         // 6589
            this.close();                                                                                              // 6590
          } else {                                                                                                     //
            this.open();                                                                                               // 6592
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return toggle;                                                                                                 //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 6596
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of a modal.                                                                              //
       * @function                                                                                                     //
       */                                                                                                              //
      value: (function () {                                                                                            // 6603
        function destroy() {                                                                                           // 6603
          if (this.options.overlay) {                                                                                  // 6604
            this.$overlay.hide().off().remove();                                                                       // 6605
          }                                                                                                            //
          this.$element.hide().off();                                                                                  // 6607
          this.$anchor.off('.zf');                                                                                     // 6608
          $(window).off('.zf.reveal:' + this.id);                                                                      // 6609
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 6611
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Reveal;                                                                                                     // 6615
  })();                                                                                                                //
                                                                                                                       //
  Reveal.defaults = {                                                                                                  // 6618
    /**                                                                                                                //
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.                       //
     * @option                                                                                                         //
     * @example 'slide-in-left'                                                                                        //
     */                                                                                                                //
    animationIn: '',                                                                                                   // 6624
    /**                                                                                                                //
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.                       //
     * @option                                                                                                         //
     * @example 'slide-out-right'                                                                                      //
     */                                                                                                                //
    animationOut: '',                                                                                                  // 6630
    /**                                                                                                                //
     * Time, in ms, to delay the opening of a modal after a click if no animation used.                                //
     * @option                                                                                                         //
     * @example 10                                                                                                     //
     */                                                                                                                //
    showDelay: 0,                                                                                                      // 6636
    /**                                                                                                                //
     * Time, in ms, to delay the closing of a modal after a click if no animation used.                                //
     * @option                                                                                                         //
     * @example 10                                                                                                     //
     */                                                                                                                //
    hideDelay: 0,                                                                                                      // 6642
    /**                                                                                                                //
     * Allows a click on the body/overlay to close the modal.                                                          //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    closeOnClick: true,                                                                                                // 6648
    /**                                                                                                                //
     * Allows the modal to close if the user presses the `ESCAPE` key.                                                 //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    closeOnEsc: true,                                                                                                  // 6654
    /**                                                                                                                //
     * If true, allows multiple modals to be displayed at once.                                                        //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    multipleOpened: false,                                                                                             // 6660
    /**                                                                                                                //
     * Distance, in pixels, the modal should push down from the top of the screen.                                     //
     * @option                                                                                                         //
     * @example 100                                                                                                    //
     */                                                                                                                //
    vOffset: 100,                                                                                                      // 6666
    /**                                                                                                                //
     * Distance, in pixels, the modal should push in from the side of the screen.                                      //
     * @option                                                                                                         //
     * @example 0                                                                                                      //
     */                                                                                                                //
    hOffset: 0,                                                                                                        // 6672
    /**                                                                                                                //
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.    //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    fullScreen: false,                                                                                                 // 6678
    /**                                                                                                                //
     * Percentage of screen height the modal should push up from the bottom of the view.                               //
     * @option                                                                                                         //
     * @example 10                                                                                                     //
     */                                                                                                                //
    btmOffsetPct: 10,                                                                                                  // 6684
    /**                                                                                                                //
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.                        //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    overlay: true,                                                                                                     // 6690
    /**                                                                                                                //
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    resetOnClose: false,                                                                                               // 6696
    /**                                                                                                                //
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    deepLink: false                                                                                                    // 6702
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Reveal, 'Reveal');                                                                                 // 6706
                                                                                                                       //
  function iPhoneSniff() {                                                                                             // 6708
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)                                                      // 6709
    );                                                                                                                 //
  }                                                                                                                    //
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 6713
                                                                                                                       //
var _createClass = (function () {                                                                                      // 6715
  function defineProperties(target, props) {                                                                           // 6715
    for (var i = 0; i < props.length; i++) {                                                                           // 6715
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 6717
  if (!(instance instanceof Constructor)) {                                                                            // 6717
    throw new TypeError("Cannot call a class as a function");                                                          // 6717
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 6719
                                                                                                                       //
  /**                                                                                                                  //
   * Slider module.                                                                                                    //
   * @module foundation.slider                                                                                         //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.touch                                                                                   //
   */                                                                                                                  //
                                                                                                                       //
  var Slider = (function () {                                                                                          // 6730
    /**                                                                                                                //
     * Creates a new instance of a drilldown menu.                                                                     //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to make into an accordion menu.                                         //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Slider(element, options) {                                                                                // 6738
      _classCallCheck(this, Slider);                                                                                   // 6739
                                                                                                                       //
      this.$element = element;                                                                                         // 6741
      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);                                     // 6742
                                                                                                                       //
      this._init();                                                                                                    // 6744
                                                                                                                       //
      Foundation.registerPlugin(this, 'Slider');                                                                       // 6746
      Foundation.Keyboard.register('Slider', {                                                                         // 6747
        'ltr': {                                                                                                       // 6748
          'ARROW_RIGHT': 'increase',                                                                                   // 6749
          'ARROW_UP': 'increase',                                                                                      // 6750
          'ARROW_DOWN': 'decrease',                                                                                    // 6751
          'ARROW_LEFT': 'decrease',                                                                                    // 6752
          'SHIFT_ARROW_RIGHT': 'increase_fast',                                                                        // 6753
          'SHIFT_ARROW_UP': 'increase_fast',                                                                           // 6754
          'SHIFT_ARROW_DOWN': 'decrease_fast',                                                                         // 6755
          'SHIFT_ARROW_LEFT': 'decrease_fast'                                                                          // 6756
        },                                                                                                             //
        'rtl': {                                                                                                       // 6758
          'ARROW_LEFT': 'increase',                                                                                    // 6759
          'ARROW_RIGHT': 'decrease',                                                                                   // 6760
          'SHIFT_ARROW_LEFT': 'increase_fast',                                                                         // 6761
          'SHIFT_ARROW_RIGHT': 'decrease_fast'                                                                         // 6762
        }                                                                                                              //
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Slider, [{                                                                                            // 6774
      key: '_init',                                                                                                    // 6775
      value: (function () {                                                                                            // 6776
        function _init() {                                                                                             // 6776
          this.inputs = this.$element.find('input');                                                                   // 6777
          this.handles = this.$element.find('[data-slider-handle]');                                                   // 6778
                                                                                                                       //
          this.$handle = this.handles.eq(0);                                                                           // 6780
          this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));          // 6781
          this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);    // 6782
                                                                                                                       //
          var isDbl = false,                                                                                           // 6784
              _this = this;                                                                                            //
          if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {                           // 6786
            this.options.disabled = true;                                                                              // 6787
            this.$element.addClass(this.options.disabledClass);                                                        // 6788
          }                                                                                                            //
          if (!this.inputs.length) {                                                                                   // 6790
            this.inputs = $().add(this.$input);                                                                        // 6791
            this.options.binding = true;                                                                               // 6792
          }                                                                                                            //
          this._setInitAttr(0);                                                                                        // 6794
          this._events(this.$handle);                                                                                  // 6795
                                                                                                                       //
          if (this.handles[1]) {                                                                                       // 6797
            this.options.doubleSided = true;                                                                           // 6798
            this.$handle2 = this.handles.eq(1);                                                                        // 6799
            this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));  // 6800
                                                                                                                       //
            if (!this.inputs[1]) {                                                                                     // 6802
              this.inputs = this.inputs.add(this.$input2);                                                             // 6803
            }                                                                                                          //
            isDbl = true;                                                                                              // 6805
                                                                                                                       //
            this._setHandlePos(this.$handle, this.options.initialStart, true, function () {                            // 6807
                                                                                                                       //
              _this._setHandlePos(_this.$handle2, _this.options.initialEnd, true);                                     // 6809
            });                                                                                                        //
            // this.$handle.triggerHandler('click.zf.slider');                                                         //
            this._setInitAttr(1);                                                                                      // 6812
            this._events(this.$handle2);                                                                               // 6813
          }                                                                                                            //
                                                                                                                       //
          if (!isDbl) {                                                                                                // 6816
            this._setHandlePos(this.$handle, this.options.initialStart, true);                                         // 6817
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Sets the position of the selected handle and fill bar.                                                        //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $hndl - the selected handle to move.                                                          //
       * @param {Number} location - floating point between the start and end values of the slider bar.                 //
       * @param {Function} cb - callback function to fire on completion.                                               //
       * @fires Slider#moved                                                                                           //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setHandlePos',                                                                                            // 6832
      value: (function () {                                                                                            // 6833
        function _setHandlePos($hndl, location, noInvert, cb) {                                                        // 6833
          //might need to alter that slightly for bars that will have odd number selections.                           //
          location = parseFloat(location); //on input change events, convert string to number...grumble.               // 6835
                                                                                                                       //
          // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
          if (location < this.options.start) {                                                                         // 6838
            location = this.options.start;                                                                             // 6839
          } else if (location > this.options.end) {                                                                    //
            location = this.options.end;                                                                               // 6841
          }                                                                                                            //
                                                                                                                       //
          var isDbl = this.options.doubleSided;                                                                        // 6844
                                                                                                                       //
          if (isDbl) {                                                                                                 // 6846
            //this block is to prevent 2 handles from crossing eachother. Could/should be improved.                    //
            if (this.handles.index($hndl) === 0) {                                                                     // 6848
              var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));                                             // 6849
              location = location >= h2Val ? h2Val - this.options.step : location;                                     // 6850
            } else {                                                                                                   //
              var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));                                              // 6852
              location = location <= h1Val ? h1Val + this.options.step : location;                                     // 6853
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
          //for click and drag events, it's weird due to the scale(-1, 1) css property                                 //
          if (this.options.vertical && !noInvert) {                                                                    // 6859
            location = this.options.end - location;                                                                    // 6860
          }                                                                                                            //
                                                                                                                       //
          var _this = this,                                                                                            // 6863
              vert = this.options.vertical,                                                                            //
              hOrW = vert ? 'height' : 'width',                                                                        //
              lOrT = vert ? 'top' : 'left',                                                                            //
              handleDim = $hndl[0].getBoundingClientRect()[hOrW],                                                      //
              elemDim = this.$element[0].getBoundingClientRect()[hOrW],                                                //
                                                                                                                       //
          //percentage of bar min/max value based on click or drag point                                               //
          pctOfBar = percent(location, this.options.end).toFixed(2),                                                   // 6871
                                                                                                                       //
          //number of actual pixels to shift the handle, based on the percentage obtained above                        //
          pxToMove = (elemDim - handleDim) * pctOfBar,                                                                 // 6874
                                                                                                                       //
          //percentage of bar to shift the handle                                                                      //
          movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);                                 // 6877
          //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
          location = parseFloat(location.toFixed(this.options.decimal));                                               // 6879
          // declare empty object for css adjustments, only used with 2 handled-sliders                                //
          var css = {};                                                                                                // 6881
                                                                                                                       //
          this._setValues($hndl, location);                                                                            // 6883
                                                                                                                       //
          // TODO update to calculate based on values set to respective inputs??                                       //
          if (isDbl) {                                                                                                 // 6886
            var isLeftHndl = this.handles.index($hndl) === 0,                                                          // 6887
                                                                                                                       //
            //empty variable, will be used for min-height/width for fill bar                                           //
            dim,                                                                                                       // 6890
                                                                                                                       //
            //percentage w/h of the handle compared to the slider bar                                                  //
            handlePct = ~ ~(percent(handleDim, elemDim) * 100);                                                        // 6893
            //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
            if (isLeftHndl) {                                                                                          // 6895
              //left or top percentage value to apply to the fill bar.                                                 //
              css[lOrT] = movement + '%';                                                                              // 6897
              //calculate the new min-height/width for the fill bar.                                                   //
              dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;                                   // 6899
              //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
              //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.                        //
              if (cb && typeof cb === 'function') {                                                                    // 6902
                cb();                                                                                                  // 6903
              } //this is only needed for the initialization of 2 handled sliders                                      //
            } else {                                                                                                   //
                //just caching the value of the left/bottom handle's left/top property                                 //
                var handlePos = parseFloat(this.$handle[0].style[lOrT]);                                               // 6907
                //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
                //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
                dim = movement - (isNaN(handlePos) ? this.options.initialStart / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
              }                                                                                                        //
            // assign the min-height/width to our css object                                                           //
            css['min-' + hOrW] = dim + '%';                                                                            // 6913
          }                                                                                                            //
                                                                                                                       //
          this.$element.one('finished.zf.animate', function () {                                                       // 6916
            /**                                                                                                        //
             * Fires when the handle is done moving.                                                                   //
             * @event Slider#moved                                                                                     //
             */                                                                                                        //
            _this.$element.trigger('moved.zf.slider', [$hndl]);                                                        // 6921
          });                                                                                                          //
                                                                                                                       //
          //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
          var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;                           // 6925
                                                                                                                       //
          Foundation.Move(moveTime, $hndl, function () {                                                               // 6927
            //adjusting the left/top property of the handle, based on the percentage calculated above                  //
            $hndl.css(lOrT, movement + '%');                                                                           // 6929
                                                                                                                       //
            if (!_this.options.doubleSided) {                                                                          // 6931
              //if single-handled, a simple method to expand the fill bar                                              //
              _this.$fill.css(hOrW, pctOfBar * 100 + '%');                                                             // 6933
            } else {                                                                                                   //
              //otherwise, use the css object we created above                                                         //
              _this.$fill.css(css);                                                                                    // 6936
            }                                                                                                          //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _setHandlePos;                                                                                          //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Sets the initial attribute for the slider element.                                                            //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {Number} idx - index of the current handle/input to use.                                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setInitAttr',                                                                                             // 6949
      value: (function () {                                                                                            // 6950
        function _setInitAttr(idx) {                                                                                   // 6950
          var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');                              // 6951
          this.inputs.eq(idx).attr({                                                                                   // 6952
            'id': id,                                                                                                  // 6953
            'max': this.options.end,                                                                                   // 6954
            'min': this.options.start,                                                                                 // 6955
            'step': this.options.step                                                                                  // 6956
          });                                                                                                          //
          this.handles.eq(idx).attr({                                                                                  // 6958
            'role': 'slider',                                                                                          // 6959
            'aria-controls': id,                                                                                       // 6960
            'aria-valuemax': this.options.end,                                                                         // 6961
            'aria-valuemin': this.options.start,                                                                       // 6962
            'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,                          // 6963
            'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',                                     // 6964
            'tabindex': 0                                                                                              // 6965
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _setInitAttr;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Sets the input and `aria-valuenow` values for the slider element.                                             //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $handle - the currently selected handle.                                                      //
       * @param {Number} val - floating point of the new value.                                                        //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setValues',                                                                                               // 6978
      value: (function () {                                                                                            // 6979
        function _setValues($handle, val) {                                                                            // 6979
          var idx = this.options.doubleSided ? this.handles.index($handle) : 0;                                        // 6980
          this.inputs.eq(idx).val(val);                                                                                // 6981
          $handle.attr('aria-valuenow', val);                                                                          // 6982
        }                                                                                                              //
                                                                                                                       //
        return _setValues;                                                                                             //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Handles events on the slider element.                                                                         //
       * Calculates the new location of the current handle.                                                            //
       * If there are two handles and the bar was clicked, it determines which handle to move.                         //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {Object} e - the `event` object passed from the listener.                                              //
       * @param {jQuery} $handle - the current handle to calculate for, if selected.                                   //
       * @param {Number} val - floating point number for the new value of the slider.                                  //
       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_handleEvent',                                                                                             // 6998
      value: (function () {                                                                                            // 6999
        function _handleEvent(e, $handle, val) {                                                                       // 6999
          var value, hasVal;                                                                                           // 7000
          if (!val) {                                                                                                  // 7001
            //click or drag events                                                                                     //
            e.preventDefault();                                                                                        // 7003
            var _this = this,                                                                                          // 7004
                vertical = this.options.vertical,                                                                      //
                param = vertical ? 'height' : 'width',                                                                 //
                direction = vertical ? 'top' : 'left',                                                                 //
                pageXY = vertical ? e.pageY : e.pageX,                                                                 //
                halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,                                     //
                barDim = this.$element[0].getBoundingClientRect()[param],                                              //
                barOffset = this.$element.offset()[direction] - pageXY,                                                //
                                                                                                                       //
            //if the cursor position is less than or greater than the elements bounding coordinates, set coordinates within those bounds
            barXY = barOffset > 0 ? -halfOfHandle : barOffset - halfOfHandle < -barDim ? barDim : Math.abs(barOffset),
                offsetPct = percent(barXY, barDim);                                                                    //
            value = (this.options.end - this.options.start) * offsetPct;                                               // 7016
                                                                                                                       //
            // turn everything around for RTL, yay math!                                                               //
            if (Foundation.rtl() && !this.options.vertical) {                                                          // 7019
              value = this.options.end - value;                                                                        // 7020
            }                                                                                                          //
                                                                                                                       //
            value = _this._adjustValue(null, value);                                                                   // 7023
            //boolean flag for the setHandlePos fn, specifically for vertical sliders                                  //
            hasVal = false;                                                                                            // 7025
                                                                                                                       //
            if (!$handle) {                                                                                            // 7027
              //figure out which handle it is, pass it to the next function.                                           //
              var firstHndlPos = absPosition(this.$handle, direction, barXY, param),                                   // 7029
                  secndHndlPos = absPosition(this.$handle2, direction, barXY, param);                                  //
              $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;                                   // 7031
            }                                                                                                          //
          } else {                                                                                                     //
            //change event on input                                                                                    //
            value = this._adjustValue(null, val);                                                                      // 7035
            hasVal = true;                                                                                             // 7036
          }                                                                                                            //
                                                                                                                       //
          this._setHandlePos($handle, value, hasVal);                                                                  // 7039
        }                                                                                                              //
                                                                                                                       //
        return _handleEvent;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adjustes value for handle in regard to step value. returns adjusted value                                     //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $handle - the selected handle.                                                                //
       * @param {Number} value - value to adjust. used if $handle is falsy                                             //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_adjustValue',                                                                                             // 7051
      value: (function () {                                                                                            // 7052
        function _adjustValue($handle, value) {                                                                        // 7052
          var val,                                                                                                     // 7053
              step = this.options.step,                                                                                //
              div = parseFloat(step / 2),                                                                              //
              left,                                                                                                    //
              prev_val,                                                                                                //
              next_val;                                                                                                //
          if (!!$handle) {                                                                                             // 7059
            val = parseFloat($handle.attr('aria-valuenow'));                                                           // 7060
          } else {                                                                                                     //
            val = value;                                                                                               // 7062
          }                                                                                                            //
          left = val % step;                                                                                           // 7064
          prev_val = val - left;                                                                                       // 7065
          next_val = prev_val + step;                                                                                  // 7066
          if (left === 0) {                                                                                            // 7067
            return val;                                                                                                // 7068
          }                                                                                                            //
          val = val >= prev_val + div ? next_val : prev_val;                                                           // 7070
          return val;                                                                                                  // 7071
        }                                                                                                              //
                                                                                                                       //
        return _adjustValue;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listeners to the slider elements.                                                                  //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $handle - the current handle to apply listeners to.                                           //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 7082
      value: (function () {                                                                                            // 7083
        function _events($handle) {                                                                                    // 7083
          if (this.options.disabled) {                                                                                 // 7084
            return false;                                                                                              // 7085
          }                                                                                                            //
                                                                                                                       //
          var _this = this,                                                                                            // 7088
              curHandle,                                                                                               //
              timer;                                                                                                   //
                                                                                                                       //
          this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {                                    // 7092
            var idx = _this.inputs.index($(this));                                                                     // 7093
            _this._handleEvent(e, _this.handles.eq(idx), $(this).val());                                               // 7094
          });                                                                                                          //
                                                                                                                       //
          if (this.options.clickSelect) {                                                                              // 7097
            this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {                                  // 7098
              if (_this.$element.data('dragging')) {                                                                   // 7099
                return false;                                                                                          // 7100
              }                                                                                                        //
                                                                                                                       //
              if (!$(e.target).is('[data-slider-handle]')) {                                                           // 7103
                if (_this.options.doubleSided) {                                                                       // 7104
                  _this._handleEvent(e);                                                                               // 7105
                } else {                                                                                               //
                  _this._handleEvent(e, _this.$handle);                                                                // 7107
                }                                                                                                      //
              }                                                                                                        //
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          if (this.options.draggable) {                                                                                // 7113
            this.handles.addTouch();                                                                                   // 7114
                                                                                                                       //
            var $body = $('body');                                                                                     // 7116
            $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {                                // 7117
              $handle.addClass('is-dragging');                                                                         // 7118
              _this.$fill.addClass('is-dragging'); //                                                                  // 7119
              _this.$element.data('dragging', true);                                                                   // 7120
                                                                                                                       //
              curHandle = $(e.currentTarget);                                                                          // 7122
                                                                                                                       //
              $body.on('mousemove.zf.slider', function (e) {                                                           // 7124
                e.preventDefault();                                                                                    // 7125
                                                                                                                       //
                _this._handleEvent(e, curHandle);                                                                      // 7127
              }).on('mouseup.zf.slider', function (e) {                                                                //
                _this._handleEvent(e, curHandle);                                                                      // 7129
                                                                                                                       //
                $handle.removeClass('is-dragging');                                                                    // 7131
                _this.$fill.removeClass('is-dragging');                                                                // 7132
                _this.$element.data('dragging', false);                                                                // 7133
                                                                                                                       //
                $body.off('mousemove.zf.slider mouseup.zf.slider');                                                    // 7135
              });                                                                                                      //
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {                                      // 7140
            var _$handle = $(this),                                                                                    // 7141
                idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,                                   //
                oldValue = parseFloat(_this.inputs.eq(idx).val()),                                                     //
                newValue;                                                                                              //
                                                                                                                       //
            // handle keyboard event with keyboard util                                                                //
            Foundation.Keyboard.handleKey(e, 'Slider', {                                                               // 7147
              decrease: function () {                                                                                  // 7148
                newValue = oldValue - _this.options.step;                                                              // 7149
              },                                                                                                       //
              increase: function () {                                                                                  // 7151
                newValue = oldValue + _this.options.step;                                                              // 7152
              },                                                                                                       //
              decrease_fast: function () {                                                                             // 7154
                newValue = oldValue - _this.options.step * 10;                                                         // 7155
              },                                                                                                       //
              increase_fast: function () {                                                                             // 7157
                newValue = oldValue + _this.options.step * 10;                                                         // 7158
              },                                                                                                       //
              handled: function () {                                                                                   // 7160
                // only set handle pos when event was handled specially                                                //
                e.preventDefault();                                                                                    // 7162
                _this._setHandlePos(_$handle, newValue, true);                                                         // 7163
              }                                                                                                        //
            });                                                                                                        //
            /*if (newValue) { // if pressed key has special function, update value                                     //
              e.preventDefault();                                                                                      //
              _this._setHandlePos(_$handle, newValue);                                                                 //
            }*/                                                                                                        //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the slider plugin.                                                                                   //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 7178
      value: (function () {                                                                                            // 7179
        function destroy() {                                                                                           // 7179
          this.handles.off('.zf.slider');                                                                              // 7180
          this.inputs.off('.zf.slider');                                                                               // 7181
          this.$element.off('.zf.slider');                                                                             // 7182
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 7184
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Slider;                                                                                                     // 7188
  })();                                                                                                                //
                                                                                                                       //
  Slider.defaults = {                                                                                                  // 7191
    /**                                                                                                                //
     * Minimum value for the slider scale.                                                                             //
     * @option                                                                                                         //
     * @example 0                                                                                                      //
     */                                                                                                                //
    start: 0,                                                                                                          // 7197
    /**                                                                                                                //
     * Maximum value for the slider scale.                                                                             //
     * @option                                                                                                         //
     * @example 100                                                                                                    //
     */                                                                                                                //
    end: 100,                                                                                                          // 7203
    /**                                                                                                                //
     * Minimum value change per change event.                                                                          //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    step: 1,                                                                                                           // 7209
    /**                                                                                                                //
     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.                 //
     * @option                                                                                                         //
     * @example 0                                                                                                      //
     */                                                                                                                //
    initialStart: 0,                                                                                                   // 7215
    /**                                                                                                                //
     * Value at which the right handle/second input should be set to on initialization.                                //
     * @option                                                                                                         //
     * @example 100                                                                                                    //
     */                                                                                                                //
    initialEnd: 100,                                                                                                   // 7221
    /**                                                                                                                //
     * Allows the input to be located outside the container and visible. Set to by the JS                              //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    binding: false,                                                                                                    // 7227
    /**                                                                                                                //
     * Allows the user to click/tap on the slider bar to select a value.                                               //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    clickSelect: true,                                                                                                 // 7233
    /**                                                                                                                //
     * Set to true and use the `vertical` class to change alignment to vertical.                                       //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    vertical: false,                                                                                                   // 7239
    /**                                                                                                                //
     * Allows the user to drag the slider handle(s) to select a value.                                                 //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    draggable: true,                                                                                                   // 7245
    /**                                                                                                                //
     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    disabled: false,                                                                                                   // 7251
    /**                                                                                                                //
     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.                           //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    doubleSided: false,                                                                                                // 7257
    /**                                                                                                                //
     * Potential future feature.                                                                                       //
     */                                                                                                                //
    // steps: 100,                                                                                                     //
    /**                                                                                                                //
     * Number of decimal places the plugin should go to for floating point precision.                                  //
     * @option                                                                                                         //
     * @example 2                                                                                                      //
     */                                                                                                                //
    decimal: 2,                                                                                                        // 7267
    /**                                                                                                                //
     * Time delay for dragged elements.                                                                                //
     */                                                                                                                //
    // dragDelay: 0,                                                                                                   //
    /**                                                                                                                //
     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
     * @option                                                                                                         //
     * @example 200                                                                                                    //
     */                                                                                                                //
    moveTime: 200, //update this if changing the transition time in the sass                                           // 7277
    /**                                                                                                                //
     * Class applied to disabled sliders.                                                                              //
     * @option                                                                                                         //
     * @example 'disabled'                                                                                             //
     */                                                                                                                //
    disabledClass: 'disabled',                                                                                         // 7283
    /**                                                                                                                //
     * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.    //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    invertVertical: false                                                                                              // 7289
  };                                                                                                                   //
                                                                                                                       //
  function percent(frac, num) {                                                                                        // 7292
    return frac / num;                                                                                                 // 7293
  }                                                                                                                    //
  function absPosition($handle, dir, clickPos, param) {                                                                // 7295
    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);                                        // 7296
  }                                                                                                                    //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Slider, 'Slider');                                                                                 // 7300
})(jQuery);                                                                                                            //
                                                                                                                       //
//*********this is in case we go to static, absolute positions instead of dynamic positioning********                  //
// this.setSteps(function() {                                                                                          //
//   _this._events();                                                                                                  //
//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;                                  //
//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;             //
//   if (initStart || initEnd) {                                                                                       //
//     _this._handleEvent(initStart, initEnd);                                                                         //
//   }                                                                                                                 //
// });                                                                                                                 //
                                                                                                                       //
//***********the other part of absolute positions*************                                                         //
// Slider.prototype.setSteps = function(cb) {                                                                          //
//   var posChange = this.$element.outerWidth() / this.options.steps;                                                  //
//   var counter = 0                                                                                                   //
//   while(counter < this.options.steps) {                                                                             //
//     if (counter) {                                                                                                  //
//       this.options.positions.push(this.options.positions[counter - 1] + posChange);                                 //
//     } else {                                                                                                        //
//       this.options.positions.push(posChange);                                                                       //
//     }                                                                                                               //
//     counter++;                                                                                                      //
//   }                                                                                                                 //
//   cb();                                                                                                             //
// };                                                                                                                  //
'use strict';                                                                                                          // 7327
                                                                                                                       //
var _createClass = (function () {                                                                                      // 7329
  function defineProperties(target, props) {                                                                           // 7329
    for (var i = 0; i < props.length; i++) {                                                                           // 7329
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 7331
  if (!(instance instanceof Constructor)) {                                                                            // 7331
    throw new TypeError("Cannot call a class as a function");                                                          // 7331
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 7333
                                                                                                                       //
  /**                                                                                                                  //
   * Sticky module.                                                                                                    //
   * @module foundation.sticky                                                                                         //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.mediaQuery                                                                              //
   */                                                                                                                  //
                                                                                                                       //
  var Sticky = (function () {                                                                                          // 7342
    /**                                                                                                                //
     * Creates a new instance of a sticky thing.                                                                       //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to make sticky.                                                         //
     * @param {Object} options - options object passed when creating the element programmatically.                     //
     */                                                                                                                //
                                                                                                                       //
    function Sticky(element, options) {                                                                                // 7350
      _classCallCheck(this, Sticky);                                                                                   // 7351
                                                                                                                       //
      this.$element = element;                                                                                         // 7353
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);                                     // 7354
                                                                                                                       //
      this._init();                                                                                                    // 7356
                                                                                                                       //
      Foundation.registerPlugin(this, 'Sticky');                                                                       // 7358
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes        //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Sticky, [{                                                                                            // 7368
      key: '_init',                                                                                                    // 7369
      value: (function () {                                                                                            // 7370
        function _init() {                                                                                             // 7370
          var $parent = this.$element.parent('[data-sticky-container]'),                                               // 7371
              id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),                                         //
              _this = this;                                                                                            //
                                                                                                                       //
          if (!$parent.length) {                                                                                       // 7375
            this.wasWrapped = true;                                                                                    // 7376
          }                                                                                                            //
          this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);             // 7378
          this.$container.addClass(this.options.containerClass);                                                       // 7379
                                                                                                                       //
          this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });                                // 7381
                                                                                                                       //
          this.scrollCount = this.options.checkEvery;                                                                  // 7383
          this.isStuck = false;                                                                                        // 7384
          $(window).one('load.zf.sticky', function () {                                                                // 7385
            if (_this.options.anchor !== '') {                                                                         // 7386
              _this.$anchor = $('#' + _this.options.anchor);                                                           // 7387
            } else {                                                                                                   //
              _this._parsePoints();                                                                                    // 7389
            }                                                                                                          //
                                                                                                                       //
            _this._setSizes(function () {                                                                              // 7392
              _this._calc(false);                                                                                      // 7393
            });                                                                                                        //
            _this._events(id.split('-').reverse().join('-'));                                                          // 7395
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_parsePoints',                                                                                             // 7406
      value: (function () {                                                                                            // 7407
        function _parsePoints() {                                                                                      // 7407
          var top = this.options.topAnchor,                                                                            // 7408
              btm = this.options.btmAnchor,                                                                            //
              pts = [top, btm],                                                                                        //
              breaks = {};                                                                                             //
          if (top && btm) {                                                                                            // 7412
                                                                                                                       //
            for (var i = 0, len = pts.length; i < len && pts[i]; i++) {                                                // 7414
              var pt;                                                                                                  // 7415
              if (typeof pts[i] === 'number') {                                                                        // 7416
                pt = pts[i];                                                                                           // 7417
              } else {                                                                                                 //
                var place = pts[i].split(':'),                                                                         // 7419
                    anchor = $('#' + place[0]);                                                                        //
                                                                                                                       //
                pt = anchor.offset().top;                                                                              // 7422
                if (place[1] && place[1].toLowerCase() === 'bottom') {                                                 // 7423
                  pt += anchor[0].getBoundingClientRect().height;                                                      // 7424
                }                                                                                                      //
              }                                                                                                        //
              breaks[i] = pt;                                                                                          // 7427
            }                                                                                                          //
          } else {                                                                                                     //
            breaks = { 0: 1, 1: document.documentElement.scrollHeight };                                               // 7430
          }                                                                                                            //
                                                                                                                       //
          this.points = breaks;                                                                                        // 7433
          return;                                                                                                      // 7434
        }                                                                                                              //
                                                                                                                       //
        return _parsePoints;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for the scrolling element.                                                                //
       * @private                                                                                                      //
       * @param {String} id - psuedo-random id for unique scroll event listener.                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 7444
      value: (function () {                                                                                            // 7445
        function _events(id) {                                                                                         // 7445
          var _this = this,                                                                                            // 7446
              scrollListener = this.scrollListener = 'scroll.zf.' + id;                                                //
          if (this.isOn) {                                                                                             // 7448
            return;                                                                                                    // 7449
          }                                                                                                            //
          if (this.canStick) {                                                                                         // 7451
            this.isOn = true;                                                                                          // 7452
            $(window).off(scrollListener).on(scrollListener, function (e) {                                            // 7453
              if (_this.scrollCount === 0) {                                                                           // 7454
                _this.scrollCount = _this.options.checkEvery;                                                          // 7455
                _this._setSizes(function () {                                                                          // 7456
                  _this._calc(false, window.pageYOffset);                                                              // 7457
                });                                                                                                    //
              } else {                                                                                                 //
                _this.scrollCount--;                                                                                   // 7460
                _this._calc(false, window.pageYOffset);                                                                // 7461
              }                                                                                                        //
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {                        // 7466
            _this._setSizes(function () {                                                                              // 7467
              _this._calc(false);                                                                                      // 7468
              if (_this.canStick) {                                                                                    // 7469
                if (!_this.isOn) {                                                                                     // 7470
                  _this._events(id);                                                                                   // 7471
                }                                                                                                      //
              } else if (_this.isOn) {                                                                                 //
                _this._pauseListeners(scrollListener);                                                                 // 7474
              }                                                                                                        //
            });                                                                                                        //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Removes event handlers for scroll and change events on anchor.                                                //
       * @fires Sticky#pause                                                                                           //
       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_pauseListeners',                                                                                          // 7487
      value: (function () {                                                                                            // 7488
        function _pauseListeners(scrollListener) {                                                                     // 7488
          this.isOn = false;                                                                                           // 7489
          $(window).off(scrollListener);                                                                               // 7490
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the plugin is paused due to resize event shrinking the view.                                   //
           * @event Sticky#pause                                                                                       //
           * @private                                                                                                  //
           */                                                                                                          //
          this.$element.trigger('pause.zf.sticky');                                                                    // 7497
        }                                                                                                              //
                                                                                                                       //
        return _pauseListeners;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Called on every `scroll` event and on `_init`                                                                 //
       * fires functions based on booleans and cached values                                                           //
       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.                        //
       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_calc',                                                                                                    // 7508
      value: (function () {                                                                                            // 7509
        function _calc(checkSizes, scroll) {                                                                           // 7509
          if (checkSizes) {                                                                                            // 7510
            this._setSizes();                                                                                          // 7511
          }                                                                                                            //
                                                                                                                       //
          if (!this.canStick) {                                                                                        // 7514
            if (this.isStuck) {                                                                                        // 7515
              this._removeSticky(true);                                                                                // 7516
            }                                                                                                          //
            return false;                                                                                              // 7518
          }                                                                                                            //
                                                                                                                       //
          if (!scroll) {                                                                                               // 7521
            scroll = window.pageYOffset;                                                                               // 7522
          }                                                                                                            //
                                                                                                                       //
          if (scroll >= this.topPoint) {                                                                               // 7525
            if (scroll <= this.bottomPoint) {                                                                          // 7526
              if (!this.isStuck) {                                                                                     // 7527
                this._setSticky();                                                                                     // 7528
              }                                                                                                        //
            } else {                                                                                                   //
              if (this.isStuck) {                                                                                      // 7531
                this._removeSticky(false);                                                                             // 7532
              }                                                                                                        //
            }                                                                                                          //
          } else {                                                                                                     //
            if (this.isStuck) {                                                                                        // 7536
              this._removeSticky(true);                                                                                // 7537
            }                                                                                                          //
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _calc;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Causes the $element to become stuck.                                                                          //
       * Adds `position: fixed;`, and helper classes.                                                                  //
       * @fires Sticky#stuckto                                                                                         //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setSticky',                                                                                               // 7551
      value: (function () {                                                                                            // 7552
        function _setSticky() {                                                                                        // 7552
          var stickTo = this.options.stickTo,                                                                          // 7553
              mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',                                                 //
              notStuckTo = stickTo === 'top' ? 'bottom' : 'top',                                                       //
              css = {};                                                                                                //
                                                                                                                       //
          css[mrgn] = this.options[mrgn] + 'em';                                                                       // 7558
          css[stickTo] = 0;                                                                                            // 7559
          css[notStuckTo] = 'auto';                                                                                    // 7560
          css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])["padding-left"], 10);
          this.isStuck = true;                                                                                         // 7562
          this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)  // 7563
          /**                                                                                                          //
           * Fires when the $element has become `position: fixed;`                                                     //
           * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`                                             //
           * @event Sticky#stuckto                                                                                     //
           */                                                                                                          //
          .trigger('sticky.zf.stuckto:' + stickTo);                                                                    //
        }                                                                                                              //
                                                                                                                       //
        return _setSticky;                                                                                             //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Causes the $element to become unstuck.                                                                        //
       * Removes `position: fixed;`, and helper classes.                                                               //
       * Adds other helper classes.                                                                                    //
       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
       * @fires Sticky#unstuckfrom                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_removeSticky',                                                                                            // 7582
      value: (function () {                                                                                            // 7583
        function _removeSticky(isTop) {                                                                                // 7583
          var stickTo = this.options.stickTo,                                                                          // 7584
              stickToTop = stickTo === 'top',                                                                          //
              css = {},                                                                                                //
              anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,        //
              mrgn = stickToTop ? 'marginTop' : 'marginBottom',                                                        //
              notStuckTo = stickToTop ? 'bottom' : 'top',                                                              //
              topOrBottom = isTop ? 'top' : 'bottom';                                                                  //
                                                                                                                       //
          css[mrgn] = 0;                                                                                               // 7592
                                                                                                                       //
          if (isTop && !stickToTop || stickToTop && !isTop) {                                                          // 7594
            css[stickTo] = anchorPt;                                                                                   // 7595
            css[notStuckTo] = 0;                                                                                       // 7596
          } else {                                                                                                     //
            css[stickTo] = 0;                                                                                          // 7598
            css[notStuckTo] = anchorPt;                                                                                // 7599
          }                                                                                                            //
                                                                                                                       //
          css['left'] = '';                                                                                            // 7602
          this.isStuck = false;                                                                                        // 7603
          this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)
          /**                                                                                                          //
           * Fires when the $element has become anchored.                                                              //
           * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`                                      //
           * @event Sticky#unstuckfrom                                                                                 //
           */                                                                                                          //
          .trigger('sticky.zf.unstuckfrom:' + topOrBottom);                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _removeSticky;                                                                                          //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Sets the $element and $container sizes for plugin.                                                            //
       * Calls `_setBreakPoints`.                                                                                      //
       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setSizes',                                                                                                // 7621
      value: (function () {                                                                                            // 7622
        function _setSizes(cb) {                                                                                       // 7622
          this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);                                        // 7623
          if (!this.canStick) {                                                                                        // 7624
            cb();                                                                                                      // 7625
          }                                                                                                            //
          var _this = this,                                                                                            // 7627
              newElemWidth = this.$container[0].getBoundingClientRect().width,                                         //
              comp = window.getComputedStyle(this.$container[0]),                                                      //
              pdng = parseInt(comp['padding-right'], 10);                                                              //
                                                                                                                       //
          if (this.$anchor && this.$anchor.length) {                                                                   // 7632
            this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;                                        // 7633
          } else {                                                                                                     //
            this._parsePoints();                                                                                       // 7635
          }                                                                                                            //
                                                                                                                       //
          this.$element.css({                                                                                          // 7638
            'max-width': newElemWidth - pdng + 'px'                                                                    // 7639
          });                                                                                                          //
                                                                                                                       //
          var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;            // 7642
          this.containerHeight = newContainerHeight;                                                                   // 7643
          this.$container.css({                                                                                        // 7644
            height: newContainerHeight                                                                                 // 7645
          });                                                                                                          //
          this.elemHeight = newContainerHeight;                                                                        // 7647
                                                                                                                       //
          if (this.isStuck) {                                                                                          // 7649
            this.$element.css({ "left": this.$container.offset().left + parseInt(comp['padding-left'], 10) });         // 7650
          }                                                                                                            //
                                                                                                                       //
          this._setBreakPoints(newContainerHeight, function () {                                                       // 7653
            if (cb) {                                                                                                  // 7654
              cb();                                                                                                    // 7655
            }                                                                                                          //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _setSizes;                                                                                              //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.                               //
       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.                  //
       * @param {Function} cb - optional callback function to be called on completion.                                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setBreakPoints',                                                                                          // 7668
      value: (function () {                                                                                            // 7669
        function _setBreakPoints(elemHeight, cb) {                                                                     // 7669
          if (!this.canStick) {                                                                                        // 7670
            if (cb) {                                                                                                  // 7671
              cb();                                                                                                    // 7672
            } else {                                                                                                   //
              return false;                                                                                            // 7674
            }                                                                                                          //
          }                                                                                                            //
          var mTop = emCalc(this.options.marginTop),                                                                   // 7677
              mBtm = emCalc(this.options.marginBottom),                                                                //
              topPoint = this.points ? this.points[0] : this.$anchor.offset().top,                                     //
              bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,                               //
                                                                                                                       //
          // topPoint = this.$anchor.offset().top || this.points[0],                                                   //
          // bottomPoint = topPoint + this.anchorHeight || this.points[1],                                             //
          winHeight = window.innerHeight;                                                                              // 7684
                                                                                                                       //
          if (this.options.stickTo === 'top') {                                                                        // 7686
            topPoint -= mTop;                                                                                          // 7687
            bottomPoint -= elemHeight + mTop;                                                                          // 7688
          } else if (this.options.stickTo === 'bottom') {                                                              //
            topPoint -= winHeight - (elemHeight + mBtm);                                                               // 7690
            bottomPoint -= winHeight - mBtm;                                                                           // 7691
          } else {                                                                                                     //
            //this would be the stickTo: both option... tricky                                                         //
          }                                                                                                            //
                                                                                                                       //
          this.topPoint = topPoint;                                                                                    // 7696
          this.bottomPoint = bottomPoint;                                                                              // 7697
                                                                                                                       //
          if (cb) {                                                                                                    // 7699
            cb();                                                                                                      // 7700
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _setBreakPoints;                                                                                        //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the current sticky element.                                                                          //
       * Resets the element to the top position first.                                                                 //
       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 7712
      value: (function () {                                                                                            // 7713
        function destroy() {                                                                                           // 7713
          this._removeSticky(true);                                                                                    // 7714
                                                                                                                       //
          this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({                         // 7716
            height: '',                                                                                                // 7717
            top: '',                                                                                                   // 7718
            bottom: '',                                                                                                // 7719
            'max-width': ''                                                                                            // 7720
          }).off('resizeme.zf.trigger');                                                                               //
                                                                                                                       //
          this.$anchor.off('change.zf.sticky');                                                                        // 7723
          $(window).off(this.scrollListener);                                                                          // 7724
                                                                                                                       //
          if (this.wasWrapped) {                                                                                       // 7726
            this.$element.unwrap();                                                                                    // 7727
          } else {                                                                                                     //
            this.$container.removeClass(this.options.containerClass).css({                                             // 7729
              height: ''                                                                                               // 7730
            });                                                                                                        //
          }                                                                                                            //
          Foundation.unregisterPlugin(this);                                                                           // 7733
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Sticky;                                                                                                     // 7737
  })();                                                                                                                //
                                                                                                                       //
  Sticky.defaults = {                                                                                                  // 7740
    /**                                                                                                                //
     * Customizable container template. Add your own classes for styling and sizing.                                   //
     * @option                                                                                                         //
     * @example '&lt;div data-sticky-container class="small-6 columns"&gt;&lt;/div&gt;'                                //
     */                                                                                                                //
    container: '<div data-sticky-container></div>',                                                                    // 7746
    /**                                                                                                                //
     * Location in the view the element sticks to.                                                                     //
     * @option                                                                                                         //
     * @example 'top'                                                                                                  //
     */                                                                                                                //
    stickTo: 'top',                                                                                                    // 7752
    /**                                                                                                                //
     * If anchored to a single element, the id of that element.                                                        //
     * @option                                                                                                         //
     * @example 'exampleId'                                                                                            //
     */                                                                                                                //
    anchor: '',                                                                                                        // 7758
    /**                                                                                                                //
     * If using more than one element as anchor points, the id of the top anchor.                                      //
     * @option                                                                                                         //
     * @example 'exampleId:top'                                                                                        //
     */                                                                                                                //
    topAnchor: '',                                                                                                     // 7764
    /**                                                                                                                //
     * If using more than one element as anchor points, the id of the bottom anchor.                                   //
     * @option                                                                                                         //
     * @example 'exampleId:bottom'                                                                                     //
     */                                                                                                                //
    btmAnchor: '',                                                                                                     // 7770
    /**                                                                                                                //
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.                                    //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    marginTop: 1,                                                                                                      // 7776
    /**                                                                                                                //
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.                                 //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    marginBottom: 1,                                                                                                   // 7782
    /**                                                                                                                //
     * Breakpoint string that is the minimum screen size an element should become sticky.                              //
     * @option                                                                                                         //
     * @example 'medium'                                                                                               //
     */                                                                                                                //
    stickyOn: 'medium',                                                                                                // 7788
    /**                                                                                                                //
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.                   //
     * @option                                                                                                         //
     * @example 'sticky'                                                                                               //
     */                                                                                                                //
    stickyClass: 'sticky',                                                                                             // 7794
    /**                                                                                                                //
     * Class applied to sticky container. Foundation defaults to `sticky-container`.                                   //
     * @option                                                                                                         //
     * @example 'sticky-container'                                                                                     //
     */                                                                                                                //
    containerClass: 'sticky-container',                                                                                // 7800
    /**                                                                                                                //
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option                                                                                                         //
     * @example 50                                                                                                     //
     */                                                                                                                //
    checkEvery: -1                                                                                                     // 7806
  };                                                                                                                   //
                                                                                                                       //
  /**                                                                                                                  //
   * Helper function to calculate em values                                                                            //
   * @param Number {em} - number of em's to calculate into pixels                                                      //
   */                                                                                                                  //
  function emCalc(em) {                                                                                                // 7813
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;                                   // 7814
  }                                                                                                                    //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Sticky, 'Sticky');                                                                                 // 7818
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 7820
                                                                                                                       //
var _createClass = (function () {                                                                                      // 7822
  function defineProperties(target, props) {                                                                           // 7822
    for (var i = 0; i < props.length; i++) {                                                                           // 7822
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 7824
  if (!(instance instanceof Constructor)) {                                                                            // 7824
    throw new TypeError("Cannot call a class as a function");                                                          // 7824
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 7826
                                                                                                                       //
  /**                                                                                                                  //
   * Tabs module.                                                                                                      //
   * @module foundation.tabs                                                                                           //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.timerAndImageLoader if tabs contain images                                              //
   */                                                                                                                  //
                                                                                                                       //
  var Tabs = (function () {                                                                                            // 7835
    /**                                                                                                                //
     * Creates a new instance of tabs.                                                                                 //
     * @class                                                                                                          //
     * @fires Tabs#init                                                                                                //
     * @param {jQuery} element - jQuery object to make into tabs.                                                      //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Tabs(element, options) {                                                                                  // 7844
      _classCallCheck(this, Tabs);                                                                                     // 7845
                                                                                                                       //
      this.$element = element;                                                                                         // 7847
      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);                                       // 7848
                                                                                                                       //
      this._init();                                                                                                    // 7850
      Foundation.registerPlugin(this, 'Tabs');                                                                         // 7851
      Foundation.Keyboard.register('Tabs', {                                                                           // 7852
        'ENTER': 'open',                                                                                               // 7853
        'SPACE': 'open',                                                                                               // 7854
        'ARROW_RIGHT': 'next',                                                                                         // 7855
        'ARROW_UP': 'previous',                                                                                        // 7856
        'ARROW_DOWN': 'next',                                                                                          // 7857
        'ARROW_LEFT': 'previous'                                                                                       // 7858
        // 'TAB': 'next',                                                                                              //
        // 'SHIFT_TAB': 'previous'                                                                                     //
      });                                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.                         //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Tabs, [{                                                                                              // 7870
      key: '_init',                                                                                                    // 7871
      value: (function () {                                                                                            // 7872
        function _init() {                                                                                             // 7872
          var _this = this;                                                                                            // 7873
                                                                                                                       //
          this.$tabTitles = this.$element.find('.' + this.options.linkClass);                                          // 7875
          this.$tabContent = $('[data-tabs-content="' + this.$element[0].id + '"]');                                   // 7876
                                                                                                                       //
          this.$tabTitles.each(function () {                                                                           // 7878
            var $elem = $(this),                                                                                       // 7879
                $link = $elem.find('a'),                                                                               //
                isActive = $elem.hasClass('is-active'),                                                                //
                hash = $link[0].hash.slice(1),                                                                         //
                linkId = $link[0].id ? $link[0].id : hash + '-label',                                                  //
                $tabContent = $('#' + hash);                                                                           //
                                                                                                                       //
            $elem.attr({ 'role': 'presentation' });                                                                    // 7886
                                                                                                                       //
            $link.attr({                                                                                               // 7888
              'role': 'tab',                                                                                           // 7889
              'aria-controls': hash,                                                                                   // 7890
              'aria-selected': isActive,                                                                               // 7891
              'id': linkId                                                                                             // 7892
            });                                                                                                        //
                                                                                                                       //
            $tabContent.attr({                                                                                         // 7895
              'role': 'tabpanel',                                                                                      // 7896
              'aria-hidden': !isActive,                                                                                // 7897
              'aria-labelledby': linkId                                                                                // 7898
            });                                                                                                        //
                                                                                                                       //
            if (isActive && _this.options.autoFocus) {                                                                 // 7901
              $link.focus();                                                                                           // 7902
            }                                                                                                          //
          });                                                                                                          //
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 7906
            var $images = this.$tabContent.find('img');                                                                // 7907
                                                                                                                       //
            if ($images.length) {                                                                                      // 7909
              Foundation.onImagesLoaded($images, this._setHeight.bind(this));                                          // 7910
            } else {                                                                                                   //
              this._setHeight();                                                                                       // 7912
            }                                                                                                          //
          }                                                                                                            //
                                                                                                                       //
          this._events();                                                                                              // 7916
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for items within the tabs.                                                                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 7925
      value: (function () {                                                                                            // 7926
        function _events() {                                                                                           // 7926
          this._addKeyHandler();                                                                                       // 7927
          this._addClickHandler();                                                                                     // 7928
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 7930
            $(window).on('changed.zf.mediaquery', this._setHeight.bind(this));                                         // 7931
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds click handlers for items within the tabs.                                                                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_addClickHandler',                                                                                         // 7941
      value: (function () {                                                                                            // 7942
        function _addClickHandler() {                                                                                  // 7942
          var _this = this;                                                                                            // 7943
                                                                                                                       //
          this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {          // 7945
            e.preventDefault();                                                                                        // 7946
            e.stopPropagation();                                                                                       // 7947
            if ($(this).hasClass('is-active')) {                                                                       // 7948
              return;                                                                                                  // 7949
            }                                                                                                          //
            _this._handleTabChange($(this));                                                                           // 7951
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _addClickHandler;                                                                                       //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Adds keyboard event handlers for items within the tabs.                                                       //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_addKeyHandler',                                                                                           // 7961
      value: (function () {                                                                                            // 7962
        function _addKeyHandler() {                                                                                    // 7962
          var _this = this;                                                                                            // 7963
          var $firstTab = _this.$element.find('li:first-of-type');                                                     // 7964
          var $lastTab = _this.$element.find('li:last-of-type');                                                       // 7965
                                                                                                                       //
          this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {                                  // 7967
            if (e.which === 9) return;                                                                                 // 7968
            e.stopPropagation();                                                                                       // 7969
            e.preventDefault();                                                                                        // 7970
                                                                                                                       //
            var $element = $(this),                                                                                    // 7972
                $elements = $element.parent('ul').children('li'),                                                      //
                $prevElement,                                                                                          //
                $nextElement;                                                                                          //
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 7977
              if ($(this).is($element)) {                                                                              // 7978
                if (_this.options.wrapOnKeys) {                                                                        // 7979
                  $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);                                     // 7980
                  $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);                 // 7981
                } else {                                                                                               //
                  $prevElement = $elements.eq(Math.max(0, i - 1));                                                     // 7983
                  $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));                                  // 7984
                }                                                                                                      //
                return;                                                                                                // 7986
              }                                                                                                        //
            });                                                                                                        //
                                                                                                                       //
            // handle keyboard event with keyboard util                                                                //
            Foundation.Keyboard.handleKey(e, 'Tabs', {                                                                 // 7991
              open: function () {                                                                                      // 7992
                $element.find('[role="tab"]').focus();                                                                 // 7993
                _this._handleTabChange($element);                                                                      // 7994
              },                                                                                                       //
              previous: function () {                                                                                  // 7996
                $prevElement.find('[role="tab"]').focus();                                                             // 7997
                _this._handleTabChange($prevElement);                                                                  // 7998
              },                                                                                                       //
              next: function () {                                                                                      // 8000
                $nextElement.find('[role="tab"]').focus();                                                             // 8001
                _this._handleTabChange($nextElement);                                                                  // 8002
              }                                                                                                        //
            });                                                                                                        //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _addKeyHandler;                                                                                         //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Opens the tab `$targetContent` defined by `$target`.                                                          //
       * @param {jQuery} $target - Tab to open.                                                                        //
       * @fires Tabs#change                                                                                            //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_handleTabChange',                                                                                         // 8016
      value: (function () {                                                                                            // 8017
        function _handleTabChange($target) {                                                                           // 8017
          var $tabLink = $target.find('[role="tab"]'),                                                                 // 8018
              hash = $tabLink[0].hash,                                                                                 //
              $targetContent = this.$tabContent.find(hash),                                                            //
              $oldTab = this.$element.find('.' + this.options.linkClass + '.is-active').removeClass('is-active').find('[role="tab"]').attr({ 'aria-selected': 'false' });
                                                                                                                       //
          $('#' + $oldTab.attr('aria-controls')).removeClass('is-active').attr({ 'aria-hidden': 'true' });             // 8023
                                                                                                                       //
          $target.addClass('is-active');                                                                               // 8025
                                                                                                                       //
          $tabLink.attr({ 'aria-selected': 'true' });                                                                  // 8027
                                                                                                                       //
          $targetContent.addClass('is-active').attr({ 'aria-hidden': 'false' });                                       // 8029
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the plugin has successfully changed tabs.                                                      //
           * @event Tabs#change                                                                                        //
           */                                                                                                          //
          this.$element.trigger('change.zf.tabs', [$target]);                                                          // 8035
        }                                                                                                              //
                                                                                                                       //
        return _handleTabChange;                                                                                       //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Public method for selecting a content pane to display.                                                        //
       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.                     //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'selectTab',                                                                                                // 8045
      value: (function () {                                                                                            // 8046
        function selectTab(elem) {                                                                                     // 8046
          var idStr;                                                                                                   // 8047
                                                                                                                       //
          if (typeof elem === 'object') {                                                                              // 8049
            idStr = elem[0].id;                                                                                        // 8050
          } else {                                                                                                     //
            idStr = elem;                                                                                              // 8052
          }                                                                                                            //
                                                                                                                       //
          if (idStr.indexOf('#') < 0) {                                                                                // 8055
            idStr = '#' + idStr;                                                                                       // 8056
          }                                                                                                            //
                                                                                                                       //
          var $target = this.$tabTitles.find('[href="' + idStr + '"]').parent('.' + this.options.linkClass);           // 8059
                                                                                                                       //
          this._handleTabChange($target);                                                                              // 8061
        }                                                                                                              //
                                                                                                                       //
        return selectTab;                                                                                              //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: '_setHeight',                                                                                               // 8064
                                                                                                                       //
      /**                                                                                                              //
       * Sets the height of each panel to the height of the tallest panel.                                             //
       * If enabled in options, gets called on media query change.                                                     //
       * If loading content via external source, can be called directly or with _reflow.                               //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
      value: (function () {                                                                                            // 8073
        function _setHeight() {                                                                                        // 8073
          var max = 0;                                                                                                 // 8074
          this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {                    // 8075
            var panel = $(this),                                                                                       // 8076
                isActive = panel.hasClass('is-active');                                                                //
                                                                                                                       //
            if (!isActive) {                                                                                           // 8079
              panel.css({ 'visibility': 'hidden', 'display': 'block' });                                               // 8080
            }                                                                                                          //
                                                                                                                       //
            var temp = this.getBoundingClientRect().height;                                                            // 8083
                                                                                                                       //
            if (!isActive) {                                                                                           // 8085
              panel.css({                                                                                              // 8086
                'visibility': '',                                                                                      // 8087
                'display': ''                                                                                          // 8088
              });                                                                                                      //
            }                                                                                                          //
                                                                                                                       //
            max = temp > max ? temp : max;                                                                             // 8092
          }).css('height', max + 'px');                                                                                //
        }                                                                                                              //
                                                                                                                       //
        return _setHeight;                                                                                             //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of an tabs.                                                                              //
       * @fires Tabs#destroyed                                                                                         //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 8102
      value: (function () {                                                                                            // 8103
        function destroy() {                                                                                           // 8103
          this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 8106
            $(window).off('changed.zf.mediaquery');                                                                    // 8107
          }                                                                                                            //
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 8110
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Tabs;                                                                                                       // 8114
  })();                                                                                                                //
                                                                                                                       //
  Tabs.defaults = {                                                                                                    // 8117
    /**                                                                                                                //
     * Allows the window to scroll to content of active pane on load if set to true.                                   //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    autoFocus: false,                                                                                                  // 8123
                                                                                                                       //
    /**                                                                                                                //
     * Allows keyboard input to 'wrap' around the tab links.                                                           //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    wrapOnKeys: true,                                                                                                  // 8130
                                                                                                                       //
    /**                                                                                                                //
     * Allows the tab content panes to match heights if set to true.                                                   //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    matchHeight: false,                                                                                                // 8137
                                                                                                                       //
    /**                                                                                                                //
     * Class applied to `li`'s in tab link list.                                                                       //
     * @option                                                                                                         //
     * @example 'tabs-title'                                                                                           //
     */                                                                                                                //
    linkClass: 'tabs-title',                                                                                           // 8144
                                                                                                                       //
    /**                                                                                                                //
     * Class applied to the content containers.                                                                        //
     * @option                                                                                                         //
     * @example 'tabs-panel'                                                                                           //
     */                                                                                                                //
    panelClass: 'tabs-panel'                                                                                           // 8151
  };                                                                                                                   //
                                                                                                                       //
  function checkClass($elem) {                                                                                         // 8154
    return $elem.hasClass('is-active');                                                                                // 8155
  }                                                                                                                    //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Tabs, 'Tabs');                                                                                     // 8159
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 8161
                                                                                                                       //
var _createClass = (function () {                                                                                      // 8163
  function defineProperties(target, props) {                                                                           // 8163
    for (var i = 0; i < props.length; i++) {                                                                           // 8163
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 8165
  if (!(instance instanceof Constructor)) {                                                                            // 8165
    throw new TypeError("Cannot call a class as a function");                                                          // 8165
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 8167
                                                                                                                       //
  /**                                                                                                                  //
   * Toggler module.                                                                                                   //
   * @module foundation.toggler                                                                                        //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.triggers                                                                                //
   */                                                                                                                  //
                                                                                                                       //
  var Toggler = (function () {                                                                                         // 8176
    /**                                                                                                                //
     * Creates a new instance of Toggler.                                                                              //
     * @class                                                                                                          //
     * @fires Toggler#init                                                                                             //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Toggler(element, options) {                                                                               // 8185
      _classCallCheck(this, Toggler);                                                                                  // 8186
                                                                                                                       //
      this.$element = element;                                                                                         // 8188
      this.options = $.extend({}, Toggler.defaults, element.data(), options);                                          // 8189
      this.className = '';                                                                                             // 8190
                                                                                                                       //
      this._init();                                                                                                    // 8192
      this._events();                                                                                                  // 8193
                                                                                                                       //
      Foundation.registerPlugin(this, 'Toggler');                                                                      // 8195
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Toggler, [{                                                                                           // 8205
      key: '_init',                                                                                                    // 8206
      value: (function () {                                                                                            // 8207
        function _init() {                                                                                             // 8207
          var input;                                                                                                   // 8208
          // Parse animation classes if they were set                                                                  //
          if (this.options.animate) {                                                                                  // 8210
            input = this.options.animate.split(' ');                                                                   // 8211
                                                                                                                       //
            this.animationIn = input[0];                                                                               // 8213
            this.animationOut = input[1] || null;                                                                      // 8214
          }                                                                                                            //
          // Otherwise, parse toggle class                                                                             //
          else {                                                                                                       //
              input = this.$element.data('toggler');                                                                   // 8218
              // Allow for a . at the beginning of the string                                                          //
              this.className = input[0] === '.' ? input.slice(1) : input;                                              // 8220
            }                                                                                                          //
                                                                                                                       //
          // Add ARIA attributes to triggers                                                                           //
          var id = this.$element[0].id;                                                                                // 8224
          $('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id);
          // If the target is hidden, add aria-hidden                                                                  //
          this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);                             // 8227
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for the toggle trigger.                                                                    //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 8237
      value: (function () {                                                                                            // 8238
        function _events() {                                                                                           // 8238
          this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));                      // 8239
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
       * @function                                                                                                     //
       * @fires Toggler#on                                                                                             //
       * @fires Toggler#off                                                                                            //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'toggle',                                                                                                   // 8250
      value: (function () {                                                                                            // 8251
        function toggle() {                                                                                            // 8251
          this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();                                            // 8252
        }                                                                                                              //
                                                                                                                       //
        return toggle;                                                                                                 //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: '_toggleClass',                                                                                             // 8255
      value: (function () {                                                                                            // 8256
        function _toggleClass() {                                                                                      // 8256
          this.$element.toggleClass(this.className);                                                                   // 8257
                                                                                                                       //
          var isOn = this.$element.hasClass(this.className);                                                           // 8259
          if (isOn) {                                                                                                  // 8260
            /**                                                                                                        //
             * Fires if the target element has the class after a toggle.                                               //
             * @event Toggler#on                                                                                       //
             */                                                                                                        //
            this.$element.trigger('on.zf.toggler');                                                                    // 8265
          } else {                                                                                                     //
            /**                                                                                                        //
             * Fires if the target element does not have the class after a toggle.                                     //
             * @event Toggler#off                                                                                      //
             */                                                                                                        //
            this.$element.trigger('off.zf.toggler');                                                                   // 8271
          }                                                                                                            //
                                                                                                                       //
          this._updateARIA(isOn);                                                                                      // 8274
        }                                                                                                              //
                                                                                                                       //
        return _toggleClass;                                                                                           //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: '_toggleAnimate',                                                                                           // 8277
      value: (function () {                                                                                            // 8278
        function _toggleAnimate() {                                                                                    // 8278
          var _this = this;                                                                                            // 8279
                                                                                                                       //
          if (this.$element.is(':hidden')) {                                                                           // 8281
            Foundation.Motion.animateIn(this.$element, this.animationIn, function () {                                 // 8282
              this.trigger('on.zf.toggler');                                                                           // 8283
              _this._updateARIA(true);                                                                                 // 8284
            });                                                                                                        //
          } else {                                                                                                     //
            Foundation.Motion.animateOut(this.$element, this.animationOut, function () {                               // 8287
              this.trigger('off.zf.toggler');                                                                          // 8288
              _this._updateARIA(false);                                                                                // 8289
            });                                                                                                        //
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _toggleAnimate;                                                                                         //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: '_updateARIA',                                                                                              // 8294
      value: (function () {                                                                                            // 8295
        function _updateARIA(isOn) {                                                                                   // 8295
          this.$element.attr('aria-expanded', isOn ? true : false);                                                    // 8296
        }                                                                                                              //
                                                                                                                       //
        return _updateARIA;                                                                                            //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the instance of Toggler on the element.                                                              //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 8305
      value: (function () {                                                                                            // 8306
        function destroy() {                                                                                           // 8306
          this.$element.off('.zf.toggler');                                                                            // 8307
          Foundation.unregisterPlugin(this);                                                                           // 8308
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Toggler;                                                                                                    // 8312
  })();                                                                                                                //
                                                                                                                       //
  Toggler.defaults = {                                                                                                 // 8315
    /**                                                                                                                //
     * Tells the plugin if the element should animated when toggled.                                                   //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    animate: false                                                                                                     // 8321
  };                                                                                                                   //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Toggler, 'Toggler');                                                                               // 8325
})(jQuery);                                                                                                            //
'use strict';                                                                                                          // 8327
                                                                                                                       //
var _createClass = (function () {                                                                                      // 8329
  function defineProperties(target, props) {                                                                           // 8329
    for (var i = 0; i < props.length; i++) {                                                                           // 8329
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  //
  }return function (Constructor, protoProps, staticProps) {                                                            //
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   //
})();                                                                                                                  //
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 8331
  if (!(instance instanceof Constructor)) {                                                                            // 8331
    throw new TypeError("Cannot call a class as a function");                                                          // 8331
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
!(function ($) {                                                                                                       // 8333
                                                                                                                       //
  /**                                                                                                                  //
   * Tooltip module.                                                                                                   //
   * @module foundation.tooltip                                                                                        //
   * @requires foundation.util.box                                                                                     //
   * @requires foundation.util.triggers                                                                                //
   */                                                                                                                  //
                                                                                                                       //
  var Tooltip = (function () {                                                                                         // 8342
    /**                                                                                                                //
     * Creates a new instance of a Tooltip.                                                                            //
     * @class                                                                                                          //
     * @fires Tooltip#init                                                                                             //
     * @param {jQuery} element - jQuery object to attach a tooltip to.                                                 //
     * @param {Object} options - object to extend the default configuration.                                           //
     */                                                                                                                //
                                                                                                                       //
    function Tooltip(element, options) {                                                                               // 8351
      _classCallCheck(this, Tooltip);                                                                                  // 8352
                                                                                                                       //
      this.$element = element;                                                                                         // 8354
      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);                                    // 8355
                                                                                                                       //
      this.isActive = false;                                                                                           // 8357
      this.isClick = false;                                                                                            // 8358
      this._init();                                                                                                    // 8359
                                                                                                                       //
      Foundation.registerPlugin(this, 'Tooltip');                                                                      // 8361
    }                                                                                                                  //
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Tooltip, [{                                                                                           // 8370
      key: '_init',                                                                                                    // 8371
      value: (function () {                                                                                            // 8372
        function _init() {                                                                                             // 8372
          var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');                 // 8373
                                                                                                                       //
          this.options.positionClass = this._getPositionClass(this.$element);                                          // 8375
          this.options.tipText = this.options.tipText || this.$element.attr('title');                                  // 8376
          this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);              // 8377
                                                                                                                       //
          this.template.appendTo(document.body).text(this.options.tipText).hide();                                     // 8379
                                                                                                                       //
          this.$element.attr({                                                                                         // 8381
            'title': '',                                                                                               // 8382
            'aria-describedby': elemId,                                                                                // 8383
            'data-yeti-box': elemId,                                                                                   // 8384
            'data-toggle': elemId,                                                                                     // 8385
            'data-resize': elemId                                                                                      // 8386
          }).addClass(this.triggerClass);                                                                              //
                                                                                                                       //
          //helper variables to track movement on collisions                                                           //
          this.usedPositions = [];                                                                                     // 8390
          this.counter = 4;                                                                                            // 8391
          this.classChanged = false;                                                                                   // 8392
                                                                                                                       //
          this._events();                                                                                              // 8394
        }                                                                                                              //
                                                                                                                       //
        return _init;                                                                                                  //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Grabs the current positioning class, if present, and returns the value or an empty string.                    //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_getPositionClass',                                                                                        // 8403
      value: (function () {                                                                                            // 8404
        function _getPositionClass(element) {                                                                          // 8404
          if (!element) {                                                                                              // 8405
            return '';                                                                                                 // 8406
          }                                                                                                            //
          // var position = element.attr('class').match(/top|left|right/g);                                            //
          var position = element[0].className.match(/\b(top|left|right)\b/g);                                          // 8409
          position = position ? position[0] : '';                                                                      // 8410
          return position;                                                                                             // 8411
        }                                                                                                              //
                                                                                                                       //
        return _getPositionClass;                                                                                      //
      })()                                                                                                             //
    }, {                                                                                                               //
      key: '_buildTemplate',                                                                                           // 8414
                                                                                                                       //
      /**                                                                                                              //
       * builds the tooltip element, adds attributes, and returns the template.                                        //
       * @private                                                                                                      //
       */                                                                                                              //
      value: (function () {                                                                                            // 8420
        function _buildTemplate(id) {                                                                                  // 8420
          var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();
          var $template = $('<div></div>').addClass(templateClasses).attr({                                            // 8422
            'role': 'tooltip',                                                                                         // 8423
            'aria-hidden': true,                                                                                       // 8424
            'data-is-active': false,                                                                                   // 8425
            'data-is-focus': false,                                                                                    // 8426
            'id': id                                                                                                   // 8427
          });                                                                                                          //
          return $template;                                                                                            // 8429
        }                                                                                                              //
                                                                                                                       //
        return _buildTemplate;                                                                                         //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Function that gets called if a collision event is detected.                                                   //
       * @param {String} position - positioning class to try                                                           //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_reposition',                                                                                              // 8439
      value: (function () {                                                                                            // 8440
        function _reposition(position) {                                                                               // 8440
          this.usedPositions.push(position ? position : 'bottom');                                                     // 8441
                                                                                                                       //
          //default, try switching to opposite side                                                                    //
          if (!position && this.usedPositions.indexOf('top') < 0) {                                                    // 8444
            this.template.addClass('top');                                                                             // 8445
          } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {                                 //
            this.template.removeClass(position);                                                                       // 8447
          } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {                                 //
            this.template.removeClass(position).addClass('right');                                                     // 8449
          } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {                                 //
            this.template.removeClass(position).addClass('left');                                                      // 8451
          }                                                                                                            //
                                                                                                                       //
          //if default change didn't work, try bottom or left first                                                    //
          else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {    //
              this.template.addClass('left');                                                                          // 8456
            } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
              this.template.removeClass(position).addClass('left');                                                    // 8458
            } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
              this.template.removeClass(position);                                                                     // 8460
            } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
              this.template.removeClass(position);                                                                     // 8462
            }                                                                                                          //
            //if nothing cleared, set to bottom                                                                        //
            else {                                                                                                     //
                this.template.removeClass(position);                                                                   // 8466
              }                                                                                                        //
          this.classChanged = true;                                                                                    // 8468
          this.counter--;                                                                                              // 8469
        }                                                                                                              //
                                                                                                                       //
        return _reposition;                                                                                            //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
       * if the tooltip is larger than the screen width, default to full width - any user selected margin              //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_setPosition',                                                                                             // 8479
      value: (function () {                                                                                            // 8480
        function _setPosition() {                                                                                      // 8480
          var position = this._getPositionClass(this.template),                                                        // 8481
              $tipDims = Foundation.Box.GetDimensions(this.template),                                                  //
              $anchorDims = Foundation.Box.GetDimensions(this.$element),                                               //
              direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',                        //
              param = direction === 'top' ? 'height' : 'width',                                                        //
              offset = param === 'height' ? this.options.vOffset : this.options.hOffset,                               //
              _this = this;                                                                                            //
                                                                                                                       //
          if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {
            this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
              // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
              'width': $anchorDims.windowDims.width - this.options.hOffset * 2,                                        // 8492
              'height': 'auto'                                                                                         // 8493
            });                                                                                                        //
            return false;                                                                                              // 8495
          }                                                                                                            //
                                                                                                                       //
          this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));
                                                                                                                       //
          while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {                                    // 8500
            this._reposition(position);                                                                                // 8501
            this._setPosition();                                                                                       // 8502
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return _setPosition;                                                                                           //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * reveals the tooltip, and fires an event to close any other open tooltips on the page                          //
       * @fires Tooltip#closeme                                                                                        //
       * @fires Tooltip#show                                                                                           //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'show',                                                                                                     // 8514
      value: (function () {                                                                                            // 8515
        function show() {                                                                                              // 8515
          if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {                  // 8516
            // console.error('The screen is too small to display this tooltip');                                       //
            return false;                                                                                              // 8518
          }                                                                                                            //
                                                                                                                       //
          var _this = this;                                                                                            // 8521
          this.template.css('visibility', 'hidden').show();                                                            // 8522
          this._setPosition();                                                                                         // 8523
                                                                                                                       //
          /**                                                                                                          //
           * Fires to close all other open tooltips on the page                                                        //
           * @event Closeme#tooltip                                                                                    //
           */                                                                                                          //
          this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));                                       // 8529
                                                                                                                       //
          this.template.attr({                                                                                         // 8531
            'data-is-active': true,                                                                                    // 8532
            'aria-hidden': false                                                                                       // 8533
          });                                                                                                          //
          _this.isActive = true;                                                                                       // 8535
          // console.log(this.template);                                                                               //
          this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {          // 8537
            //maybe do stuff?                                                                                          //
          });                                                                                                          //
          /**                                                                                                          //
           * Fires when the tooltip is shown                                                                           //
           * @event Tooltip#show                                                                                       //
           */                                                                                                          //
          this.$element.trigger('show.zf.tooltip');                                                                    // 8544
        }                                                                                                              //
                                                                                                                       //
        return show;                                                                                                   //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Hides the current tooltip, and resets the positioning class if it was changed due to collision                //
       * @fires Tooltip#hide                                                                                           //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'hide',                                                                                                     // 8554
      value: (function () {                                                                                            // 8555
        function hide() {                                                                                              // 8555
          // console.log('hiding', this.$element.data('yeti-box'));                                                    //
          var _this = this;                                                                                            // 8557
          this.template.stop().attr({                                                                                  // 8558
            'aria-hidden': true,                                                                                       // 8559
            'data-is-active': false                                                                                    // 8560
          }).fadeOut(this.options.fadeOutDuration, function () {                                                       //
            _this.isActive = false;                                                                                    // 8562
            _this.isClick = false;                                                                                     // 8563
            if (_this.classChanged) {                                                                                  // 8564
              _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);
                                                                                                                       //
              _this.usedPositions = [];                                                                                // 8567
              _this.counter = 4;                                                                                       // 8568
              _this.classChanged = false;                                                                              // 8569
            }                                                                                                          //
          });                                                                                                          //
          /**                                                                                                          //
           * fires when the tooltip is hidden                                                                          //
           * @event Tooltip#hide                                                                                       //
           */                                                                                                          //
          this.$element.trigger('hide.zf.tooltip');                                                                    // 8576
        }                                                                                                              //
                                                                                                                       //
        return hide;                                                                                                   //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * adds event listeners for the tooltip and its anchor                                                           //
       * TODO combine some of the listeners like focus and mouseenter, etc.                                            //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: '_events',                                                                                                  // 8586
      value: (function () {                                                                                            // 8587
        function _events() {                                                                                           // 8587
          var _this = this;                                                                                            // 8588
          var $template = this.template;                                                                               // 8589
          var isFocus = false;                                                                                         // 8590
                                                                                                                       //
          if (!this.options.disableHover) {                                                                            // 8592
                                                                                                                       //
            this.$element.on('mouseenter.zf.tooltip', function (e) {                                                   // 8594
              if (!_this.isActive) {                                                                                   // 8595
                _this.timeout = setTimeout(function () {                                                               // 8596
                  _this.show();                                                                                        // 8597
                }, _this.options.hoverDelay);                                                                          //
              }                                                                                                        //
            }).on('mouseleave.zf.tooltip', function (e) {                                                              //
              clearTimeout(_this.timeout);                                                                             // 8601
              if (!isFocus || !_this.isClick && _this.options.clickOpen) {                                             // 8602
                _this.hide();                                                                                          // 8603
              }                                                                                                        //
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          if (this.options.clickOpen) {                                                                                // 8608
            this.$element.on('mousedown.zf.tooltip', function (e) {                                                    // 8609
              e.stopImmediatePropagation();                                                                            // 8610
              if (_this.isClick) {                                                                                     // 8611
                _this.hide();                                                                                          // 8612
                // _this.isClick = false;                                                                              //
              } else {                                                                                                 //
                  _this.isClick = true;                                                                                // 8615
                  if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {           // 8616
                    _this.show();                                                                                      // 8617
                  }                                                                                                    //
                }                                                                                                      //
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          if (!this.options.disableForTouch) {                                                                         // 8623
            this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {                                      // 8624
              _this.isActive ? _this.hide() : _this.show();                                                            // 8625
            });                                                                                                        //
          }                                                                                                            //
                                                                                                                       //
          this.$element.on({                                                                                           // 8629
            // 'toggle.zf.trigger': this.toggle.bind(this),                                                            //
            // 'close.zf.trigger': this.hide.bind(this)                                                                //
            'close.zf.trigger': this.hide.bind(this)                                                                   // 8632
          });                                                                                                          //
                                                                                                                       //
          this.$element.on('focus.zf.tooltip', function (e) {                                                          // 8635
            isFocus = true;                                                                                            // 8636
            // console.log(_this.isClick);                                                                             //
            if (_this.isClick) {                                                                                       // 8638
              return false;                                                                                            // 8639
            } else {                                                                                                   //
              // $(window)                                                                                             //
              _this.show();                                                                                            // 8642
            }                                                                                                          //
          }).on('focusout.zf.tooltip', function (e) {                                                                  //
            isFocus = false;                                                                                           // 8645
            _this.isClick = false;                                                                                     // 8646
            _this.hide();                                                                                              // 8647
          }).on('resizeme.zf.trigger', function () {                                                                   //
            if (_this.isActive) {                                                                                      // 8649
              _this._setPosition();                                                                                    // 8650
            }                                                                                                          //
          });                                                                                                          //
        }                                                                                                              //
                                                                                                                       //
        return _events;                                                                                                //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * adds a toggle method, in addition to the static show() & hide() functions                                     //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'toggle',                                                                                                   // 8661
      value: (function () {                                                                                            // 8662
        function toggle() {                                                                                            // 8662
          if (this.isActive) {                                                                                         // 8663
            this.hide();                                                                                               // 8664
          } else {                                                                                                     //
            this.show();                                                                                               // 8666
          }                                                                                                            //
        }                                                                                                              //
                                                                                                                       //
        return toggle;                                                                                                 //
      })()                                                                                                             //
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of tooltip, removes template element from the view.                                      //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               //
      key: 'destroy',                                                                                                  // 8676
      value: (function () {                                                                                            // 8677
        function destroy() {                                                                                           // 8677
          this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tootip')                              // 8678
          //  .removeClass('has-tip')                                                                                  //
          .removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');
                                                                                                                       //
          this.template.remove();                                                                                      // 8682
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 8684
        }                                                                                                              //
                                                                                                                       //
        return destroy;                                                                                                //
      })()                                                                                                             //
    }]);                                                                                                               //
                                                                                                                       //
    return Tooltip;                                                                                                    // 8688
  })();                                                                                                                //
                                                                                                                       //
  Tooltip.defaults = {                                                                                                 // 8691
    disableForTouch: false,                                                                                            // 8692
    /**                                                                                                                //
     * Time, in ms, before a tooltip should open on hover.                                                             //
     * @option                                                                                                         //
     * @example 200                                                                                                    //
     */                                                                                                                //
    hoverDelay: 200,                                                                                                   // 8698
    /**                                                                                                                //
     * Time, in ms, a tooltip should take to fade into view.                                                           //
     * @option                                                                                                         //
     * @example 150                                                                                                    //
     */                                                                                                                //
    fadeInDuration: 150,                                                                                               // 8704
    /**                                                                                                                //
     * Time, in ms, a tooltip should take to fade out of view.                                                         //
     * @option                                                                                                         //
     * @example 150                                                                                                    //
     */                                                                                                                //
    fadeOutDuration: 150,                                                                                              // 8710
    /**                                                                                                                //
     * Disables hover events from opening the tooltip if set to true                                                   //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    disableHover: false,                                                                                               // 8716
    /**                                                                                                                //
     * Optional addtional classes to apply to the tooltip template on init.                                            //
     * @option                                                                                                         //
     * @example 'my-cool-tip-class'                                                                                    //
     */                                                                                                                //
    templateClasses: '',                                                                                               // 8722
    /**                                                                                                                //
     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.                                 //
     * @option                                                                                                         //
     * @example 'tooltip'                                                                                              //
     */                                                                                                                //
    tooltipClass: 'tooltip',                                                                                           // 8728
    /**                                                                                                                //
     * Class applied to the tooltip anchor element.                                                                    //
     * @option                                                                                                         //
     * @example 'has-tip'                                                                                              //
     */                                                                                                                //
    triggerClass: 'has-tip',                                                                                           // 8734
    /**                                                                                                                //
     * Minimum breakpoint size at which to open the tooltip.                                                           //
     * @option                                                                                                         //
     * @example 'small'                                                                                                //
     */                                                                                                                //
    showOn: 'small',                                                                                                   // 8740
    /**                                                                                                                //
     * Custom template to be used to generate markup for tooltip.                                                      //
     * @option                                                                                                         //
     * @example '&lt;div class="tooltip"&gt;&lt;/div&gt;'                                                              //
     */                                                                                                                //
    template: '',                                                                                                      // 8746
    /**                                                                                                                //
     * Text displayed in the tooltip template on open.                                                                 //
     * @option                                                                                                         //
     * @example 'Some cool space fact here.'                                                                           //
     */                                                                                                                //
    tipText: '',                                                                                                       // 8752
    touchCloseText: 'Tap to close.',                                                                                   // 8753
    /**                                                                                                                //
     * Allows the tooltip to remain open if triggered with a click or touch event.                                     //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    clickOpen: true,                                                                                                   // 8759
    /**                                                                                                                //
     * Additional positioning classes, set by the JS                                                                   //
     * @option                                                                                                         //
     * @example 'top'                                                                                                  //
     */                                                                                                                //
    positionClass: '',                                                                                                 // 8765
    /**                                                                                                                //
     * Distance, in pixels, the template should push away from the anchor on the Y axis.                               //
     * @option                                                                                                         //
     * @example 10                                                                                                     //
     */                                                                                                                //
    vOffset: 10,                                                                                                       // 8771
    /**                                                                                                                //
     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.         //
     * @option                                                                                                         //
     * @example 12                                                                                                     //
     */                                                                                                                //
    hOffset: 12                                                                                                        // 8777
  };                                                                                                                   //
                                                                                                                       //
  /**                                                                                                                  //
   * TODO utilize resize event trigger                                                                                 //
   */                                                                                                                  //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Tooltip, 'Tooltip');                                                                               // 8785
})(jQuery);                                                                                                            //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['zurb:foundation-sites'] = {};

})();
